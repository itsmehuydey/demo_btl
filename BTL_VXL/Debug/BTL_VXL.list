
BTL_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009720  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08009830  08009830  00019830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e3c  08009e3c  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  08009e3c  08009e3c  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e3c  08009e3c  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e3c  08009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08009e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000250  0800a094  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800a094  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017100  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003219  00000000  00000000  00037379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0003a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  0003b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b096  00000000  00000000  0003c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169b4  00000000  00000000  000576ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee86  00000000  00000000  0006e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcf28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005880  00000000  00000000  000fcf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	08009818 	.word	0x08009818

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	08009818 	.word	0x08009818

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1)
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <isButtonPressed+0x24>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <isButtonPressed+0x18>
		return 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <isButtonPressed+0x1a>
	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	2000026c 	.word	0x2000026c

08000f6c <getKeyInput>:
	if(button_long_pressed[index] == 1)
		return 1;
	return 0;
}

void getKeyInput(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	static int longPressCounter[N0_OF_BUTTONS] = {0};
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e012      	b.n	8000f9e <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <getKeyInput+0x170>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f80:	4957      	ldr	r1, [pc, #348]	; (80010e0 <getKeyInput+0x174>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000f88:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <getKeyInput+0x178>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f90:	4952      	ldr	r1, [pc, #328]	; (80010dc <getKeyInput+0x170>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dde9      	ble.n	8000f78 <getKeyInput+0xc>
	}

	KeyReg0[0] = HAL_GPIO_ReadPin(D6_btn1_GPIO_Port, D6_btn1_Pin);
 8000fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa8:	484f      	ldr	r0, [pc, #316]	; (80010e8 <getKeyInput+0x17c>)
 8000faa:	f002 fe99 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <getKeyInput+0x178>)
 8000fb4:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(D7_btn2_GPIO_Port, D7_btn2_Pin);
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	484c      	ldr	r0, [pc, #304]	; (80010ec <getKeyInput+0x180>)
 8000fbc:	f002 fe90 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <getKeyInput+0x178>)
 8000fc6:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(D8_btn3_GPIO_Port, D8_btn3_Pin);
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	4847      	ldr	r0, [pc, #284]	; (80010ec <getKeyInput+0x180>)
 8000fce:	f002 fe87 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <getKeyInput+0x178>)
 8000fd8:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	e075      	b.n	80010cc <getKeyInput+0x160>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <getKeyInput+0x170>)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe8:	493e      	ldr	r1, [pc, #248]	; (80010e4 <getKeyInput+0x178>)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d168      	bne.n	80010c6 <getKeyInput+0x15a>
 8000ff4:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <getKeyInput+0x174>)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ffc:	4937      	ldr	r1, [pc, #220]	; (80010dc <getKeyInput+0x170>)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001004:	429a      	cmp	r2, r3
 8001006:	d15e      	bne.n	80010c6 <getKeyInput+0x15a>
			if(KeyReg2[i] != KeyReg3[i]){
 8001008:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <getKeyInput+0x174>)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001010:	4937      	ldr	r1, [pc, #220]	; (80010f0 <getKeyInput+0x184>)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001018:	429a      	cmp	r2, r3
 800101a:	d017      	beq.n	800104c <getKeyInput+0xe0>
				KeyReg3[i] = KeyReg2[i];
 800101c:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <getKeyInput+0x174>)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001024:	4932      	ldr	r1, [pc, #200]	; (80010f0 <getKeyInput+0x184>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 800102c:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <getKeyInput+0x184>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d121      	bne.n	800107c <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <getKeyInput+0x188>)
 800103a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800103e:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <getKeyInput+0x18c>)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800104a:	e017      	b.n	800107c <getKeyInput+0x110>
				}
			}
			else{
				TimeOutForKeyPress--;
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <getKeyInput+0x188>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <getKeyInput+0x188>)
 8001054:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <getKeyInput+0x188>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10e      	bne.n	800107c <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <getKeyInput+0x188>)
 8001060:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001064:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <getKeyInput+0x184>)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <getKeyInput+0x110>
						button_flag[i] = 1;
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <getKeyInput+0x18c>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2101      	movs	r1, #1
 8001078:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					//else release
				}
			}
			if(KeyReg3[i] == PRESSED_STATE){
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <getKeyInput+0x184>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d119      	bne.n	80010bc <getKeyInput+0x150>
			  	longPressCounter[i]++;
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <getKeyInput+0x190>)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <getKeyInput+0x190>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  	if(longPressCounter[i] >= 200){
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <getKeyInput+0x190>)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	2bc7      	cmp	r3, #199	; 0xc7
 80010a4:	dd0f      	ble.n	80010c6 <getKeyInput+0x15a>
			  		button_flag[i] = 1;
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <getKeyInput+0x18c>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2101      	movs	r1, #1
 80010ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  		longPressCounter[i] = 170;
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <getKeyInput+0x190>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	21aa      	movs	r1, #170	; 0xaa
 80010b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010ba:	e004      	b.n	80010c6 <getKeyInput+0x15a>
			  	}
			}
			else {
				longPressCounter[i] = 0;
 80010bc:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <getKeyInput+0x190>)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2100      	movs	r1, #0
 80010c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	dd86      	ble.n	8000fe0 <getKeyInput+0x74>
			}
		}
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000010 	.word	0x20000010
 80010e0:	20000020 	.word	0x20000020
 80010e4:	20000000 	.word	0x20000000
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40010800 	.word	0x40010800
 80010f0:	20000030 	.word	0x20000030
 80010f4:	20000040 	.word	0x20000040
 80010f8:	2000026c 	.word	0x2000026c
 80010fc:	2000027c 	.word	0x2000027c

08001100 <CheckCrc8>:
#include "main.h"
I2C_HandleTypeDef hi2c1;
float RH = 0;
float Temp = 0;
unsigned char  CheckCrc8(unsigned char *pDat,unsigned char Lenth)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	unsigned char crc = 0xff, i, j;
 800110c:	23ff      	movs	r3, #255	; 0xff
 800110e:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < Lenth ; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73bb      	strb	r3, [r7, #14]
 8001114:	e022      	b.n	800115c <CheckCrc8+0x5c>
	{
			crc = crc ^ *pDat;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4053      	eors	r3, r2
 800111e:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8001120:	2300      	movs	r3, #0
 8001122:	737b      	strb	r3, [r7, #13]
 8001124:	e011      	b.n	800114a <CheckCrc8+0x4a>
			{
					if (crc & 0x80) crc = (crc << 1) ^ 0x31;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da07      	bge.n	800113e <CheckCrc8+0x3e>
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001138:	b25b      	sxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e002      	b.n	8001144 <CheckCrc8+0x44>
					else crc <<= 1;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	3301      	adds	r3, #1
 8001148:	737b      	strb	r3, [r7, #13]
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9ea      	bls.n	8001126 <CheckCrc8+0x26>
			}
			pDat++;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	for (i = 0; i < Lenth ; i++)
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	3301      	adds	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	7bba      	ldrb	r2, [r7, #14]
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3d8      	bcc.n	8001116 <CheckCrc8+0x16>
	}
	return crc;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <read_register>:

uint8_t read_register(uint8_t register_pointer)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af04      	add	r7, sp, #16
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
	uint8_t return_value = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	b29a      	uxth	r2, r3
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 030e 	add.w	r3, r7, #14
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2170      	movs	r1, #112	; 0x70
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <read_register+0x48>)
 800119a:	f003 faa1 	bl	80046e0 <HAL_I2C_Mem_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
	/* Check the communication status */
	if(status != HAL_OK)
	{

	}
	printf("return_value for %X : %X \n",register_pointer, return_value);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	7bba      	ldrb	r2, [r7, #14]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <read_register+0x4c>)
 80011aa:	f006 f8e7 	bl	800737c <iprintf>
	return return_value;
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000304 	.word	0x20000304
 80011bc:	08009830 	.word	0x08009830

080011c0 <trigger_measurement_data_dht20>:


//Trigger measurement data
Status_Trigger_DHT20 trigger_measurement_data_dht20()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af02      	add	r7, sp, #8
	Status_Trigger_DHT20 status = DHT20_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	77fb      	strb	r3, [r7, #31]

	HAL_Delay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f002 fad2 	bl	8003774 <HAL_Delay>
	uint8_t status_init = read_register(0x71);
 80011d0:	2071      	movs	r0, #113	; 0x71
 80011d2:	f7ff ffcd 	bl	8001170 <read_register>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
	if ((status_init & 0x18) == 0x18) // et a byte of status word by sending 0x71. If the status word and 0x18 are not equal to 0x18
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	f003 0318 	and.w	r3, r3, #24
 80011e0:	2b18      	cmp	r3, #24
 80011e2:	f040 80b9 	bne.w	8001358 <trigger_measurement_data_dht20+0x198>
	{
		HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f002 fac4 	bl	8003774 <HAL_Delay>
		uint8_t data_t[3];
		data_t[0] = 0xAC; //address
 80011ec:	23ac      	movs	r3, #172	; 0xac
 80011ee:	733b      	strb	r3, [r7, #12]
		data_t[1] = 0x33; //data1
 80011f0:	2333      	movs	r3, #51	; 0x33
 80011f2:	737b      	strb	r3, [r7, #13]
		data_t[2] = 0x00; //data2
 80011f4:	2300      	movs	r3, #0
 80011f6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit (&hi2c1, ADDRESS_SLAVE_DHT20 << 1,(uint8_t *) data_t, 3, 100);
 80011f8:	f107 020c 	add.w	r2, r7, #12
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2303      	movs	r3, #3
 8001202:	2170      	movs	r1, #112	; 0x70
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <trigger_measurement_data_dht20+0x1a8>)
 8001206:	f002 ff01 	bl	800400c <HAL_I2C_Master_Transmit>
		HAL_Delay(80);
 800120a:	2050      	movs	r0, #80	; 0x50
 800120c:	f002 fab2 	bl	8003774 <HAL_Delay>

		uint8_t buffer[7];
		uint32_t data_read = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, buffer, 7, 100);
 8001214:	1d3a      	adds	r2, r7, #4
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2307      	movs	r3, #7
 800121c:	2170      	movs	r1, #112	; 0x70
 800121e:	4852      	ldr	r0, [pc, #328]	; (8001368 <trigger_measurement_data_dht20+0x1a8>)
 8001220:	f002 fff2 	bl	8004208 <HAL_I2C_Master_Receive>

		for (int i =0; i<7;i++)
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	e00b      	b.n	8001242 <trigger_measurement_data_dht20+0x82>
		{
			printf("bufffer %d: %X \n",i, buffer[i]);
 800122a:	1d3a      	adds	r2, r7, #4
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	69b9      	ldr	r1, [r7, #24]
 8001236:	484d      	ldr	r0, [pc, #308]	; (800136c <trigger_measurement_data_dht20+0x1ac>)
 8001238:	f006 f8a0 	bl	800737c <iprintf>
		for (int i =0; i<7;i++)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	3301      	adds	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b06      	cmp	r3, #6
 8001246:	ddf0      	ble.n	800122a <trigger_measurement_data_dht20+0x6a>
		}

		// Check Bit[7] at Byte0
		if ((buffer[0] & 0x80) == 0x00)
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	db79      	blt.n	8001344 <trigger_measurement_data_dht20+0x184>
		{
			// Check CRC
			if(CheckCrc8(&buffer[0],6)==buffer[6])
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2106      	movs	r1, #6
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff53 	bl	8001100 <CheckCrc8>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	7abb      	ldrb	r3, [r7, #10]
 8001260:	429a      	cmp	r2, r3
 8001262:	d169      	bne.n	8001338 <trigger_measurement_data_dht20+0x178>
			{
				printf("CRC OK \n");
 8001264:	4842      	ldr	r0, [pc, #264]	; (8001370 <trigger_measurement_data_dht20+0x1b0>)
 8001266:	f006 f90f 	bl	8007488 <puts>
				data_read=buffer[1]; //0x90
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;// 0x9000
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	613b      	str	r3, [r7, #16]
				data_read+=buffer[2]; //0x9000 + 0x28 => 0x9028
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	461a      	mov	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4413      	add	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8; //0x902800
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	613b      	str	r3, [r7, #16]
				data_read+=buffer[3]; //0x902800 + 0x96 => 0x902896
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	461a      	mov	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
				data_read=data_read>>4;				 // 0x902896 => 0x90289
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]

				RH = (float)data_read*100/1048576;
 8001294:	6938      	ldr	r0, [r7, #16]
 8001296:	f7ff fcad 	bl	8000bf4 <__aeabi_ui2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <trigger_measurement_data_dht20+0x1b4>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd00 	bl	8000ca4 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fdae 	bl	8000e0c <__aeabi_fdiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <trigger_measurement_data_dht20+0x1b8>)
 80012b6:	601a      	str	r2, [r3, #0]
				printf("RH %0.1f%% \n", RH);
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <trigger_measurement_data_dht20+0x1b8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8b3 	bl	8000428 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	482d      	ldr	r0, [pc, #180]	; (800137c <trigger_measurement_data_dht20+0x1bc>)
 80012c8:	f006 f858 	bl	800737c <iprintf>

				data_read=buffer[3]&0x0F;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	613b      	str	r3, [r7, #16]
				data_read+=buffer[4];
 80012da:	7a3b      	ldrb	r3, [r7, #8]
 80012dc:	461a      	mov	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4413      	add	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	613b      	str	r3, [r7, #16]
				data_read+=buffer[5];
 80012ea:	7a7b      	ldrb	r3, [r7, #9]
 80012ec:	461a      	mov	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4413      	add	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

				Temp = (float)data_read*200/1048576-50;
 80012f4:	6938      	ldr	r0, [r7, #16]
 80012f6:	f7ff fc7d 	bl	8000bf4 <__aeabi_ui2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4920      	ldr	r1, [pc, #128]	; (8001380 <trigger_measurement_data_dht20+0x1c0>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fcd0 	bl	8000ca4 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd7e 	bl	8000e0c <__aeabi_fdiv>
 8001310:	4603      	mov	r3, r0
 8001312:	491c      	ldr	r1, [pc, #112]	; (8001384 <trigger_measurement_data_dht20+0x1c4>)
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fbbb 	bl	8000a90 <__aeabi_fsub>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <trigger_measurement_data_dht20+0x1c8>)
 8001320:	601a      	str	r2, [r3, #0]
				printf("Temp %0.1f \n", Temp);
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <trigger_measurement_data_dht20+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f87e 	bl	8000428 <__aeabi_f2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <trigger_measurement_data_dht20+0x1cc>)
 8001332:	f006 f823 	bl	800737c <iprintf>
 8001336:	e011      	b.n	800135c <trigger_measurement_data_dht20+0x19c>
			}
			else
			{
				printf("CRC fail \n");
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <trigger_measurement_data_dht20+0x1d0>)
 800133a:	f006 f8a5 	bl	8007488 <puts>
				status = DHT20_ERROR_CRC;
 800133e:	2302      	movs	r3, #2
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e00b      	b.n	800135c <trigger_measurement_data_dht20+0x19c>
			}
		}
		else
		{
			printf("Check Bit[7] at Byte0: %x \n",buffer[0]&0x80);
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <trigger_measurement_data_dht20+0x1d4>)
 800134e:	f006 f815 	bl	800737c <iprintf>
			status = DHT20_BUSY;
 8001352:	2303      	movs	r3, #3
 8001354:	77fb      	strb	r3, [r7, #31]
 8001356:	e001      	b.n	800135c <trigger_measurement_data_dht20+0x19c>
		}

	}
	else //  initialize the 0x1B, 0x1C, 0x1E registers
	{
		status = DHT20_ERROR_INIT;
 8001358:	2301      	movs	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 800135c:	7ffb      	ldrb	r3, [r7, #31]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000304 	.word	0x20000304
 800136c:	0800984c 	.word	0x0800984c
 8001370:	08009860 	.word	0x08009860
 8001374:	42c80000 	.word	0x42c80000
 8001378:	2000028c 	.word	0x2000028c
 800137c:	08009868 	.word	0x08009868
 8001380:	43480000 	.word	0x43480000
 8001384:	42480000 	.word	0x42480000
 8001388:	20000290 	.word	0x20000290
 800138c:	08009878 	.word	0x08009878
 8001390:	08009888 	.word	0x08009888
 8001394:	08009894 	.word	0x08009894

08001398 <fsm_automatic>:
//        sprintf(buffer, "%s: %d", label, count);  // Định dạng số >= 10
//    }
//    lcd_send_string(buffer); // Hiển thị lên LCD
//}

void fsm_automatic(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b092      	sub	sp, #72	; 0x48
 800139c:	af00      	add	r7, sp, #0
	int amber_dummy;
	int green_dummy;

	switch(status){
 800139e:	4bbb      	ldr	r3, [pc, #748]	; (800168c <fsm_automatic+0x2f4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	f200 82c1 	bhi.w	800192a <fsm_automatic+0x592>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <fsm_automatic+0x18>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	0800192b 	.word	0x0800192b
 80013b8:	0800192b 	.word	0x0800192b
 80013bc:	0800192b 	.word	0x0800192b
 80013c0:	0800192b 	.word	0x0800192b
 80013c4:	08001413 	.word	0x08001413
 80013c8:	0800154f 	.word	0x0800154f
 80013cc:	080016c1 	.word	0x080016c1
 80013d0:	080017fd 	.word	0x080017fd
		case INIT:
			status = RED_GREEN;
 80013d4:	4bad      	ldr	r3, [pc, #692]	; (800168c <fsm_automatic+0x2f4>)
 80013d6:	2205      	movs	r2, #5
 80013d8:	601a      	str	r2, [r3, #0]
			setTimer(1, 3000);//300
 80013da:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80013de:	2001      	movs	r0, #1
 80013e0:	f001 ffec 	bl	80033bc <setTimer>
			setTimer(0, 100);//0
 80013e4:	2164      	movs	r1, #100	; 0x64
 80013e6:	2000      	movs	r0, #0
 80013e8:	f001 ffe8 	bl	80033bc <setTimer>
			lcd_init();
 80013ec:	f001 f95e 	bl	80026ac <lcd_init>
			lcd_clear_display();
 80013f0:	f001 f99f 	bl	8002732 <lcd_clear_display>
			clearAllLed();
 80013f4:	f002 f826 	bl	8003444 <clearAllLed>
			red = temp_red;
 80013f8:	4ba5      	ldr	r3, [pc, #660]	; (8001690 <fsm_automatic+0x2f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4aa5      	ldr	r2, [pc, #660]	; (8001694 <fsm_automatic+0x2fc>)
 80013fe:	6013      	str	r3, [r2, #0]
			amber = temp_amber;
 8001400:	4ba5      	ldr	r3, [pc, #660]	; (8001698 <fsm_automatic+0x300>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4aa5      	ldr	r2, [pc, #660]	; (800169c <fsm_automatic+0x304>)
 8001406:	6013      	str	r3, [r2, #0]
			green = temp_green;
 8001408:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <fsm_automatic+0x308>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4aa5      	ldr	r2, [pc, #660]	; (80016a4 <fsm_automatic+0x30c>)
 800140e:	6013      	str	r3, [r2, #0]
//			temp_red = max_red;
//			temp_amber = max_amber;
//			temp_green = max_green;
			//getSend();
			break;
 8001410:	e294      	b.n	800193c <fsm_automatic+0x5a4>
		case RED_GREEN:
			led_red_green();
 8001412:	f002 f833 	bl	800347c <led_red_green>
			if(timer_flag[0]){
 8001416:	4ba4      	ldr	r3, [pc, #656]	; (80016a8 <fsm_automatic+0x310>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04c      	beq.n	80014b8 <fsm_automatic+0x120>
				--red;
 800141e:	4b9d      	ldr	r3, [pc, #628]	; (8001694 <fsm_automatic+0x2fc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a9b      	ldr	r2, [pc, #620]	; (8001694 <fsm_automatic+0x2fc>)
 8001426:	6013      	str	r3, [r2, #0]
				--green;
 8001428:	4b9e      	ldr	r3, [pc, #632]	; (80016a4 <fsm_automatic+0x30c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a9d      	ldr	r2, [pc, #628]	; (80016a4 <fsm_automatic+0x30c>)
 8001430:	6013      	str	r3, [r2, #0]
				char buffer[16];
				                //lcd_clear_display();
				                // Hiển thị TrafficX
				                lcd_goto_XY(0, 1);
 8001432:	2101      	movs	r1, #1
 8001434:	2000      	movs	r0, #0
 8001436:	f001 f986 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 800143a:	4b96      	ldr	r3, [pc, #600]	; (8001694 <fsm_automatic+0x2fc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b09      	cmp	r3, #9
 8001440:	dc08      	bgt.n	8001454 <fsm_automatic+0xbc>
				                    sprintf(buffer, "TrafficX: 0%d", red);
 8001442:	4b94      	ldr	r3, [pc, #592]	; (8001694 <fsm_automatic+0x2fc>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	4998      	ldr	r1, [pc, #608]	; (80016ac <fsm_automatic+0x314>)
 800144c:	4618      	mov	r0, r3
 800144e:	f006 f867 	bl	8007520 <siprintf>
 8001452:	e007      	b.n	8001464 <fsm_automatic+0xcc>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", red);
 8001454:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <fsm_automatic+0x2fc>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145c:	4994      	ldr	r1, [pc, #592]	; (80016b0 <fsm_automatic+0x318>)
 800145e:	4618      	mov	r0, r3
 8001460:	f006 f85e 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f94d 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY
				                lcd_goto_XY(1, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	2001      	movs	r0, #1
 8001472:	f001 f968 	bl	8002746 <lcd_goto_XY>
				                if (green < 10) {
 8001476:	4b8b      	ldr	r3, [pc, #556]	; (80016a4 <fsm_automatic+0x30c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b09      	cmp	r3, #9
 800147c:	dc08      	bgt.n	8001490 <fsm_automatic+0xf8>
				                    sprintf(buffer, "TrafficY: 0%d", green);
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <fsm_automatic+0x30c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001486:	498b      	ldr	r1, [pc, #556]	; (80016b4 <fsm_automatic+0x31c>)
 8001488:	4618      	mov	r0, r3
 800148a:	f006 f849 	bl	8007520 <siprintf>
 800148e:	e007      	b.n	80014a0 <fsm_automatic+0x108>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", green);
 8001490:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <fsm_automatic+0x30c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001498:	4987      	ldr	r1, [pc, #540]	; (80016b8 <fsm_automatic+0x320>)
 800149a:	4618      	mov	r0, r3
 800149c:	f006 f840 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 80014a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f92f 	bl	8002708 <lcd_send_string>

				//displayLED7SEG(red, 0);
				//displayLED7SEG(green, 1);
				controlTime_led();
 80014aa:	f002 f857 	bl	800355c <controlTime_led>
				setTimer(0, 1000);
 80014ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b2:	2000      	movs	r0, #0
 80014b4:	f001 ff82 	bl	80033bc <setTimer>
			}
			if(timer_flag[1]){
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <fsm_automatic+0x310>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d011      	beq.n	80014e4 <fsm_automatic+0x14c>
				status = RED_AMBER;
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <fsm_automatic+0x2f4>)
 80014c2:	2206      	movs	r2, #6
 80014c4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80014c6:	f001 ffbd 	bl	8003444 <clearAllLed>
				controlTime_led();
 80014ca:	f002 f847 	bl	800355c <controlTime_led>
				amber_dummy = amber*1000;
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <fsm_automatic+0x304>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
				setTimer(1, amber_dummy);
 80014dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 ff6c 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fd2d 	bl	8000f44 <isButtonPressed>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d017      	beq.n	8001520 <fsm_automatic+0x188>
				status = MAN_RED_GREEN;
 80014f0:	4b66      	ldr	r3, [pc, #408]	; (800168c <fsm_automatic+0x2f4>)
 80014f2:	2209      	movs	r2, #9
 80014f4:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80014f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fa:	2001      	movs	r0, #1
 80014fc:	f001 ff5e 	bl	80033bc <setTimer>
				clearAllLed();
 8001500:	f001 ffa0 	bl	8003444 <clearAllLed>
				red = 10;
 8001504:	4b63      	ldr	r3, [pc, #396]	; (8001694 <fsm_automatic+0x2fc>)
 8001506:	220a      	movs	r2, #10
 8001508:	601a      	str	r2, [r3, #0]
				green = 10;
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <fsm_automatic+0x30c>)
 800150c:	220a      	movs	r2, #10
 800150e:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <fsm_automatic+0x324>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
				setTimer(0, 1000);
 8001516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800151a:	2000      	movs	r0, #0
 800151c:	f001 ff4e 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fd0f 	bl	8000f44 <isButtonPressed>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8200 	beq.w	800192e <fsm_automatic+0x596>
				lcd_clear_display();
 800152e:	f001 f900 	bl	8002732 <lcd_clear_display>
				status = MODE_2;
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <fsm_automatic+0x2f4>)
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001538:	f001 ff84 	bl	8003444 <clearAllLed>
				setTimer(0, 1000);
 800153c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001540:	2000      	movs	r0, #0
 8001542:	f001 ff3b 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001546:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <fsm_automatic+0x324>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
			}
			break;
 800154c:	e1ef      	b.n	800192e <fsm_automatic+0x596>
		case RED_AMBER:
			led_red_amber();
 800154e:	f001 ffb1 	bl	80034b4 <led_red_amber>
			if(timer_flag[0]){
 8001552:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <fsm_automatic+0x310>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04c      	beq.n	80015f4 <fsm_automatic+0x25c>
				--red;
 800155a:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <fsm_automatic+0x2fc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <fsm_automatic+0x2fc>)
 8001562:	6013      	str	r3, [r2, #0]
				--amber;
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <fsm_automatic+0x304>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	4a4c      	ldr	r2, [pc, #304]	; (800169c <fsm_automatic+0x304>)
 800156c:	6013      	str	r3, [r2, #0]
				char buffer[16];
				                //lcd_clear_display();
				                // Hiển thị TrafficX
				                lcd_goto_XY(0,1);
 800156e:	2101      	movs	r1, #1
 8001570:	2000      	movs	r0, #0
 8001572:	f001 f8e8 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <fsm_automatic+0x2fc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b09      	cmp	r3, #9
 800157c:	dc08      	bgt.n	8001590 <fsm_automatic+0x1f8>
				                    sprintf(buffer, "TrafficX: 0%d", red);
 800157e:	4b45      	ldr	r3, [pc, #276]	; (8001694 <fsm_automatic+0x2fc>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4949      	ldr	r1, [pc, #292]	; (80016ac <fsm_automatic+0x314>)
 8001588:	4618      	mov	r0, r3
 800158a:	f005 ffc9 	bl	8007520 <siprintf>
 800158e:	e007      	b.n	80015a0 <fsm_automatic+0x208>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", red);
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <fsm_automatic+0x2fc>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4945      	ldr	r1, [pc, #276]	; (80016b0 <fsm_automatic+0x318>)
 800159a:	4618      	mov	r0, r3
 800159c:	f005 ffc0 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f8af 	bl	8002708 <lcd_send_string>
				                // Hiển thị TrafficY
				                lcd_goto_XY(1, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 f8ca 	bl	8002746 <lcd_goto_XY>
				                if (amber < 10) {
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <fsm_automatic+0x304>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	dc08      	bgt.n	80015cc <fsm_automatic+0x234>
				                    sprintf(buffer, "TrafficY: 0%d", amber);
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <fsm_automatic+0x304>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	493c      	ldr	r1, [pc, #240]	; (80016b4 <fsm_automatic+0x31c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 ffab 	bl	8007520 <siprintf>
 80015ca:	e007      	b.n	80015dc <fsm_automatic+0x244>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", amber);
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <fsm_automatic+0x304>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4938      	ldr	r1, [pc, #224]	; (80016b8 <fsm_automatic+0x320>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 ffa2 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 f891 	bl	8002708 <lcd_send_string>
//				displayLED7SEG(red, 0);
//				displayLED7SEG(amber, 1);


				controlTime_led();
 80015e6:	f001 ffb9 	bl	800355c <controlTime_led>
				setTimer(0, 1000);
 80015ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ee:	2000      	movs	r0, #0
 80015f0:	f001 fee4 	bl	80033bc <setTimer>
			}
			if(timer_flag[1]){
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <fsm_automatic+0x310>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d011      	beq.n	8001620 <fsm_automatic+0x288>
				status = GREEN_RED;
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <fsm_automatic+0x2f4>)
 80015fe:	2207      	movs	r2, #7
 8001600:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001602:	f001 ff1f 	bl	8003444 <clearAllLed>
				controlTime_led();
 8001606:	f001 ffa9 	bl	800355c <controlTime_led>
				green_dummy = green*1000;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <fsm_automatic+0x30c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
				setTimer(1, green_dummy);
 8001618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800161a:	2001      	movs	r0, #1
 800161c:	f001 fece 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff fc8f 	bl	8000f44 <isButtonPressed>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <fsm_automatic+0x2c4>
				status = MAN_RED_AMBER;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <fsm_automatic+0x2f4>)
 800162e:	220a      	movs	r2, #10
 8001630:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8001632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001636:	2001      	movs	r0, #1
 8001638:	f001 fec0 	bl	80033bc <setTimer>
				clearAllLed();
 800163c:	f001 ff02 	bl	8003444 <clearAllLed>
				red = 10;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <fsm_automatic+0x2fc>)
 8001642:	220a      	movs	r2, #10
 8001644:	601a      	str	r2, [r3, #0]
				amber = 10;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <fsm_automatic+0x304>)
 8001648:	220a      	movs	r2, #10
 800164a:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <fsm_automatic+0x324>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
				setTimer(0, 1000);
 8001652:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001656:	2000      	movs	r0, #0
 8001658:	f001 feb0 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fc71 	bl	8000f44 <isButtonPressed>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8164 	beq.w	8001932 <fsm_automatic+0x59a>
				lcd_clear_display();
 800166a:	f001 f862 	bl	8002732 <lcd_clear_display>
				status = MODE_2;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <fsm_automatic+0x2f4>)
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001674:	f001 fee6 	bl	8003444 <clearAllLed>
				setTimer(0, 1000);
 8001678:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800167c:	2000      	movs	r0, #0
 800167e:	f001 fe9d 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <fsm_automatic+0x324>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
			}
			break;
 8001688:	e153      	b.n	8001932 <fsm_automatic+0x59a>
 800168a:	bf00      	nop
 800168c:	20000298 	.word	0x20000298
 8001690:	20000050 	.word	0x20000050
 8001694:	20000044 	.word	0x20000044
 8001698:	20000054 	.word	0x20000054
 800169c:	20000048 	.word	0x20000048
 80016a0:	20000058 	.word	0x20000058
 80016a4:	2000004c 	.word	0x2000004c
 80016a8:	200002ac 	.word	0x200002ac
 80016ac:	080098b0 	.word	0x080098b0
 80016b0:	080098c0 	.word	0x080098c0
 80016b4:	080098d0 	.word	0x080098d0
 80016b8:	080098e0 	.word	0x080098e0
 80016bc:	2000026c 	.word	0x2000026c
		case GREEN_RED:
			led_green_red();
 80016c0:	f001 ff14 	bl	80034ec <led_green_red>
			if(timer_flag[0]){
 80016c4:	4b9f      	ldr	r3, [pc, #636]	; (8001944 <fsm_automatic+0x5ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d04c      	beq.n	8001766 <fsm_automatic+0x3ce>
				--red;
 80016cc:	4b9e      	ldr	r3, [pc, #632]	; (8001948 <fsm_automatic+0x5b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <fsm_automatic+0x5b0>)
 80016d4:	6013      	str	r3, [r2, #0]
				--green;
 80016d6:	4b9d      	ldr	r3, [pc, #628]	; (800194c <fsm_automatic+0x5b4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4a9b      	ldr	r2, [pc, #620]	; (800194c <fsm_automatic+0x5b4>)
 80016de:	6013      	str	r3, [r2, #0]
				char buffer[16];
				                //lcd_clear_display();

				                // Hiển thị TrafficX
				                lcd_goto_XY(0, 1);
 80016e0:	2101      	movs	r1, #1
 80016e2:	2000      	movs	r0, #0
 80016e4:	f001 f82f 	bl	8002746 <lcd_goto_XY>
				                if (green < 10) {
 80016e8:	4b98      	ldr	r3, [pc, #608]	; (800194c <fsm_automatic+0x5b4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	dc08      	bgt.n	8001702 <fsm_automatic+0x36a>
				                    sprintf(buffer, "TrafficX: 0%d", green);
 80016f0:	4b96      	ldr	r3, [pc, #600]	; (800194c <fsm_automatic+0x5b4>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4995      	ldr	r1, [pc, #596]	; (8001950 <fsm_automatic+0x5b8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 ff10 	bl	8007520 <siprintf>
 8001700:	e007      	b.n	8001712 <fsm_automatic+0x37a>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", green);
 8001702:	4b92      	ldr	r3, [pc, #584]	; (800194c <fsm_automatic+0x5b4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4992      	ldr	r1, [pc, #584]	; (8001954 <fsm_automatic+0x5bc>)
 800170c:	4618      	mov	r0, r3
 800170e:	f005 ff07 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fff6 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY
				                lcd_goto_XY(1, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	2001      	movs	r0, #1
 8001720:	f001 f811 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001724:	4b88      	ldr	r3, [pc, #544]	; (8001948 <fsm_automatic+0x5b0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	dc08      	bgt.n	800173e <fsm_automatic+0x3a6>
				                    sprintf(buffer, "TrafficY: 0%d", red);
 800172c:	4b86      	ldr	r3, [pc, #536]	; (8001948 <fsm_automatic+0x5b0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4988      	ldr	r1, [pc, #544]	; (8001958 <fsm_automatic+0x5c0>)
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fef2 	bl	8007520 <siprintf>
 800173c:	e007      	b.n	800174e <fsm_automatic+0x3b6>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", red);
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <fsm_automatic+0x5b0>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4985      	ldr	r1, [pc, #532]	; (800195c <fsm_automatic+0x5c4>)
 8001748:	4618      	mov	r0, r3
 800174a:	f005 fee9 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4618      	mov	r0, r3
 8001754:	f000 ffd8 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(green, 0);
				//displayLED7SEG(red, 1);
				controlTime_led();
 8001758:	f001 ff00 	bl	800355c <controlTime_led>
				setTimer(0, 1000);
 800175c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001760:	2000      	movs	r0, #0
 8001762:	f001 fe2b 	bl	80033bc <setTimer>
			}
			if(timer_flag[1]){
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <fsm_automatic+0x5ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d011      	beq.n	8001792 <fsm_automatic+0x3fa>
				status = AMBER_RED;
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <fsm_automatic+0x5c8>)
 8001770:	2208      	movs	r2, #8
 8001772:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001774:	f001 fe66 	bl	8003444 <clearAllLed>
				controlTime_led();
 8001778:	f001 fef0 	bl	800355c <controlTime_led>
				amber_dummy = amber*1000;
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <fsm_automatic+0x5cc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
				setTimer(1, amber_dummy);
 800178a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800178c:	2001      	movs	r0, #1
 800178e:	f001 fe15 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff fbd6 	bl	8000f44 <isButtonPressed>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d017      	beq.n	80017ce <fsm_automatic+0x436>
				status = MAN_GREEN_RED;
 800179e:	4b70      	ldr	r3, [pc, #448]	; (8001960 <fsm_automatic+0x5c8>)
 80017a0:	220b      	movs	r2, #11
 80017a2:	601a      	str	r2, [r3, #0]
				red = 10;
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <fsm_automatic+0x5b0>)
 80017a6:	220a      	movs	r2, #10
 80017a8:	601a      	str	r2, [r3, #0]
				green = 10;
 80017aa:	4b68      	ldr	r3, [pc, #416]	; (800194c <fsm_automatic+0x5b4>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80017b0:	f001 fe48 	bl	8003444 <clearAllLed>
				setTimer(1, 1000);
 80017b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b8:	2001      	movs	r0, #1
 80017ba:	f001 fdff 	bl	80033bc <setTimer>
				button_flag[1] = 0;
 80017be:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <fsm_automatic+0x5d0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
				setTimer(0, 1000);
 80017c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c8:	2000      	movs	r0, #0
 80017ca:	f001 fdf7 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fbb8 	bl	8000f44 <isButtonPressed>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80ad 	beq.w	8001936 <fsm_automatic+0x59e>
				lcd_clear_display();
 80017dc:	f000 ffa9 	bl	8002732 <lcd_clear_display>
				status = MODE_2;
 80017e0:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <fsm_automatic+0x5c8>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80017e6:	f001 fe2d 	bl	8003444 <clearAllLed>
				setTimer(0, 1000);
 80017ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017ee:	2000      	movs	r0, #0
 80017f0:	f001 fde4 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 80017f4:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <fsm_automatic+0x5d0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80017fa:	e09c      	b.n	8001936 <fsm_automatic+0x59e>
		case AMBER_RED:
			led_amber_red();
 80017fc:	f001 fe92 	bl	8003524 <led_amber_red>
			if(timer_flag[0]){
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <fsm_automatic+0x5ac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d046      	beq.n	8001896 <fsm_automatic+0x4fe>
				--red;
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <fsm_automatic+0x5b0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <fsm_automatic+0x5b0>)
 8001810:	6013      	str	r3, [r2, #0]
				--amber;
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <fsm_automatic+0x5cc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <fsm_automatic+0x5cc>)
 800181a:	6013      	str	r3, [r2, #0]
				char buffer[16];
				                //lcd_clear_display();

				                // Hiển thị TrafficX
				                lcd_goto_XY(0, 1);
 800181c:	2101      	movs	r1, #1
 800181e:	2000      	movs	r0, #0
 8001820:	f000 ff91 	bl	8002746 <lcd_goto_XY>
				                if (amber < 10) {
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <fsm_automatic+0x5cc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b09      	cmp	r3, #9
 800182a:	dc07      	bgt.n	800183c <fsm_automatic+0x4a4>
				                    sprintf(buffer, "TrafficX: 0%d", amber);
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <fsm_automatic+0x5cc>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	463b      	mov	r3, r7
 8001832:	4947      	ldr	r1, [pc, #284]	; (8001950 <fsm_automatic+0x5b8>)
 8001834:	4618      	mov	r0, r3
 8001836:	f005 fe73 	bl	8007520 <siprintf>
 800183a:	e006      	b.n	800184a <fsm_automatic+0x4b2>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", amber);
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <fsm_automatic+0x5cc>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	463b      	mov	r3, r7
 8001842:	4944      	ldr	r1, [pc, #272]	; (8001954 <fsm_automatic+0x5bc>)
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fe6b 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 800184a:	463b      	mov	r3, r7
 800184c:	4618      	mov	r0, r3
 800184e:	f000 ff5b 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY
				                lcd_goto_XY(1, 0);
 8001852:	2100      	movs	r1, #0
 8001854:	2001      	movs	r0, #1
 8001856:	f000 ff76 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <fsm_automatic+0x5b0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b09      	cmp	r3, #9
 8001860:	dc07      	bgt.n	8001872 <fsm_automatic+0x4da>
				                    sprintf(buffer, "TrafficY: 0%d", red);
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <fsm_automatic+0x5b0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	463b      	mov	r3, r7
 8001868:	493b      	ldr	r1, [pc, #236]	; (8001958 <fsm_automatic+0x5c0>)
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fe58 	bl	8007520 <siprintf>
 8001870:	e006      	b.n	8001880 <fsm_automatic+0x4e8>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", red);
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <fsm_automatic+0x5b0>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	463b      	mov	r3, r7
 8001878:	4938      	ldr	r1, [pc, #224]	; (800195c <fsm_automatic+0x5c4>)
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fe50 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f000 ff40 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(amber, 0);
				//displayLED7SEG(red, 1);
				controlTime_led();
 8001888:	f001 fe68 	bl	800355c <controlTime_led>
				setTimer(0, 1000);
 800188c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001890:	2000      	movs	r0, #0
 8001892:	f001 fd93 	bl	80033bc <setTimer>
			}
			if(timer_flag[1]){
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <fsm_automatic+0x5ac>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d011      	beq.n	80018c2 <fsm_automatic+0x52a>
				status = RED_GREEN;
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <fsm_automatic+0x5c8>)
 80018a0:	2205      	movs	r2, #5
 80018a2:	601a      	str	r2, [r3, #0]
				controlTime_led();
 80018a4:	f001 fe5a 	bl	800355c <controlTime_led>
				clearAllLed();
 80018a8:	f001 fdcc 	bl	8003444 <clearAllLed>
				green_dummy = green*1000;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <fsm_automatic+0x5b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
				setTimer(1, green_dummy);
 80018ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018bc:	2001      	movs	r0, #1
 80018be:	f001 fd7d 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff fb3e 	bl	8000f44 <isButtonPressed>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d017      	beq.n	80018fe <fsm_automatic+0x566>
				status = MAN_AMBER_RED;
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <fsm_automatic+0x5c8>)
 80018d0:	220c      	movs	r2, #12
 80018d2:	601a      	str	r2, [r3, #0]
				red = 10;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <fsm_automatic+0x5b0>)
 80018d6:	220a      	movs	r2, #10
 80018d8:	601a      	str	r2, [r3, #0]
				amber = 10;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <fsm_automatic+0x5cc>)
 80018dc:	220a      	movs	r2, #10
 80018de:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80018e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018e4:	2001      	movs	r0, #1
 80018e6:	f001 fd69 	bl	80033bc <setTimer>
				clearAllLed();
 80018ea:	f001 fdab 	bl	8003444 <clearAllLed>
				button_flag[1] = 0;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <fsm_automatic+0x5d0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
				setTimer(0, 1000);
 80018f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f8:	2000      	movs	r0, #0
 80018fa:	f001 fd5f 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fb20 	bl	8000f44 <isButtonPressed>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d017      	beq.n	800193a <fsm_automatic+0x5a2>
				lcd_clear_display();
 800190a:	f000 ff12 	bl	8002732 <lcd_clear_display>
				status = MODE_2;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <fsm_automatic+0x5c8>)
 8001910:	2202      	movs	r2, #2
 8001912:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001914:	f001 fd96 	bl	8003444 <clearAllLed>
				setTimer(0, 1000);
 8001918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800191c:	2000      	movs	r0, #0
 800191e:	f001 fd4d 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <fsm_automatic+0x5d0>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
			}
			break;
 8001928:	e007      	b.n	800193a <fsm_automatic+0x5a2>
		default: break;
 800192a:	bf00      	nop
 800192c:	e006      	b.n	800193c <fsm_automatic+0x5a4>
			break;
 800192e:	bf00      	nop
 8001930:	e004      	b.n	800193c <fsm_automatic+0x5a4>
			break;
 8001932:	bf00      	nop
 8001934:	e002      	b.n	800193c <fsm_automatic+0x5a4>
			break;
 8001936:	bf00      	nop
 8001938:	e000      	b.n	800193c <fsm_automatic+0x5a4>
			break;
 800193a:	bf00      	nop
	}
}
 800193c:	bf00      	nop
 800193e:	3748      	adds	r7, #72	; 0x48
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200002ac 	.word	0x200002ac
 8001948:	20000044 	.word	0x20000044
 800194c:	2000004c 	.word	0x2000004c
 8001950:	080098b0 	.word	0x080098b0
 8001954:	080098c0 	.word	0x080098c0
 8001958:	080098d0 	.word	0x080098d0
 800195c:	080098e0 	.word	0x080098e0
 8001960:	20000298 	.word	0x20000298
 8001964:	20000048 	.word	0x20000048
 8001968:	2000026c 	.word	0x2000026c

0800196c <fsm_manual>:
 *      Author: pc
 */
#include "fsm_manual.h"
#include "fsm_automatic.h"
#include "i2c_lcd.h"
void fsm_manual(){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
	char buffer[16]; // Buffer để hiển thị dữ liệu lên LCD
	switch(status){
 8001972:	4baf      	ldr	r3, [pc, #700]	; (8001c30 <fsm_manual+0x2c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3b09      	subs	r3, #9
 8001978:	2b03      	cmp	r3, #3
 800197a:	f200 8282 	bhi.w	8001e82 <fsm_manual+0x516>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <fsm_manual+0x18>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	08001ac3 	.word	0x08001ac3
 800198c:	08001bf1 	.word	0x08001bf1
 8001990:	08001d53 	.word	0x08001d53
		case MAN_RED_GREEN:
			led_red_green();
 8001994:	f001 fd72 	bl	800347c <led_red_green>
			if(timer_flag[1]){
 8001998:	4ba6      	ldr	r3, [pc, #664]	; (8001c34 <fsm_manual+0x2c8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01a      	beq.n	80019d6 <fsm_manual+0x6a>
				status = RED_GREEN;
 80019a0:	4ba3      	ldr	r3, [pc, #652]	; (8001c30 <fsm_manual+0x2c4>)
 80019a2:	2205      	movs	r2, #5
 80019a4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80019a6:	f001 fd4d 	bl	8003444 <clearAllLed>
				red = temp_red;
 80019aa:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <fsm_manual+0x2cc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4aa3      	ldr	r2, [pc, #652]	; (8001c3c <fsm_manual+0x2d0>)
 80019b0:	6013      	str	r3, [r2, #0]
				green = temp_green;
 80019b2:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <fsm_manual+0x2d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4aa3      	ldr	r2, [pc, #652]	; (8001c44 <fsm_manual+0x2d8>)
 80019b8:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 80019ba:	4ba3      	ldr	r3, [pc, #652]	; (8001c48 <fsm_manual+0x2dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4aa3      	ldr	r2, [pc, #652]	; (8001c4c <fsm_manual+0x2e0>)
 80019c0:	6013      	str	r3, [r2, #0]
				setTimer(1, green*1000);
 80019c2:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <fsm_manual+0x2d8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	2001      	movs	r0, #1
 80019d2:	f001 fcf3 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fab4 	bl	8000f44 <isButtonPressed>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d012      	beq.n	8001a08 <fsm_manual+0x9c>
				status = MAN_RED_AMBER;
 80019e2:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <fsm_manual+0x2c4>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	601a      	str	r2, [r3, #0]
				red = 10;
 80019e8:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <fsm_manual+0x2d0>)
 80019ea:	220a      	movs	r2, #10
 80019ec:	601a      	str	r2, [r3, #0]
				amber = 10;
 80019ee:	4b97      	ldr	r3, [pc, #604]	; (8001c4c <fsm_manual+0x2e0>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80019f4:	f001 fd26 	bl	8003444 <clearAllLed>
				setTimer(1, 1000);
 80019f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019fc:	2001      	movs	r0, #1
 80019fe:	f001 fcdd 	bl	80033bc <setTimer>
				button_flag[1] = 0;
 8001a02:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <fsm_manual+0x2e4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fa9b 	bl	8000f44 <isButtonPressed>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <fsm_manual+0xc0>
				status = MODE_2;
 8001a14:	4b86      	ldr	r3, [pc, #536]	; (8001c30 <fsm_manual+0x2c4>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001a1a:	f001 fd13 	bl	8003444 <clearAllLed>
				setTimer(0, 1);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2000      	movs	r0, #0
 8001a22:	f001 fccb 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001a26:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <fsm_manual+0x2e4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[0]){
 8001a2c:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <fsm_manual+0x2c8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8228 	beq.w	8001e86 <fsm_manual+0x51a>
				--red;
 8001a36:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <fsm_manual+0x2d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	; (8001c3c <fsm_manual+0x2d0>)
 8001a3e:	6013      	str	r3, [r2, #0]
				--green;
 8001a40:	4b80      	ldr	r3, [pc, #512]	; (8001c44 <fsm_manual+0x2d8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a7f      	ldr	r2, [pc, #508]	; (8001c44 <fsm_manual+0x2d8>)
 8001a48:	6013      	str	r3, [r2, #0]

				 lcd_goto_XY(0, 1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fe7a 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <fsm_manual+0x2d0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	dc07      	bgt.n	8001a6a <fsm_manual+0xfe>
				                    sprintf(buffer, "TrafficX: 0%d", red);
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <fsm_manual+0x2d0>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	463b      	mov	r3, r7
 8001a60:	497c      	ldr	r1, [pc, #496]	; (8001c54 <fsm_manual+0x2e8>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fd5c 	bl	8007520 <siprintf>
 8001a68:	e006      	b.n	8001a78 <fsm_manual+0x10c>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", red);
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <fsm_manual+0x2d0>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4979      	ldr	r1, [pc, #484]	; (8001c58 <fsm_manual+0x2ec>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fd54 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fe44 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY (GREEN)
				                lcd_goto_XY(1, 0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fe5f 	bl	8002746 <lcd_goto_XY>
				                if (green < 10) {
 8001a88:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <fsm_manual+0x2d8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	dc07      	bgt.n	8001aa0 <fsm_manual+0x134>
				                    sprintf(buffer, "TrafficY: 0%d", green);
 8001a90:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <fsm_manual+0x2d8>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	463b      	mov	r3, r7
 8001a96:	4971      	ldr	r1, [pc, #452]	; (8001c5c <fsm_manual+0x2f0>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fd41 	bl	8007520 <siprintf>
 8001a9e:	e006      	b.n	8001aae <fsm_manual+0x142>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", green);
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <fsm_manual+0x2d8>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	496e      	ldr	r1, [pc, #440]	; (8001c60 <fsm_manual+0x2f4>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 fd39 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fe29 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(red, 0);
				//displayLED7SEG(green, 1);
				setTimer(0, 1000);
 8001ab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aba:	2000      	movs	r0, #0
 8001abc:	f001 fc7e 	bl	80033bc <setTimer>
			}
			break;
 8001ac0:	e1e1      	b.n	8001e86 <fsm_manual+0x51a>
		case MAN_RED_AMBER:
			led_red_amber();
 8001ac2:	f001 fcf7 	bl	80034b4 <led_red_amber>
			if(timer_flag[1]){
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <fsm_manual+0x2c8>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01a      	beq.n	8001b04 <fsm_manual+0x198>
				status = RED_GREEN;
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <fsm_manual+0x2c4>)
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001ad4:	f001 fcb6 	bl	8003444 <clearAllLed>
				red = temp_red;
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <fsm_manual+0x2cc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a57      	ldr	r2, [pc, #348]	; (8001c3c <fsm_manual+0x2d0>)
 8001ade:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <fsm_manual+0x2d4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <fsm_manual+0x2d8>)
 8001ae6:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8001ae8:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <fsm_manual+0x2dc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <fsm_manual+0x2e0>)
 8001aee:	6013      	str	r3, [r2, #0]
				setTimer(1, green*1000);
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <fsm_manual+0x2d8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	2001      	movs	r0, #1
 8001b00:	f001 fc5c 	bl	80033bc <setTimer>
			}
			if(timer_flag[0]){
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <fsm_manual+0x2c8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d044      	beq.n	8001b96 <fsm_manual+0x22a>
				--red;
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <fsm_manual+0x2d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <fsm_manual+0x2d0>)
 8001b14:	6013      	str	r3, [r2, #0]
				--amber;
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <fsm_manual+0x2e0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <fsm_manual+0x2e0>)
 8001b1e:	6013      	str	r3, [r2, #0]
				lcd_goto_XY(0, 1);
 8001b20:	2101      	movs	r1, #1
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 fe0f 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <fsm_manual+0x2d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	dc07      	bgt.n	8001b40 <fsm_manual+0x1d4>
				                    sprintf(buffer, "TrafficX: 0%d", red);
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <fsm_manual+0x2d0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	463b      	mov	r3, r7
 8001b36:	4947      	ldr	r1, [pc, #284]	; (8001c54 <fsm_manual+0x2e8>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 fcf1 	bl	8007520 <siprintf>
 8001b3e:	e006      	b.n	8001b4e <fsm_manual+0x1e2>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", red);
 8001b40:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <fsm_manual+0x2d0>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	463b      	mov	r3, r7
 8001b46:	4944      	ldr	r1, [pc, #272]	; (8001c58 <fsm_manual+0x2ec>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f005 fce9 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fdd9 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY (AMBER)
				                lcd_goto_XY(1, 0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fdf4 	bl	8002746 <lcd_goto_XY>
				                if (amber < 10) {
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <fsm_manual+0x2e0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	dc07      	bgt.n	8001b76 <fsm_manual+0x20a>
				                    sprintf(buffer, "TrafficY: 0%d", amber);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <fsm_manual+0x2e0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	493b      	ldr	r1, [pc, #236]	; (8001c5c <fsm_manual+0x2f0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fcd6 	bl	8007520 <siprintf>
 8001b74:	e006      	b.n	8001b84 <fsm_manual+0x218>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", amber);
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <fsm_manual+0x2e0>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4938      	ldr	r1, [pc, #224]	; (8001c60 <fsm_manual+0x2f4>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fcce 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001b84:	463b      	mov	r3, r7
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fdbe 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(red, 0);
				//displayLED7SEG(amber, 1);


				setTimer(0, 1000);
 8001b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b90:	2000      	movs	r0, #0
 8001b92:	f001 fc13 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff f9d4 	bl	8000f44 <isButtonPressed>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <fsm_manual+0x25c>
				status = MAN_GREEN_RED;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <fsm_manual+0x2c4>)
 8001ba4:	220b      	movs	r2, #11
 8001ba6:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8001ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bac:	2001      	movs	r0, #1
 8001bae:	f001 fc05 	bl	80033bc <setTimer>
				clearAllLed();
 8001bb2:	f001 fc47 	bl	8003444 <clearAllLed>
				red = 10;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <fsm_manual+0x2d0>)
 8001bb8:	220a      	movs	r2, #10
 8001bba:	601a      	str	r2, [r3, #0]
				green = 10;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <fsm_manual+0x2d8>)
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <fsm_manual+0x2e4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff f9bb 	bl	8000f44 <isButtonPressed>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 815a 	beq.w	8001e8a <fsm_manual+0x51e>
				status = MODE_2;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <fsm_manual+0x2c4>)
 8001bd8:	2202      	movs	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001bdc:	f001 fc32 	bl	8003444 <clearAllLed>
				setTimer(0, 1);
 8001be0:	2101      	movs	r1, #1
 8001be2:	2000      	movs	r0, #0
 8001be4:	f001 fbea 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <fsm_manual+0x2e4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
			}
			break;
 8001bee:	e14c      	b.n	8001e8a <fsm_manual+0x51e>
		case MAN_GREEN_RED:
			led_green_red();
 8001bf0:	f001 fc7c 	bl	80034ec <led_green_red>
			if(timer_flag[0]){
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <fsm_manual+0x2c8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d05e      	beq.n	8001cba <fsm_manual+0x34e>
				--red;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <fsm_manual+0x2d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <fsm_manual+0x2d0>)
 8001c04:	6013      	str	r3, [r2, #0]
				--green;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <fsm_manual+0x2d8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <fsm_manual+0x2d8>)
 8001c0e:	6013      	str	r3, [r2, #0]
				 lcd_goto_XY(0, 1);
 8001c10:	2101      	movs	r1, #1
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 fd97 	bl	8002746 <lcd_goto_XY>
				                if (green < 10) {
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <fsm_manual+0x2d8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	dc21      	bgt.n	8001c64 <fsm_manual+0x2f8>
				                    sprintf(buffer, "TrafficX: %d", green);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <fsm_manual+0x2d8>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	463b      	mov	r3, r7
 8001c26:	490c      	ldr	r1, [pc, #48]	; (8001c58 <fsm_manual+0x2ec>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 fc79 	bl	8007520 <siprintf>
 8001c2e:	e020      	b.n	8001c72 <fsm_manual+0x306>
 8001c30:	20000298 	.word	0x20000298
 8001c34:	200002ac 	.word	0x200002ac
 8001c38:	20000050 	.word	0x20000050
 8001c3c:	20000044 	.word	0x20000044
 8001c40:	20000058 	.word	0x20000058
 8001c44:	2000004c 	.word	0x2000004c
 8001c48:	20000054 	.word	0x20000054
 8001c4c:	20000048 	.word	0x20000048
 8001c50:	2000026c 	.word	0x2000026c
 8001c54:	080098f0 	.word	0x080098f0
 8001c58:	08009900 	.word	0x08009900
 8001c5c:	08009910 	.word	0x08009910
 8001c60:	08009920 	.word	0x08009920
				                } else {
				                    sprintf(buffer, "TrafficX: %d", green);
 8001c64:	4b8d      	ldr	r3, [pc, #564]	; (8001e9c <fsm_manual+0x530>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	463b      	mov	r3, r7
 8001c6a:	498d      	ldr	r1, [pc, #564]	; (8001ea0 <fsm_manual+0x534>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 fc57 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001c72:	463b      	mov	r3, r7
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fd47 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY (RED)
				                lcd_goto_XY(1, 0);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f000 fd62 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <fsm_manual+0x538>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	dc07      	bgt.n	8001c9a <fsm_manual+0x32e>
				                    sprintf(buffer, "TrafficY: %d", red);
 8001c8a:	4b86      	ldr	r3, [pc, #536]	; (8001ea4 <fsm_manual+0x538>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4985      	ldr	r1, [pc, #532]	; (8001ea8 <fsm_manual+0x53c>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fc44 	bl	8007520 <siprintf>
 8001c98:	e006      	b.n	8001ca8 <fsm_manual+0x33c>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", red);
 8001c9a:	4b82      	ldr	r3, [pc, #520]	; (8001ea4 <fsm_manual+0x538>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4981      	ldr	r1, [pc, #516]	; (8001ea8 <fsm_manual+0x53c>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 fc3c 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd2c 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(green, 0);
				//displayLED7SEG(red, 1);
				setTimer(0, 1000);
 8001cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f001 fb81 	bl	80033bc <setTimer>
			}
			if(timer_flag[1]){
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <fsm_manual+0x540>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01a      	beq.n	8001cf8 <fsm_manual+0x38c>
				status = RED_GREEN;
 8001cc2:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <fsm_manual+0x544>)
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001cc8:	f001 fbbc 	bl	8003444 <clearAllLed>
				red = temp_red;
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <fsm_manual+0x548>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <fsm_manual+0x538>)
 8001cd2:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8001cd4:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <fsm_manual+0x54c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a70      	ldr	r2, [pc, #448]	; (8001e9c <fsm_manual+0x530>)
 8001cda:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8001cdc:	4b77      	ldr	r3, [pc, #476]	; (8001ebc <fsm_manual+0x550>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a77      	ldr	r2, [pc, #476]	; (8001ec0 <fsm_manual+0x554>)
 8001ce2:	6013      	str	r3, [r2, #0]
				setTimer(1, green*1000);
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <fsm_manual+0x530>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f001 fb62 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff f923 	bl	8000f44 <isButtonPressed>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d012      	beq.n	8001d2a <fsm_manual+0x3be>
				status = MAN_AMBER_RED;
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <fsm_manual+0x544>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
				red = 10;
 8001d0a:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <fsm_manual+0x538>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	601a      	str	r2, [r3, #0]
				amber = 10;
 8001d10:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <fsm_manual+0x554>)
 8001d12:	220a      	movs	r2, #10
 8001d14:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8001d16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f001 fb4e 	bl	80033bc <setTimer>
				clearAllLed();
 8001d20:	f001 fb90 	bl	8003444 <clearAllLed>
				button_flag[1] = 0;
 8001d24:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <fsm_manual+0x558>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f90a 	bl	8000f44 <isButtonPressed>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80ab 	beq.w	8001e8e <fsm_manual+0x522>
				status = MODE_2;
 8001d38:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <fsm_manual+0x544>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001d3e:	f001 fb81 	bl	8003444 <clearAllLed>
				setTimer(0, 1);
 8001d42:	2101      	movs	r1, #1
 8001d44:	2000      	movs	r0, #0
 8001d46:	f001 fb39 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <fsm_manual+0x558>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001d50:	e09d      	b.n	8001e8e <fsm_manual+0x522>
		case MAN_AMBER_RED:
			led_amber_red();
 8001d52:	f001 fbe7 	bl	8003524 <led_amber_red>
			if(timer_flag[1]){
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <fsm_manual+0x540>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01a      	beq.n	8001d94 <fsm_manual+0x428>
				status = RED_GREEN;
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <fsm_manual+0x544>)
 8001d60:	2205      	movs	r2, #5
 8001d62:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001d64:	f001 fb6e 	bl	8003444 <clearAllLed>
				red = temp_red;
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <fsm_manual+0x548>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <fsm_manual+0x538>)
 8001d6e:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8001d70:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <fsm_manual+0x54c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a49      	ldr	r2, [pc, #292]	; (8001e9c <fsm_manual+0x530>)
 8001d76:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <fsm_manual+0x550>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <fsm_manual+0x554>)
 8001d7e:	6013      	str	r3, [r2, #0]
				setTimer(1, green*1000);
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <fsm_manual+0x530>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f001 fb14 	bl	80033bc <setTimer>
			}
			if(timer_flag[0]){
 8001d94:	4b45      	ldr	r3, [pc, #276]	; (8001eac <fsm_manual+0x540>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d046      	beq.n	8001e2a <fsm_manual+0x4be>
				--red;
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <fsm_manual+0x538>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <fsm_manual+0x538>)
 8001da4:	6013      	str	r3, [r2, #0]
				--amber;
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <fsm_manual+0x554>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4a44      	ldr	r2, [pc, #272]	; (8001ec0 <fsm_manual+0x554>)
 8001dae:	6013      	str	r3, [r2, #0]
				 lcd_goto_XY(0, 1);
 8001db0:	2101      	movs	r1, #1
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 fcc7 	bl	8002746 <lcd_goto_XY>
				                if (amber < 10) {
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <fsm_manual+0x554>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	dc07      	bgt.n	8001dd0 <fsm_manual+0x464>
				                    sprintf(buffer, "TrafficX: %d", amber);
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <fsm_manual+0x554>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4936      	ldr	r1, [pc, #216]	; (8001ea0 <fsm_manual+0x534>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fba9 	bl	8007520 <siprintf>
 8001dce:	e006      	b.n	8001dde <fsm_manual+0x472>
				                } else {
				                    sprintf(buffer, "TrafficX: %d", amber);
 8001dd0:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <fsm_manual+0x554>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4932      	ldr	r1, [pc, #200]	; (8001ea0 <fsm_manual+0x534>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f005 fba1 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001dde:	463b      	mov	r3, r7
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fc91 	bl	8002708 <lcd_send_string>

				                // Hiển thị TrafficY (RED)
				                lcd_goto_XY(1, 0);
 8001de6:	2100      	movs	r1, #0
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 fcac 	bl	8002746 <lcd_goto_XY>
				                if (red < 10) {
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <fsm_manual+0x538>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	dc07      	bgt.n	8001e06 <fsm_manual+0x49a>
				                    sprintf(buffer, "TrafficY: %d", red);
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <fsm_manual+0x538>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	492a      	ldr	r1, [pc, #168]	; (8001ea8 <fsm_manual+0x53c>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fb8e 	bl	8007520 <siprintf>
 8001e04:	e006      	b.n	8001e14 <fsm_manual+0x4a8>
				                } else {
				                    sprintf(buffer, "TrafficY: %d", red);
 8001e06:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <fsm_manual+0x538>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4926      	ldr	r1, [pc, #152]	; (8001ea8 <fsm_manual+0x53c>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 fb86 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8001e14:	463b      	mov	r3, r7
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fc76 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(amber, 0);
				//displayLED7SEG(red, 1);
				controlTime_led();
 8001e1c:	f001 fb9e 	bl	800355c <controlTime_led>
				setTimer(0, 1000);
 8001e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e24:	2000      	movs	r0, #0
 8001e26:	f001 fac9 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(1)){
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff f88a 	bl	8000f44 <isButtonPressed>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <fsm_manual+0x4f0>
				status = MAN_RED_GREEN;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <fsm_manual+0x544>)
 8001e38:	2209      	movs	r2, #9
 8001e3a:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8001e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e40:	2001      	movs	r0, #1
 8001e42:	f001 fabb 	bl	80033bc <setTimer>
				clearAllLed();
 8001e46:	f001 fafd 	bl	8003444 <clearAllLed>
				red = 10;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <fsm_manual+0x538>)
 8001e4c:	220a      	movs	r2, #10
 8001e4e:	601a      	str	r2, [r3, #0]
				green = 10;
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <fsm_manual+0x530>)
 8001e52:	220a      	movs	r2, #10
 8001e54:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <fsm_manual+0x558>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff f871 	bl	8000f44 <isButtonPressed>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d014      	beq.n	8001e92 <fsm_manual+0x526>
				status = MODE_2;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <fsm_manual+0x544>)
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001e6e:	f001 fae9 	bl	8003444 <clearAllLed>
				setTimer(0, 1);
 8001e72:	2101      	movs	r1, #1
 8001e74:	2000      	movs	r0, #0
 8001e76:	f001 faa1 	bl	80033bc <setTimer>
				button_flag[0] = 0;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <fsm_manual+0x558>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001e80:	e007      	b.n	8001e92 <fsm_manual+0x526>
		default: break;
 8001e82:	bf00      	nop
 8001e84:	e006      	b.n	8001e94 <fsm_manual+0x528>
			break;
 8001e86:	bf00      	nop
 8001e88:	e004      	b.n	8001e94 <fsm_manual+0x528>
			break;
 8001e8a:	bf00      	nop
 8001e8c:	e002      	b.n	8001e94 <fsm_manual+0x528>
			break;
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <fsm_manual+0x528>
			break;
 8001e92:	bf00      	nop
	}
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000004c 	.word	0x2000004c
 8001ea0:	08009900 	.word	0x08009900
 8001ea4:	20000044 	.word	0x20000044
 8001ea8:	08009920 	.word	0x08009920
 8001eac:	200002ac 	.word	0x200002ac
 8001eb0:	20000298 	.word	0x20000298
 8001eb4:	20000050 	.word	0x20000050
 8001eb8:	20000058 	.word	0x20000058
 8001ebc:	20000054 	.word	0x20000054
 8001ec0:	20000048 	.word	0x20000048
 8001ec4:	2000026c 	.word	0x2000026c

08001ec8 <fsm_setting>:
 */

#include "fsm_setting.h"
#include "fsm_automatic.h"
#include "i2c_lcd.h"
void fsm_setting(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
	char buffer[16];
	switch(status){
 8001ece:	4b92      	ldr	r3, [pc, #584]	; (8002118 <fsm_setting+0x250>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	2b0e      	cmp	r3, #14
 8001ed6:	f200 832d 	bhi.w	8002534 <fsm_setting+0x66c>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <fsm_setting+0x18>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f1d 	.word	0x08001f1d
 8001ee4:	08001f25 	.word	0x08001f25
 8001ee8:	080020d9 	.word	0x080020d9
 8001eec:	080022ad 	.word	0x080022ad
 8001ef0:	08002535 	.word	0x08002535
 8001ef4:	08002535 	.word	0x08002535
 8001ef8:	08002535 	.word	0x08002535
 8001efc:	08002535 	.word	0x08002535
 8001f00:	08002535 	.word	0x08002535
 8001f04:	08002535 	.word	0x08002535
 8001f08:	08002535 	.word	0x08002535
 8001f0c:	08002535 	.word	0x08002535
 8001f10:	08002535 	.word	0x08002535
 8001f14:	08002535 	.word	0x08002535
 8001f18:	08002477 	.word	0x08002477
		case MODE_1:
			status = INIT;
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <fsm_setting+0x250>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
			break;
 8001f22:	e310      	b.n	8002546 <fsm_setting+0x67e>
		case MODE_2:
			//displayLED7SEG(status, 1);
			//displayLED7SEG(adj_red, 0);
			// Hiển thị "Mode_2"
			//lcd_clear_display();
			            lcd_goto_XY(0, 1);
 8001f24:	2101      	movs	r1, #1
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 fc0d 	bl	8002746 <lcd_goto_XY>
			            sprintf(buffer, "Mode: %d", status);
 8001f2c:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <fsm_setting+0x250>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	463b      	mov	r3, r7
 8001f32:	497a      	ldr	r1, [pc, #488]	; (800211c <fsm_setting+0x254>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 faf3 	bl	8007520 <siprintf>
			            lcd_send_string(buffer);
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fbe3 	bl	8002708 <lcd_send_string>

			            // Hiển thị "Red"
			            lcd_goto_XY(1, 0);
 8001f42:	2100      	movs	r1, #0
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 fbfe 	bl	8002746 <lcd_goto_XY>
			            if (adj_red < 10) {
 8001f4a:	4b75      	ldr	r3, [pc, #468]	; (8002120 <fsm_setting+0x258>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b09      	cmp	r3, #9
 8001f50:	dc07      	bgt.n	8001f62 <fsm_setting+0x9a>
			                sprintf(buffer, "Red: 0%d", adj_red);
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <fsm_setting+0x258>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	463b      	mov	r3, r7
 8001f58:	4972      	ldr	r1, [pc, #456]	; (8002124 <fsm_setting+0x25c>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 fae0 	bl	8007520 <siprintf>
 8001f60:	e006      	b.n	8001f70 <fsm_setting+0xa8>
			            } else {
			                sprintf(buffer, "Red: %d", adj_red);
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <fsm_setting+0x258>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	463b      	mov	r3, r7
 8001f68:	496f      	ldr	r1, [pc, #444]	; (8002128 <fsm_setting+0x260>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fad8 	bl	8007520 <siprintf>
			            }
			            lcd_send_string(buffer);
 8001f70:	463b      	mov	r3, r7
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fbc8 	bl	8002708 <lcd_send_string>

			if(timer_flag[0]){
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <fsm_setting+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <fsm_setting+0xcc>
				blinkingLed(status);
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <fsm_setting+0x250>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fb13 	bl	80035b0 <blinkingLed>
				setTimer(0, 500);
 8001f8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f001 fa14 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7fe ffd5 	bl	8000f44 <isButtonPressed>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <fsm_setting+0xe8>
				status = MODE_3;
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <fsm_setting+0x250>)
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8001fa6:	f001 fa4d 	bl	8003444 <clearAllLed>
				button_flag[0] = 0;
 8001faa:	4b61      	ldr	r3, [pc, #388]	; (8002130 <fsm_setting+0x268>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7fe ffc7 	bl	8000f44 <isButtonPressed>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d029      	beq.n	8002010 <fsm_setting+0x148>
				button_flag[1] = 0;
 8001fbc:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <fsm_setting+0x268>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
				adj_red++;
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <fsm_setting+0x258>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a55      	ldr	r2, [pc, #340]	; (8002120 <fsm_setting+0x258>)
 8001fca:	6013      	str	r3, [r2, #0]
				if(adj_red == 100)
 8001fcc:	4b54      	ldr	r3, [pc, #336]	; (8002120 <fsm_setting+0x258>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d102      	bne.n	8001fda <fsm_setting+0x112>
					adj_red = 1;
 8001fd4:	4b52      	ldr	r3, [pc, #328]	; (8002120 <fsm_setting+0x258>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f000 fbb2 	bl	8002746 <lcd_goto_XY>
				                if (adj_red < 10) {
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <fsm_setting+0x258>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	dc07      	bgt.n	8001ffa <fsm_setting+0x132>
				                    sprintf(buffer, "Red: 0%d", adj_red);
 8001fea:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <fsm_setting+0x258>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	463b      	mov	r3, r7
 8001ff0:	494c      	ldr	r1, [pc, #304]	; (8002124 <fsm_setting+0x25c>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 fa94 	bl	8007520 <siprintf>
 8001ff8:	e006      	b.n	8002008 <fsm_setting+0x140>
				                } else {
				                    sprintf(buffer, "Red: %d", adj_red);
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <fsm_setting+0x258>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	463b      	mov	r3, r7
 8002000:	4949      	ldr	r1, [pc, #292]	; (8002128 <fsm_setting+0x260>)
 8002002:	4618      	mov	r0, r3
 8002004:	f005 fa8c 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8002008:	463b      	mov	r3, r7
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fb7c 	bl	8002708 <lcd_send_string>
			}
			if(isButtonPressed(2)){
 8002010:	2002      	movs	r0, #2
 8002012:	f7fe ff97 	bl	8000f44 <isButtonPressed>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 828d 	beq.w	8002538 <fsm_setting+0x670>
				button_flag[2] = 0;
 800201e:	4b44      	ldr	r3, [pc, #272]	; (8002130 <fsm_setting+0x268>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
				if(adj_red > 2 && adj_red < 98){
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <fsm_setting+0x258>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	dd35      	ble.n	8002098 <fsm_setting+0x1d0>
 800202c:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <fsm_setting+0x258>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b61      	cmp	r3, #97	; 0x61
 8002032:	dc31      	bgt.n	8002098 <fsm_setting+0x1d0>
					amber = ((temp_green < adj_red) ? (adj_red - temp_green) : temp_amber);
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <fsm_setting+0x26c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <fsm_setting+0x258>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	da05      	bge.n	800204c <fsm_setting+0x184>
 8002040:	4b37      	ldr	r3, [pc, #220]	; (8002120 <fsm_setting+0x258>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <fsm_setting+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	e001      	b.n	8002050 <fsm_setting+0x188>
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <fsm_setting+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3a      	ldr	r2, [pc, #232]	; (800213c <fsm_setting+0x274>)
 8002052:	6013      	str	r3, [r2, #0]

					if(green + amber < 100){
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <fsm_setting+0x278>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b38      	ldr	r3, [pc, #224]	; (800213c <fsm_setting+0x274>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4413      	add	r3, r2
 800205e:	2b63      	cmp	r3, #99	; 0x63
 8002060:	dc17      	bgt.n	8002092 <fsm_setting+0x1ca>
						green = adj_red - amber;
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <fsm_setting+0x258>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b35      	ldr	r3, [pc, #212]	; (800213c <fsm_setting+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a34      	ldr	r2, [pc, #208]	; (8002140 <fsm_setting+0x278>)
 800206e:	6013      	str	r3, [r2, #0]
						red = adj_red;
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <fsm_setting+0x258>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a33      	ldr	r2, [pc, #204]	; (8002144 <fsm_setting+0x27c>)
 8002076:	6013      	str	r3, [r2, #0]

						temp_red = red;
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <fsm_setting+0x27c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a32      	ldr	r2, [pc, #200]	; (8002148 <fsm_setting+0x280>)
 800207e:	6013      	str	r3, [r2, #0]
						temp_amber = amber;
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <fsm_setting+0x274>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <fsm_setting+0x270>)
 8002086:	6013      	str	r3, [r2, #0]
						temp_green = green;
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <fsm_setting+0x278>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a29      	ldr	r2, [pc, #164]	; (8002134 <fsm_setting+0x26c>)
 800208e:	6013      	str	r3, [r2, #0]
					if(green + amber < 100){
 8002090:	e00e      	b.n	80020b0 <fsm_setting+0x1e8>
					}
					else{
						reTime();
 8002092:	f000 fa7b 	bl	800258c <reTime>
					if(green + amber < 100){
 8002096:	e00b      	b.n	80020b0 <fsm_setting+0x1e8>
					}
				}
				else{
					red = max_red;
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <fsm_setting+0x284>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a29      	ldr	r2, [pc, #164]	; (8002144 <fsm_setting+0x27c>)
 800209e:	6013      	str	r3, [r2, #0]
					amber = max_amber;
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <fsm_setting+0x288>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a25      	ldr	r2, [pc, #148]	; (800213c <fsm_setting+0x274>)
 80020a6:	6013      	str	r3, [r2, #0]
					green = max_green;
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <fsm_setting+0x28c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <fsm_setting+0x278>)
 80020ae:	6013      	str	r3, [r2, #0]
				}
				clearAllLed();
 80020b0:	f001 f9c8 	bl	8003444 <clearAllLed>
				status = RED_GREEN;
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <fsm_setting+0x250>)
 80020b6:	2205      	movs	r2, #5
 80020b8:	601a      	str	r2, [r3, #0]
				setTimer(1, green*1000);
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <fsm_setting+0x278>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	2001      	movs	r0, #1
 80020ca:	f001 f977 	bl	80033bc <setTimer>
				setTimer(0, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	2000      	movs	r0, #0
 80020d2:	f001 f973 	bl	80033bc <setTimer>
			}

			break;
 80020d6:	e22f      	b.n	8002538 <fsm_setting+0x670>
		case MODE_3:
			// Hiển thị "Mode_3"
			//lcd_clear_display();
			            lcd_goto_XY(0, 1);
 80020d8:	2101      	movs	r1, #1
 80020da:	2000      	movs	r0, #0
 80020dc:	f000 fb33 	bl	8002746 <lcd_goto_XY>
			            sprintf(buffer, "Mode: %d", status);
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <fsm_setting+0x250>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	463b      	mov	r3, r7
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <fsm_setting+0x254>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f005 fa19 	bl	8007520 <siprintf>
			            lcd_send_string(buffer);
 80020ee:	463b      	mov	r3, r7
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fb09 	bl	8002708 <lcd_send_string>

			            // Hiển thị "Amber"
			            lcd_goto_XY(1, 0);
 80020f6:	2100      	movs	r1, #0
 80020f8:	2001      	movs	r0, #1
 80020fa:	f000 fb24 	bl	8002746 <lcd_goto_XY>
			            if (adj_amber < 10) {
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <fsm_setting+0x290>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b09      	cmp	r3, #9
 8002104:	dc2c      	bgt.n	8002160 <fsm_setting+0x298>
			                sprintf(buffer, "Amber: 0%d", adj_amber);
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <fsm_setting+0x290>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	463b      	mov	r3, r7
 800210c:	4913      	ldr	r1, [pc, #76]	; (800215c <fsm_setting+0x294>)
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fa06 	bl	8007520 <siprintf>
 8002114:	e02b      	b.n	800216e <fsm_setting+0x2a6>
 8002116:	bf00      	nop
 8002118:	20000298 	.word	0x20000298
 800211c:	08009930 	.word	0x08009930
 8002120:	20000068 	.word	0x20000068
 8002124:	0800993c 	.word	0x0800993c
 8002128:	08009948 	.word	0x08009948
 800212c:	200002ac 	.word	0x200002ac
 8002130:	2000026c 	.word	0x2000026c
 8002134:	20000058 	.word	0x20000058
 8002138:	20000054 	.word	0x20000054
 800213c:	20000048 	.word	0x20000048
 8002140:	2000004c 	.word	0x2000004c
 8002144:	20000044 	.word	0x20000044
 8002148:	20000050 	.word	0x20000050
 800214c:	2000005c 	.word	0x2000005c
 8002150:	20000060 	.word	0x20000060
 8002154:	20000064 	.word	0x20000064
 8002158:	2000006c 	.word	0x2000006c
 800215c:	08009950 	.word	0x08009950
			            } else {
			                sprintf(buffer, "Amber: %d", adj_amber);
 8002160:	4b98      	ldr	r3, [pc, #608]	; (80023c4 <fsm_setting+0x4fc>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	463b      	mov	r3, r7
 8002166:	4998      	ldr	r1, [pc, #608]	; (80023c8 <fsm_setting+0x500>)
 8002168:	4618      	mov	r0, r3
 800216a:	f005 f9d9 	bl	8007520 <siprintf>
			            }
			            lcd_send_string(buffer);
 800216e:	463b      	mov	r3, r7
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fac9 	bl	8002708 <lcd_send_string>
			//displayLED7SEG(status, 1);
			//displayLED7SEG(adj_amber, 0);
			if(timer_flag[0]){
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <fsm_setting+0x504>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <fsm_setting+0x2ca>
				blinkingLed(status);
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <fsm_setting+0x508>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fa14 	bl	80035b0 <blinkingLed>
				setTimer(0, 500);
 8002188:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800218c:	2000      	movs	r0, #0
 800218e:	f001 f915 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fed6 	bl	8000f44 <isButtonPressed>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <fsm_setting+0x2e6>
				status = MODE_4;
 800219e:	4b8c      	ldr	r3, [pc, #560]	; (80023d0 <fsm_setting+0x508>)
 80021a0:	2204      	movs	r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80021a4:	f001 f94e 	bl	8003444 <clearAllLed>
				button_flag[0] = 0;
 80021a8:	4b8a      	ldr	r3, [pc, #552]	; (80023d4 <fsm_setting+0x50c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe fec8 	bl	8000f44 <isButtonPressed>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d029      	beq.n	800220e <fsm_setting+0x346>
				button_flag[1] = 0;
 80021ba:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <fsm_setting+0x50c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
				adj_amber++;
 80021c0:	4b80      	ldr	r3, [pc, #512]	; (80023c4 <fsm_setting+0x4fc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a7f      	ldr	r2, [pc, #508]	; (80023c4 <fsm_setting+0x4fc>)
 80021c8:	6013      	str	r3, [r2, #0]
				if(adj_amber == 100)
 80021ca:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <fsm_setting+0x4fc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d102      	bne.n	80021d8 <fsm_setting+0x310>
					adj_amber = 1;
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <fsm_setting+0x4fc>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 80021d8:	2100      	movs	r1, #0
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 fab3 	bl	8002746 <lcd_goto_XY>
				                if (adj_amber < 10) {
 80021e0:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <fsm_setting+0x4fc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b09      	cmp	r3, #9
 80021e6:	dc07      	bgt.n	80021f8 <fsm_setting+0x330>
				                    sprintf(buffer, "Amber: 0%d", adj_amber);
 80021e8:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <fsm_setting+0x4fc>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	463b      	mov	r3, r7
 80021ee:	497a      	ldr	r1, [pc, #488]	; (80023d8 <fsm_setting+0x510>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 f995 	bl	8007520 <siprintf>
 80021f6:	e006      	b.n	8002206 <fsm_setting+0x33e>
				                } else {
				                    sprintf(buffer, "Amber: %d", adj_amber);
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <fsm_setting+0x4fc>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	463b      	mov	r3, r7
 80021fe:	4972      	ldr	r1, [pc, #456]	; (80023c8 <fsm_setting+0x500>)
 8002200:	4618      	mov	r0, r3
 8002202:	f005 f98d 	bl	8007520 <siprintf>
				                }
				                lcd_send_string(buffer);
 8002206:	463b      	mov	r3, r7
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fa7d 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(adj_amber, 0);
			}
			if(isButtonPressed(2)){
 800220e:	2002      	movs	r0, #2
 8002210:	f7fe fe98 	bl	8000f44 <isButtonPressed>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8190 	beq.w	800253c <fsm_setting+0x674>
				button_flag[2] = 0;
 800221c:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <fsm_setting+0x50c>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
				green = ((adj_amber < temp_red) ? (temp_red - adj_amber) : temp_green);
 8002222:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <fsm_setting+0x4fc>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b6d      	ldr	r3, [pc, #436]	; (80023dc <fsm_setting+0x514>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	da05      	bge.n	800223a <fsm_setting+0x372>
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <fsm_setting+0x514>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <fsm_setting+0x4fc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	e001      	b.n	800223e <fsm_setting+0x376>
 800223a:	4b69      	ldr	r3, [pc, #420]	; (80023e0 <fsm_setting+0x518>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a69      	ldr	r2, [pc, #420]	; (80023e4 <fsm_setting+0x51c>)
 8002240:	6013      	str	r3, [r2, #0]


				if((green + adj_amber) < 100){
 8002242:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <fsm_setting+0x51c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <fsm_setting+0x4fc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	2b63      	cmp	r3, #99	; 0x63
 800224e:	dc17      	bgt.n	8002280 <fsm_setting+0x3b8>
					red = green + adj_amber;
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <fsm_setting+0x51c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <fsm_setting+0x4fc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4413      	add	r3, r2
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <fsm_setting+0x520>)
 800225c:	6013      	str	r3, [r2, #0]
					amber = adj_amber;
 800225e:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <fsm_setting+0x4fc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a62      	ldr	r2, [pc, #392]	; (80023ec <fsm_setting+0x524>)
 8002264:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8002266:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <fsm_setting+0x520>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5c      	ldr	r2, [pc, #368]	; (80023dc <fsm_setting+0x514>)
 800226c:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <fsm_setting+0x524>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5f      	ldr	r2, [pc, #380]	; (80023f0 <fsm_setting+0x528>)
 8002274:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <fsm_setting+0x51c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a59      	ldr	r2, [pc, #356]	; (80023e0 <fsm_setting+0x518>)
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e001      	b.n	8002284 <fsm_setting+0x3bc>
				}
				else{
					reTime();
 8002280:	f000 f984 	bl	800258c <reTime>
				}
				clearAllLed();
 8002284:	f001 f8de 	bl	8003444 <clearAllLed>
				status = RED_GREEN;
 8002288:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <fsm_setting+0x508>)
 800228a:	2205      	movs	r2, #5
 800228c:	601a      	str	r2, [r3, #0]
				setTimer(1, green*1000);
 800228e:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <fsm_setting+0x51c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4619      	mov	r1, r3
 800229c:	2001      	movs	r0, #1
 800229e:	f001 f88d 	bl	80033bc <setTimer>
				setTimer(0, 1);
 80022a2:	2101      	movs	r1, #1
 80022a4:	2000      	movs	r0, #0
 80022a6:	f001 f889 	bl	80033bc <setTimer>
			}

			break;
 80022aa:	e147      	b.n	800253c <fsm_setting+0x674>
		case MODE_4:
			// Hiển thị "Mode_3"
						//lcd_clear_display();
			            lcd_goto_XY(0, 1);
 80022ac:	2101      	movs	r1, #1
 80022ae:	2000      	movs	r0, #0
 80022b0:	f000 fa49 	bl	8002746 <lcd_goto_XY>
			            sprintf(buffer, "Mode: %d", status);
 80022b4:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <fsm_setting+0x508>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	463b      	mov	r3, r7
 80022ba:	494e      	ldr	r1, [pc, #312]	; (80023f4 <fsm_setting+0x52c>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 f92f 	bl	8007520 <siprintf>
			            lcd_send_string(buffer);
 80022c2:	463b      	mov	r3, r7
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fa1f 	bl	8002708 <lcd_send_string>

			            // Hiển thị "Amber"
			            lcd_goto_XY(1, 0);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 fa3a 	bl	8002746 <lcd_goto_XY>
			            if (adj_amber < 10) {
 80022d2:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <fsm_setting+0x4fc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	dc07      	bgt.n	80022ea <fsm_setting+0x422>
			                sprintf(buffer, "Green: 0%d", adj_green);
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <fsm_setting+0x530>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	463b      	mov	r3, r7
 80022e0:	4946      	ldr	r1, [pc, #280]	; (80023fc <fsm_setting+0x534>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 f91c 	bl	8007520 <siprintf>
 80022e8:	e006      	b.n	80022f8 <fsm_setting+0x430>
			            } else {
			                sprintf(buffer, "Green: %d", adj_green);
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <fsm_setting+0x530>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	463b      	mov	r3, r7
 80022f0:	4943      	ldr	r1, [pc, #268]	; (8002400 <fsm_setting+0x538>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 f914 	bl	8007520 <siprintf>
			            }
			            lcd_send_string(buffer);
 80022f8:	463b      	mov	r3, r7
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa04 	bl	8002708 <lcd_send_string>
			//displayLED7SEG(status, 1);
			//displayLED7SEG(adj_green, 0);
			if(timer_flag[0]){
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <fsm_setting+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <fsm_setting+0x454>
				blinkingLed(status);
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <fsm_setting+0x508>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f001 f94f 	bl	80035b0 <blinkingLed>
				setTimer(0, 500);
 8002312:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002316:	2000      	movs	r0, #0
 8002318:	f001 f850 	bl	80033bc <setTimer>
			}
			if(isButtonPressed(0)){
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe fe11 	bl	8000f44 <isButtonPressed>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <fsm_setting+0x470>
				status = MODE_EXTEND;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <fsm_setting+0x508>)
 800232a:	220f      	movs	r2, #15
 800232c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800232e:	f001 f889 	bl	8003444 <clearAllLed>
				button_flag[0] = 0;
 8002332:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <fsm_setting+0x50c>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8002338:	2001      	movs	r0, #1
 800233a:	f7fe fe03 	bl	8000f44 <isButtonPressed>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d029      	beq.n	8002398 <fsm_setting+0x4d0>
				button_flag[1] = 0;
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <fsm_setting+0x50c>)
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
				adj_green++;
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <fsm_setting+0x530>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <fsm_setting+0x530>)
 8002352:	6013      	str	r3, [r2, #0]
				if(adj_green == 100)
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <fsm_setting+0x530>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d102      	bne.n	8002362 <fsm_setting+0x49a>
					adj_green = 1;
 800235c:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <fsm_setting+0x530>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8002362:	2100      	movs	r1, #0
 8002364:	2001      	movs	r0, #1
 8002366:	f000 f9ee 	bl	8002746 <lcd_goto_XY>
								                if (adj_amber < 10) {
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <fsm_setting+0x4fc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b09      	cmp	r3, #9
 8002370:	dc07      	bgt.n	8002382 <fsm_setting+0x4ba>
								                    sprintf(buffer, "Green: 0%d", adj_green);
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <fsm_setting+0x530>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	463b      	mov	r3, r7
 8002378:	4920      	ldr	r1, [pc, #128]	; (80023fc <fsm_setting+0x534>)
 800237a:	4618      	mov	r0, r3
 800237c:	f005 f8d0 	bl	8007520 <siprintf>
 8002380:	e006      	b.n	8002390 <fsm_setting+0x4c8>
								                } else {
								                    sprintf(buffer, "Green: %d", adj_green);
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <fsm_setting+0x530>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	463b      	mov	r3, r7
 8002388:	491d      	ldr	r1, [pc, #116]	; (8002400 <fsm_setting+0x538>)
 800238a:	4618      	mov	r0, r3
 800238c:	f005 f8c8 	bl	8007520 <siprintf>
								                }
								                lcd_send_string(buffer);
 8002390:	463b      	mov	r3, r7
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f9b8 	bl	8002708 <lcd_send_string>
				//displayLED7SEG(adj_green, 0);
			}
			if(isButtonPressed(2)){
 8002398:	2002      	movs	r0, #2
 800239a:	f7fe fdd3 	bl	8000f44 <isButtonPressed>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80cd 	beq.w	8002540 <fsm_setting+0x678>
				button_flag[2] = 0;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <fsm_setting+0x50c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
				amber = ((adj_green < temp_red) ? (temp_red - adj_green) : temp_amber);
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <fsm_setting+0x530>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <fsm_setting+0x514>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	da25      	bge.n	8002404 <fsm_setting+0x53c>
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <fsm_setting+0x514>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <fsm_setting+0x530>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	e021      	b.n	8002408 <fsm_setting+0x540>
 80023c4:	2000006c 	.word	0x2000006c
 80023c8:	0800995c 	.word	0x0800995c
 80023cc:	200002ac 	.word	0x200002ac
 80023d0:	20000298 	.word	0x20000298
 80023d4:	2000026c 	.word	0x2000026c
 80023d8:	08009950 	.word	0x08009950
 80023dc:	20000050 	.word	0x20000050
 80023e0:	20000058 	.word	0x20000058
 80023e4:	2000004c 	.word	0x2000004c
 80023e8:	20000044 	.word	0x20000044
 80023ec:	20000048 	.word	0x20000048
 80023f0:	20000054 	.word	0x20000054
 80023f4:	08009930 	.word	0x08009930
 80023f8:	20000070 	.word	0x20000070
 80023fc:	08009968 	.word	0x08009968
 8002400:	08009974 	.word	0x08009974
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <fsm_setting+0x688>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <fsm_setting+0x68c>)
 800240a:	6013      	str	r3, [r2, #0]

				if(adj_green + amber < 100){
 800240c:	4b52      	ldr	r3, [pc, #328]	; (8002558 <fsm_setting+0x690>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <fsm_setting+0x68c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4413      	add	r3, r2
 8002416:	2b63      	cmp	r3, #99	; 0x63
 8002418:	dc17      	bgt.n	800244a <fsm_setting+0x582>
					red = adj_green + amber;
 800241a:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <fsm_setting+0x690>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <fsm_setting+0x68c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a4d      	ldr	r2, [pc, #308]	; (800255c <fsm_setting+0x694>)
 8002426:	6013      	str	r3, [r2, #0]
					green = adj_green;
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <fsm_setting+0x690>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4c      	ldr	r2, [pc, #304]	; (8002560 <fsm_setting+0x698>)
 800242e:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8002430:	4b4a      	ldr	r3, [pc, #296]	; (800255c <fsm_setting+0x694>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <fsm_setting+0x69c>)
 8002436:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <fsm_setting+0x68c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a44      	ldr	r2, [pc, #272]	; (8002550 <fsm_setting+0x688>)
 800243e:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8002440:	4b47      	ldr	r3, [pc, #284]	; (8002560 <fsm_setting+0x698>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <fsm_setting+0x6a0>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e001      	b.n	800244e <fsm_setting+0x586>
				}
				else{
					reTime();
 800244a:	f000 f89f 	bl	800258c <reTime>
				}
				clearAllLed();
 800244e:	f000 fff9 	bl	8003444 <clearAllLed>
				status = RED_GREEN;
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <fsm_setting+0x6a4>)
 8002454:	2205      	movs	r2, #5
 8002456:	601a      	str	r2, [r3, #0]
				setTimer(1, green*1000);
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <fsm_setting+0x698>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	4619      	mov	r1, r3
 8002466:	2001      	movs	r0, #1
 8002468:	f000 ffa8 	bl	80033bc <setTimer>
				setTimer(0, 1);
 800246c:	2101      	movs	r1, #1
 800246e:	2000      	movs	r0, #0
 8002470:	f000 ffa4 	bl	80033bc <setTimer>
			}
			break;
 8002474:	e064      	b.n	8002540 <fsm_setting+0x678>
		case MODE_EXTEND:
		            // Hiển thị "Mode_EXTEND"
		            lcd_goto_XY(0, 1);
 8002476:	2101      	movs	r1, #1
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f964 	bl	8002746 <lcd_goto_XY>
		            sprintf(buffer, "Mode: priority");
 800247e:	463b      	mov	r3, r7
 8002480:	493b      	ldr	r1, [pc, #236]	; (8002570 <fsm_setting+0x6a8>)
 8002482:	4618      	mov	r0, r3
 8002484:	f005 f84c 	bl	8007520 <siprintf>
		            lcd_send_string(buffer);
 8002488:	463b      	mov	r3, r7
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f93c 	bl	8002708 <lcd_send_string>

		            // Hiển thị "Amber Blinking"
		            lcd_goto_XY(1, 0);
 8002490:	2100      	movs	r1, #0
 8002492:	2001      	movs	r0, #1
 8002494:	f000 f957 	bl	8002746 <lcd_goto_XY>
		            lcd_send_string("Amber Blinking");
 8002498:	4836      	ldr	r0, [pc, #216]	; (8002574 <fsm_setting+0x6ac>)
 800249a:	f000 f935 	bl	8002708 <lcd_send_string>

		            if (timer_flag[2]) {
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <fsm_setting+0x6b0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d037      	beq.n	8002516 <fsm_setting+0x64e>
		                static int led_state = 0;  // Keep track of the LED state (0 = OFF, 1 = ON)

		                if (led_state == 0) {
 80024a6:	4b35      	ldr	r3, [pc, #212]	; (800257c <fsm_setting+0x6b4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d117      	bne.n	80024de <fsm_setting+0x616>
		                    // Turn on the LEDs for MODE_3 (adjust the pins as per your hardware configuration)
		                    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	4833      	ldr	r0, [pc, #204]	; (8002580 <fsm_setting+0x6b8>)
 80024b4:	f001 fc2b 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	4831      	ldr	r0, [pc, #196]	; (8002584 <fsm_setting+0x6bc>)
 80024be:	f001 fc26 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	2120      	movs	r1, #32
 80024c6:	482e      	ldr	r0, [pc, #184]	; (8002580 <fsm_setting+0x6b8>)
 80024c8:	f001 fc21 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2108      	movs	r1, #8
 80024d0:	482b      	ldr	r0, [pc, #172]	; (8002580 <fsm_setting+0x6b8>)
 80024d2:	f001 fc1c 	bl	8003d0e <HAL_GPIO_WritePin>
		                    led_state = 1;  // Switch to ON state
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <fsm_setting+0x6b4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e016      	b.n	800250c <fsm_setting+0x644>
		                } else {
		                    // Turn off the LEDs
		                    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <fsm_setting+0x6b8>)
 80024e4:	f001 fc13 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	4825      	ldr	r0, [pc, #148]	; (8002584 <fsm_setting+0x6bc>)
 80024ee:	f001 fc0e 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	4822      	ldr	r0, [pc, #136]	; (8002580 <fsm_setting+0x6b8>)
 80024f8:	f001 fc09 	bl	8003d0e <HAL_GPIO_WritePin>
		                    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2108      	movs	r1, #8
 8002500:	481f      	ldr	r0, [pc, #124]	; (8002580 <fsm_setting+0x6b8>)
 8002502:	f001 fc04 	bl	8003d0e <HAL_GPIO_WritePin>
		                    led_state = 0;  // Switch to OFF state
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <fsm_setting+0x6b4>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
		                }

		                setTimer(2, 1000);  // Restart the timer with a 1-second interval
 800250c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002510:	2002      	movs	r0, #2
 8002512:	f000 ff53 	bl	80033bc <setTimer>
		            }
		            //clearAllLed();
		            // If any button is pressed, return to INIT state
		            if(isButtonPressed(0)) {
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fd14 	bl	8000f44 <isButtonPressed>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <fsm_setting+0x67c>
		                clearAllLed();  // Clear all LEDs when transitioning to INIT
 8002522:	f000 ff8f 	bl	8003444 <clearAllLed>
		                status = MODE_1;  // Return to INIT state
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <fsm_setting+0x6a4>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]
		                button_flag[0] = 0;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <fsm_setting+0x6c0>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
		            }

		            break;
 8002532:	e007      	b.n	8002544 <fsm_setting+0x67c>
		default:
			break;
 8002534:	bf00      	nop
 8002536:	e006      	b.n	8002546 <fsm_setting+0x67e>
			break;
 8002538:	bf00      	nop
 800253a:	e004      	b.n	8002546 <fsm_setting+0x67e>
			break;
 800253c:	bf00      	nop
 800253e:	e002      	b.n	8002546 <fsm_setting+0x67e>
			break;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <fsm_setting+0x67e>
		            break;
 8002544:	bf00      	nop
	}
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000054 	.word	0x20000054
 8002554:	20000048 	.word	0x20000048
 8002558:	20000070 	.word	0x20000070
 800255c:	20000044 	.word	0x20000044
 8002560:	2000004c 	.word	0x2000004c
 8002564:	20000050 	.word	0x20000050
 8002568:	20000058 	.word	0x20000058
 800256c:	20000298 	.word	0x20000298
 8002570:	08009980 	.word	0x08009980
 8002574:	08009990 	.word	0x08009990
 8002578:	200002ac 	.word	0x200002ac
 800257c:	20000294 	.word	0x20000294
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40011000 	.word	0x40011000
 8002588:	2000026c 	.word	0x2000026c

0800258c <reTime>:
int max_green = 3;
int adj_red = 1;
int adj_amber = 1;
int adj_green = 1;

void reTime(){
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
red = max_red;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <reTime+0x3c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <reTime+0x40>)
 8002596:	6013      	str	r3, [r2, #0]
amber = max_amber;
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <reTime+0x44>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <reTime+0x48>)
 800259e:	6013      	str	r3, [r2, #0]
green = max_green;
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <reTime+0x4c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <reTime+0x50>)
 80025a6:	6013      	str	r3, [r2, #0]
temp_red = red;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <reTime+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <reTime+0x54>)
 80025ae:	6013      	str	r3, [r2, #0]
temp_amber = amber;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <reTime+0x48>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <reTime+0x58>)
 80025b6:	6013      	str	r3, [r2, #0]
temp_green = green;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <reTime+0x50>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <reTime+0x5c>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	2000005c 	.word	0x2000005c
 80025cc:	20000044 	.word	0x20000044
 80025d0:	20000060 	.word	0x20000060
 80025d4:	20000048 	.word	0x20000048
 80025d8:	20000064 	.word	0x20000064
 80025dc:	2000004c 	.word	0x2000004c
 80025e0:	20000050 	.word	0x20000050
 80025e4:	20000054 	.word	0x20000054
 80025e8:	20000058 	.word	0x20000058

080025ec <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f023 030f 	bic.w	r3, r3, #15
 80025fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	f043 030c 	orr.w	r3, r3, #12
 800260a:	b2db      	uxtb	r3, r3
 800260c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	b2db      	uxtb	r3, r3
 8002616:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	f043 030c 	orr.w	r3, r3, #12
 800261e:	b2db      	uxtb	r3, r3
 8002620:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	b2db      	uxtb	r3, r3
 800262a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	2364      	movs	r3, #100	; 0x64
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2304      	movs	r3, #4
 8002636:	2142      	movs	r1, #66	; 0x42
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <lcd_send_cmd+0x5c>)
 800263a:	f001 fce7 	bl	800400c <HAL_I2C_Master_Transmit>
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000304 	.word	0x20000304

0800264c <lcd_send_data>:

void lcd_send_data (char data)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f023 030f 	bic.w	r3, r3, #15
 800265c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f043 030d 	orr.w	r3, r3, #13
 800266a:	b2db      	uxtb	r3, r3
 800266c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f043 0309 	orr.w	r3, r3, #9
 8002674:	b2db      	uxtb	r3, r3
 8002676:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	f043 030d 	orr.w	r3, r3, #13
 800267e:	b2db      	uxtb	r3, r3
 8002680:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	f043 0309 	orr.w	r3, r3, #9
 8002688:	b2db      	uxtb	r3, r3
 800268a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800268c:	f107 0208 	add.w	r2, r7, #8
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2304      	movs	r3, #4
 8002696:	2142      	movs	r1, #66	; 0x42
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <lcd_send_data+0x5c>)
 800269a:	f001 fcb7 	bl	800400c <HAL_I2C_Master_Transmit>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000304 	.word	0x20000304

080026ac <lcd_init>:

void lcd_init (void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80026b0:	2033      	movs	r0, #51	; 0x33
 80026b2:	f7ff ff9b 	bl	80025ec <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80026b6:	2032      	movs	r0, #50	; 0x32
 80026b8:	f7ff ff98 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026bc:	2032      	movs	r0, #50	; 0x32
 80026be:	f001 f859 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80026c2:	2028      	movs	r0, #40	; 0x28
 80026c4:	f7ff ff92 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026c8:	2032      	movs	r0, #50	; 0x32
 80026ca:	f001 f853 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff ff8c 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026d4:	2032      	movs	r0, #50	; 0x32
 80026d6:	f001 f84d 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80026da:	2006      	movs	r0, #6
 80026dc:	f7ff ff86 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026e0:	2032      	movs	r0, #50	; 0x32
 80026e2:	f001 f847 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80026e6:	200c      	movs	r0, #12
 80026e8:	f7ff ff80 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026ec:	2032      	movs	r0, #50	; 0x32
 80026ee:	f001 f841 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7ff ff7a 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 80026f8:	2032      	movs	r0, #50	; 0x32
 80026fa:	f001 f83b 	bl	8003774 <HAL_Delay>
	lcd_send_cmd (0x80);
 80026fe:	2080      	movs	r0, #128	; 0x80
 8002700:	f7ff ff74 	bl	80025ec <lcd_send_cmd>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002710:	e006      	b.n	8002720 <lcd_send_string+0x18>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff96 	bl	800264c <lcd_send_data>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f4      	bne.n	8002712 <lcd_send_string+0xa>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff ff58 	bl	80025ec <lcd_send_cmd>
	HAL_Delay(50);
 800273c:	2032      	movs	r0, #50	; 0x32
 800273e:	f001 f819 	bl	8003774 <HAL_Delay>
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}

08002746 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	337f      	adds	r3, #127	; 0x7f
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e008      	b.n	800277a <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3340      	adds	r3, #64	; 0x40
 800276e:	b2db      	uxtb	r3, r3
 8002770:	b25b      	sxtb	r3, r3
 8002772:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002776:	b25b      	sxtb	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff35 	bl	80025ec <lcd_send_cmd>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <getSend>:
/* USER CODE BEGIN 0 */
extern float RH;   // Relative Humidity
extern float Temp; // Temperature

void getSend()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	; 0x40
 8002790:	af02      	add	r7, sp, #8
    Status_Trigger_DHT20 check_sensor = trigger_measurement_data_dht20();
 8002792:	f7fe fd15 	bl	80011c0 <trigger_measurement_data_dht20>
 8002796:	4603      	mov	r3, r0
 8002798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    char buffer[50]; // Buffer to store the formatted strings

    if (check_sensor == DHT20_OK)
 800279c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d134      	bne.n	800280e <getSend+0x82>
    {
        // Display and send the relative humidity
        snprintf(buffer, sizeof(buffer), "Humidity: %.1f%%\r\n", RH);
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <getSend+0x124>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe3d 	bl	8000428 <__aeabi_f2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	1d38      	adds	r0, r7, #4
 80027b4:	e9cd 2300 	strd	r2, r3, [sp]
 80027b8:	4a3e      	ldr	r2, [pc, #248]	; (80028b4 <getSend+0x128>)
 80027ba:	2132      	movs	r1, #50	; 0x32
 80027bc:	f004 fe7c 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fcc4 	bl	8000150 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	1d39      	adds	r1, r7, #4
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	4839      	ldr	r0, [pc, #228]	; (80028b8 <getSend+0x12c>)
 80027d4:	f003 feb6 	bl	8006544 <HAL_UART_Transmit>

        // Display and send the temperature
        snprintf(buffer, sizeof(buffer), "Temperature: %.1f°C\r\n", Temp);
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <getSend+0x130>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe23 	bl	8000428 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1d38      	adds	r0, r7, #4
 80027e8:	e9cd 2300 	strd	r2, r3, [sp]
 80027ec:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <getSend+0x134>)
 80027ee:	2132      	movs	r1, #50	; 0x32
 80027f0:	f004 fe62 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fcaa 	bl	8000150 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	1d39      	adds	r1, r7, #4
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	482c      	ldr	r0, [pc, #176]	; (80028b8 <getSend+0x12c>)
 8002808:	f003 fe9c 	bl	8006544 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);

        snprintf(buffer, sizeof(buffer), "Temperature: --ERROR--\r\n");
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
    }
}
 800280c:	e04c      	b.n	80028a8 <getSend+0x11c>
    else if (check_sensor == DHT20_BUSY)
 800280e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002812:	2b03      	cmp	r3, #3
 8002814:	d124      	bne.n	8002860 <getSend+0xd4>
        snprintf(buffer, sizeof(buffer), "Humidity: --BUSY--\r\n");
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <getSend+0x138>)
 800281a:	2132      	movs	r1, #50	; 0x32
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fe4b 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fc93 	bl	8000150 <strlen>
 800282a:	4603      	mov	r3, r0
 800282c:	b29a      	uxth	r2, r3
 800282e:	1d39      	adds	r1, r7, #4
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	4820      	ldr	r0, [pc, #128]	; (80028b8 <getSend+0x12c>)
 8002836:	f003 fe85 	bl	8006544 <HAL_UART_Transmit>
        snprintf(buffer, sizeof(buffer), "Temperature: --BUSY--\r\n");
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <getSend+0x13c>)
 800283e:	2132      	movs	r1, #50	; 0x32
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fe39 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fc81 	bl	8000150 <strlen>
 800284e:	4603      	mov	r3, r0
 8002850:	b29a      	uxth	r2, r3
 8002852:	1d39      	adds	r1, r7, #4
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	4817      	ldr	r0, [pc, #92]	; (80028b8 <getSend+0x12c>)
 800285a:	f003 fe73 	bl	8006544 <HAL_UART_Transmit>
}
 800285e:	e023      	b.n	80028a8 <getSend+0x11c>
        snprintf(buffer, sizeof(buffer), "Humidity: --ERROR--\r\n");
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <getSend+0x140>)
 8002864:	2132      	movs	r1, #50	; 0x32
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fe26 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fc6e 	bl	8000150 <strlen>
 8002874:	4603      	mov	r3, r0
 8002876:	b29a      	uxth	r2, r3
 8002878:	1d39      	adds	r1, r7, #4
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	480e      	ldr	r0, [pc, #56]	; (80028b8 <getSend+0x12c>)
 8002880:	f003 fe60 	bl	8006544 <HAL_UART_Transmit>
        snprintf(buffer, sizeof(buffer), "Temperature: --ERROR--\r\n");
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <getSend+0x144>)
 8002888:	2132      	movs	r1, #50	; 0x32
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fe14 	bl	80074b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fc5c 	bl	8000150 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	b29a      	uxth	r2, r3
 800289c:	1d39      	adds	r1, r7, #4
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <getSend+0x12c>)
 80028a4:	f003 fe4e 	bl	8006544 <HAL_UART_Transmit>
}
 80028a8:	bf00      	nop
 80028aa:	3738      	adds	r7, #56	; 0x38
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000028c 	.word	0x2000028c
 80028b4:	080099a0 	.word	0x080099a0
 80028b8:	200003a0 	.word	0x200003a0
 80028bc:	20000290 	.word	0x20000290
 80028c0:	080099b4 	.word	0x080099b4
 80028c4:	080099cc 	.word	0x080099cc
 80028c8:	080099e4 	.word	0x080099e4
 80028cc:	080099fc 	.word	0x080099fc
 80028d0:	08009a14 	.word	0x08009a14

080028d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d8:	f000 feea 	bl	80036b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028dc:	f000 f832 	bl	8002944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e0:	f000 f916 	bl	8002b10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028e4:	f000 f8ea 	bl	8002abc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80028e8:	f000 f86e 	bl	80029c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80028ec:	f000 f89a 	bl	8002a24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <main+0x5c>)
 80028f2:	f003 fa35 	bl	8005d60 <HAL_TIM_Base_Start_IT>
  schedulerInit();
 80028f6:	f000 f9cf 	bl	8002c98 <schedulerInit>
  lcd_init();
 80028fa:	f7ff fed7 	bl	80026ac <lcd_init>
  schedulerAddTask(getSend, 50, 1000);
 80028fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002902:	2132      	movs	r1, #50	; 0x32
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <main+0x60>)
 8002906:	f000 fb05 	bl	8002f14 <schedulerAddTask>
  schedulerAddTask(fsm_manual, 50, 1);      // 50 * 10 ms = 500 ms period
 800290a:	2201      	movs	r2, #1
 800290c:	2132      	movs	r1, #50	; 0x32
 800290e:	480a      	ldr	r0, [pc, #40]	; (8002938 <main+0x64>)
 8002910:	f000 fb00 	bl	8002f14 <schedulerAddTask>
  schedulerAddTask(fsm_setting, 50, 1);     // 1 second period task
 8002914:	2201      	movs	r2, #1
 8002916:	2132      	movs	r1, #50	; 0x32
 8002918:	4808      	ldr	r0, [pc, #32]	; (800293c <main+0x68>)
 800291a:	f000 fafb 	bl	8002f14 <schedulerAddTask>
  schedulerAddTask(fsm_automatic, 50, 1);   // 1.5 second period task
 800291e:	2201      	movs	r2, #1
 8002920:	2132      	movs	r1, #50	; 0x32
 8002922:	4807      	ldr	r0, [pc, #28]	; (8002940 <main+0x6c>)
 8002924:	f000 faf6 	bl	8002f14 <schedulerAddTask>
//  sprintf(buffer, "TrafficY: 0%d", 10);
  while (1)
  {
    /* USER CODE END WHILE */
	  //getSend();
	  schedulerDispatcher();
 8002928:	f000 fb2c 	bl	8002f84 <schedulerDispatcher>
 800292c:	e7fc      	b.n	8002928 <main+0x54>
 800292e:	bf00      	nop
 8002930:	20000358 	.word	0x20000358
 8002934:	0800278d 	.word	0x0800278d
 8002938:	0800196d 	.word	0x0800196d
 800293c:	08001ec9 	.word	0x08001ec9
 8002940:	08001399 	.word	0x08001399

08002944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b090      	sub	sp, #64	; 0x40
 8002948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294a:	f107 0318 	add.w	r3, r7, #24
 800294e:	2228      	movs	r2, #40	; 0x28
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f004 f804 	bl	8006960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800296a:	2301      	movs	r3, #1
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296e:	2310      	movs	r3, #16
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002972:	2302      	movs	r3, #2
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002976:	2300      	movs	r3, #0
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800297a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fd8d 	bl	80054a4 <HAL_RCC_OscConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002990:	f000 f97c 	bl	8002c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002994:	230f      	movs	r3, #15
 8002996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002998:	2302      	movs	r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fff8 	bl	80059a4 <HAL_RCC_ClockConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80029ba:	f000 f967 	bl	8002c8c <Error_Handler>
  }
}
 80029be:	bf00      	nop
 80029c0:	3740      	adds	r7, #64	; 0x40
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <MX_I2C1_Init+0x54>)
 80029d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <MX_I2C1_Init+0x58>)
 80029d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <MX_I2C1_Init+0x50>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_I2C1_Init+0x50>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a04:	4804      	ldr	r0, [pc, #16]	; (8002a18 <MX_I2C1_Init+0x50>)
 8002a06:	f001 f9bd 	bl	8003d84 <HAL_I2C_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a10:	f000 f93c 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000304 	.word	0x20000304
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	000186a0 	.word	0x000186a0

08002a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a58:	2209      	movs	r2, #9
 8002a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a68:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a6a:	f003 f929 	bl	8005cc0 <HAL_TIM_Base_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a74:	f000 f90a 	bl	8002c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	4619      	mov	r1, r3
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002a86:	f003 faad 	bl	8005fe4 <HAL_TIM_ConfigClockSource>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a90:	f000 f8fc 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_TIM2_Init+0x94>)
 8002aa2:	f003 fc8f 	bl	80063c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002aac:	f000 f8ee 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000358 	.word	0x20000358

08002abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <MX_USART2_UART_Init+0x50>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002af4:	f003 fcd6 	bl	80064a4 <HAL_UART_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002afe:	f000 f8c5 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200003a0 	.word	0x200003a0
 8002b0c:	40004400 	.word	0x40004400

08002b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b42:	f043 0320 	orr.w	r3, r3, #32
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a40      	ldr	r2, [pc, #256]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <MX_GPIO_Init+0x14c>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	4835      	ldr	r0, [pc, #212]	; (8002c60 <MX_GPIO_Init+0x150>)
 8002b8a:	f001 f8c0 	bl	8003d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	4834      	ldr	r0, [pc, #208]	; (8002c64 <MX_GPIO_Init+0x154>)
 8002b94:	f001 f8bb 	bl	8003d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin, GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2168      	movs	r1, #104	; 0x68
 8002b9c:	4832      	ldr	r0, [pc, #200]	; (8002c68 <MX_GPIO_Init+0x158>)
 8002b9e:	f001 f8b6 	bl	8003d0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <MX_GPIO_Init+0x15c>)
 8002baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <MX_GPIO_Init+0x154>)
 8002bb8:	f000 ff0e 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4823      	ldr	r0, [pc, #140]	; (8002c60 <MX_GPIO_Init+0x150>)
 8002bd4:	f000 ff00 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_btn1_Pin D5_btn0_Pin */
  GPIO_InitStruct.Pin = D6_btn1_Pin|D5_btn0_Pin;
 8002bd8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	4619      	mov	r1, r3
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <MX_GPIO_Init+0x158>)
 8002bee:	f000 fef3 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LED0_Pin */
  GPIO_InitStruct.Pin = D9_LED0_Pin;
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_LED0_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4619      	mov	r1, r3
 8002c08:	4816      	ldr	r0, [pc, #88]	; (8002c64 <MX_GPIO_Init+0x154>)
 8002c0a:	f000 fee5 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_btn2_Pin D8_btn3_Pin */
  GPIO_InitStruct.Pin = D7_btn2_Pin|D8_btn3_Pin;
 8002c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4619      	mov	r1, r3
 8002c22:	480f      	ldr	r0, [pc, #60]	; (8002c60 <MX_GPIO_Init+0x150>)
 8002c24:	f000 fed8 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_LED0_Pin D4_LED1_Pin D10_LED1_Pin */
  GPIO_InitStruct.Pin = D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin;
 8002c28:	2368      	movs	r3, #104	; 0x68
 8002c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2302      	movs	r3, #2
 8002c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480a      	ldr	r0, [pc, #40]	; (8002c68 <MX_GPIO_Init+0x158>)
 8002c40:	f000 feca 	bl	80039d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	2028      	movs	r0, #40	; 0x28
 8002c4a:	f000 fe8e 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c4e:	2028      	movs	r0, #40	; 0x28
 8002c50:	f000 fea7 	bl	80039a2 <HAL_NVIC_EnableIRQ>

}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010800 	.word	0x40010800
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40010c00 	.word	0x40010c00
 8002c6c:	10110000 	.word	0x10110000

08002c70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	timerRun();
 8002c78:	f000 fbb8 	bl	80033ec <timerRun>
	schedulerUpdate();
 8002c7c:	f000 f82e 	bl	8002cdc <schedulerUpdate>
	getKeyInput();
 8002c80:	f7fe f974 	bl	8000f6c <getKeyInput>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c90:	b672      	cpsid	i
}
 8002c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <Error_Handler+0x8>
	...

08002c98 <schedulerInit>:
ERROR_CODE ErrorCode = NO_ERROR;
ERROR_CODE LastErrorCode = NO_ERROR;

char str[50];

void schedulerInit() {
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
//    while (TaskList.head != NULL) {
//        deleteTask(TaskList.head->TaskID); // Xóa tác vụ đầu tiên trong danh sách
//    }
    TaskList.head = NULL;	//Node head = 0;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <schedulerInit+0x30>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    TaskList.size = 0;        //Asign size = 0
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <schedulerInit+0x30>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]
    TaskIDCounter = 0;        // Reset task ID counter
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <schedulerInit+0x34>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    timestamp = 0;            // Reset timestamp
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <schedulerInit+0x38>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
    ErrorCode = NO_ERROR;      // Clear any existing errors
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <schedulerInit+0x3c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    LastErrorCode = NO_ERROR;  // Clear last error code
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <schedulerInit+0x40>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	200003e8 	.word	0x200003e8
 8002ccc:	2000029c 	.word	0x2000029c
 8002cd0:	200002a0 	.word	0x200002a0
 8002cd4:	200002a4 	.word	0x200002a4
 8002cd8:	200002a5 	.word	0x200002a5

08002cdc <schedulerUpdate>:

void schedulerUpdate() {
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
    //timestamp += 10; // Cập nhật tổng thời gian
    Node *current = TaskList.head;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <schedulerUpdate+0x5c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]

    // Duyệt qua danh sách các tác vụ
    while (current != NULL) {
 8002ce8:	e01c      	b.n	8002d24 <schedulerUpdate+0x48>
        if (current->Delay > 0) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <schedulerUpdate+0x20>
            current->Delay--; // Giảm thời gian chờ
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
        }

        if (current->Delay == 0) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <schedulerUpdate+0x42>
            current->RunMe++; // Đánh dấu sẵn sàng thực thi
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

            // Lên lịch lại nếu là tác vụ định kỳ
            if (current->Period > 0) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <schedulerUpdate+0x42>
                current->Delay = current->Period;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
            }
        }

        // Tiếp tục duyệt sang tác vụ kế tiếp
        current = current->NextTask;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1df      	bne.n	8002cea <schedulerUpdate+0xe>
    }
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200003e8 	.word	0x200003e8

08002d3c <deleteTask>:



int deleteTask(uint32_t ID){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    if(TaskList.size == 0)
 8002d44:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <deleteTask+0x100>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <deleteTask+0x14>
        return 1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e070      	b.n	8002e32 <deleteTask+0xf6>

    Node * curr = TaskList.head;
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <deleteTask+0x100>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
    Node * prev = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]

    while(curr != NULL){
 8002d5a:	e066      	b.n	8002e2a <deleteTask+0xee>
        if(ID == curr -> TaskID){
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d15c      	bne.n	8002e20 <deleteTask+0xe4>
            if(prev == NULL && curr -> NextTask == NULL){
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <deleteTask+0x54>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <deleteTask+0x54>
                free(curr);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f003 fdeb 	bl	8006950 <free>
                TaskList.head = NULL;
 8002d7a:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <deleteTask+0x100>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
                TaskList.size--;
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <deleteTask+0x100>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <deleteTask+0x100>)
 8002d88:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e04c      	b.n	8002e2a <deleteTask+0xee>
            } else if (prev == NULL){
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d117      	bne.n	8002dc6 <deleteTask+0x8a>
                curr -> NextTask -> Delay += curr -> Delay;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	440a      	add	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
                TaskList.head = curr -> NextTask;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <deleteTask+0x100>)
 8002dae:	6013      	str	r3, [r2, #0]
                free(curr);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f003 fdcd 	bl	8006950 <free>
                TaskList.size--;
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <deleteTask+0x100>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <deleteTask+0x100>)
 8002dbe:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e031      	b.n	8002e2a <deleteTask+0xee>
            } else if (curr -> NextTask == NULL){
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <deleteTask+0xae>
                free(curr);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f003 fdbe 	bl	8006950 <free>
                prev -> NextTask = NULL;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	615a      	str	r2, [r3, #20]
                TaskList.size--;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <deleteTask+0x100>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <deleteTask+0x100>)
 8002de2:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e01f      	b.n	8002e2a <deleteTask+0xee>
            } else {
                curr -> NextTask -> Delay += curr -> Delay;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	440a      	add	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
                prev -> NextTask = curr -> NextTask;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	615a      	str	r2, [r3, #20]
                curr -> NextTask = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
                free(curr);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f003 fda0 	bl	8006950 <free>
                TaskList.size--;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <deleteTask+0x100>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <deleteTask+0x100>)
 8002e18:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e004      	b.n	8002e2a <deleteTask+0xee>
            }

        } else {
            prev = curr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	60bb      	str	r3, [r7, #8]
            curr = curr -> NextTask;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	60fb      	str	r3, [r7, #12]
    while(curr != NULL){
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d195      	bne.n	8002d5c <deleteTask+0x20>
        }
    }
    return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200003e8 	.word	0x200003e8

08002e40 <schedulerDeleteTask>:

RETURN_CODE schedulerDeleteTask(const unsigned char TaskID){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
	RETURN_CODE returnCode;
	if(deleteTask(TaskID))
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff75 	bl	8002d3c <deleteTask>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <schedulerDeleteTask+0x1e>
		returnCode = ERROR_SCH_CANNOT_DELETE_TASK;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <schedulerDeleteTask+0x22>
	else
		returnCode = NO_ERROR;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
	return returnCode;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <addTask>:

int addTask(Node *task) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    if (TaskList.size >= SCH_MAX_TASKS) {
 8002e74:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <addTask+0xa4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b1f      	cmp	r3, #31
 8002e7a:	dd01      	ble.n	8002e80 <addTask+0x14>
        return 1; // Quá số lượng tác vụ cho phép
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e042      	b.n	8002f06 <addTask+0x9a>
    }

    task->RunMe = 0; // Đảm bảo cờ được đặt về 0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
    if (TaskList.size == 0) {
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <addTask+0xa4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <addTask+0x2a>
        TaskList.head = task;
 8002e8e:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <addTask+0xa4>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e031      	b.n	8002efa <addTask+0x8e>
    } else {
        Node *curr = TaskList.head;
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <addTask+0xa4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]
        Node *prev = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]

        while (curr && task->Delay >= curr->Delay) {
 8002ea0:	e00b      	b.n	8002eba <addTask+0x4e>
            task->Delay -= curr->Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
            prev = curr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	60bb      	str	r3, [r7, #8]
            curr = curr->NextTask;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	60fb      	str	r3, [r7, #12]
        while (curr && task->Delay >= curr->Delay) {
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <addTask+0x60>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d2ea      	bcs.n	8002ea2 <addTask+0x36>
        }

        task->NextTask = curr;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	615a      	str	r2, [r3, #20]
        if (prev) {
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <addTask+0x74>
            prev->NextTask = task;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	e002      	b.n	8002ee6 <addTask+0x7a>
        } else {
            TaskList.head = task;
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <addTask+0xa4>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
        }

        if (curr) {
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <addTask+0x8e>
            curr->Delay -= task->Delay;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
        }
    }

    TaskList.size++;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <addTask+0xa4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <addTask+0xa4>)
 8002f02:	6053      	str	r3, [r2, #4]
    return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	200003e8 	.word	0x200003e8

08002f14 <schedulerAddTask>:


unsigned char schedulerAddTask(void (*functionPointer)(), unsigned int DELAY, unsigned int PERIOD){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	Node * task = (Node *)malloc(sizeof(Node));
 8002f20:	2018      	movs	r0, #24
 8002f22:	f003 fd0d 	bl	8006940 <malloc>
 8002f26:	4603      	mov	r3, r0
 8002f28:	617b      	str	r3, [r7, #20]
	task -> Delay 		= DELAY;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
	task -> Period 		= PERIOD;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	60da      	str	r2, [r3, #12]
	task -> TaskID 		= (++TaskIDCounter)%256;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <schedulerAddTask+0x5c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <schedulerAddTask+0x5c>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <schedulerAddTask+0x5c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	605a      	str	r2, [r3, #4]
	task -> TaskPointer = functionPointer;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]
	task -> NextTask 	= NULL;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
	task -> RunMe 		= 0;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
	addTask(task);
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f7ff ff85 	bl	8002e6c <addTask>
	return task -> TaskID;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	b2db      	uxtb	r3, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	2000029c 	.word	0x2000029c

08002f74 <schedulerSleep>:

void schedulerSleep(){
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	// Enter idle or low-power mode
	    __WFI();  // Wait For Interrupt: puts the MCU in idle mode until an interrupt occurs
 8002f78:	bf30      	wfi
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
	...

08002f84 <schedulerDispatcher>:

void schedulerDispatcher() {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
    while (TaskList.size != 0) {
 8002f8a:	e021      	b.n	8002fd0 <schedulerDispatcher+0x4c>
        Node *current = TaskList.head;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <schedulerDispatcher+0x60>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	607b      	str	r3, [r7, #4]

        // Duyệt qua tất cả các tác vụ
        while (current != NULL) {
 8002f92:	e018      	b.n	8002fc6 <schedulerDispatcher+0x42>
            if (current->RunMe > 0) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d011      	beq.n	8002fc0 <schedulerDispatcher+0x3c>
                current->RunMe--; // Đánh dấu là đã thực thi
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
//                uint32_t time_point = timestamp;
//                sprintf(str, "TaskID: %ld timeout at timestamp: %ld ms\r\n", current->TaskID, time_point);
//                writeMessage(str);

                // Thực thi tác vụ
                current->TaskPointer();
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4798      	blx	r3

                // Nếu là tác vụ định kỳ, không xóa
                if (current->Period == 0) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <schedulerDispatcher+0x3c>
                    schedulerDeleteTask(current->TaskID);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff40 	bl	8002e40 <schedulerDeleteTask>
                }
            }

            // Tiếp tục với tác vụ kế tiếp
            current = current->NextTask;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	607b      	str	r3, [r7, #4]
        while (current != NULL) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e3      	bne.n	8002f94 <schedulerDispatcher+0x10>
        }

        schedulerSleep(); // Đưa hệ thống về chế độ tiết kiệm năng lượng
 8002fcc:	f7ff ffd2 	bl	8002f74 <schedulerSleep>
    while (TaskList.size != 0) {
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <schedulerDispatcher+0x60>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1d9      	bne.n	8002f8c <schedulerDispatcher+0x8>
    }

    schedulerReportStatus();
 8002fd8:	f000 f806 	bl	8002fe8 <schedulerReportStatus>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200003e8 	.word	0x200003e8

08002fe8 <schedulerReportStatus>:


int ErrorTickCount = 0;
void schedulerReportStatus(){
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
				ErrorCode = 0; //reset error code
			}
		}
	}
#endif
};
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_MspInit+0x5c>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4a14      	ldr	r2, [pc, #80]	; (8003050 <HAL_MspInit+0x5c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6193      	str	r3, [r2, #24]
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_MspInit+0x5c>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_MspInit+0x5c>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_MspInit+0x5c>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_MspInit+0x5c>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_MspInit+0x60>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_MspInit+0x60>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000

08003058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_I2C_MspInit+0x90>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d132      	bne.n	80030de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_I2C_MspInit+0x94>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_I2C_MspInit+0x94>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_I2C_MspInit+0x94>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003096:	2312      	movs	r3, #18
 8003098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4812      	ldr	r0, [pc, #72]	; (80030f0 <HAL_I2C_MspInit+0x98>)
 80030a6:	f000 fc97 	bl	80039d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_I2C_MspInit+0x9c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_I2C_MspInit+0x9c>)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_I2C_MspInit+0x94>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <HAL_I2C_MspInit+0x94>)
 80030cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030d0:	61d3      	str	r3, [r2, #28]
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_I2C_MspInit+0x94>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40005400 	.word	0x40005400
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010c00 	.word	0x40010c00
 80030f4:	40010000 	.word	0x40010000

080030f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d113      	bne.n	8003132 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_TIM_Base_MspInit+0x44>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <HAL_TIM_Base_MspInit+0x44>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_TIM_Base_MspInit+0x44>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	201c      	movs	r0, #28
 8003128:	f000 fc1f 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800312c:	201c      	movs	r0, #28
 800312e:	f000 fc38 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_UART_MspInit+0x70>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d123      	bne.n	80031a8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_UART_MspInit+0x74>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_UART_MspInit+0x74>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	61d3      	str	r3, [r2, #28]
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_UART_MspInit+0x74>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_UART_MspInit+0x74>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_UART_MspInit+0x74>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6193      	str	r3, [r2, #24]
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_UART_MspInit+0x74>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003190:	230c      	movs	r3, #12
 8003192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	4619      	mov	r1, r3
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <HAL_UART_MspInit+0x78>)
 80031a4:	f000 fc18 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031a8:	bf00      	nop
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010800 	.word	0x40010800

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <NMI_Handler+0x4>

080031c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <HardFault_Handler+0x4>

080031c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <MemManage_Handler+0x4>

080031ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d2:	e7fe      	b.n	80031d2 <BusFault_Handler+0x4>

080031d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <UsageFault_Handler+0x4>

080031da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003202:	f000 fa9b 	bl	800373c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <TIM2_IRQHandler+0x10>)
 8003212:	f002 fdf7 	bl	8005e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000358 	.word	0x20000358

08003220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003228:	f000 fd8a 	bl	8003d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	return 1;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <_kill>:

int _kill(int pid, int sig)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003248:	f003 fb50 	bl	80068ec <__errno>
 800324c:	4603      	mov	r3, r0
 800324e:	2216      	movs	r2, #22
 8003250:	601a      	str	r2, [r3, #0]
	return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_exit>:

void _exit (int status)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003266:	f04f 31ff 	mov.w	r1, #4294967295
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffe7 	bl	800323e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003270:	e7fe      	b.n	8003270 <_exit+0x12>

08003272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e00a      	b.n	800329a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003284:	f3af 8000 	nop.w
 8003288:	4601      	mov	r1, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	60ba      	str	r2, [r7, #8]
 8003290:	b2ca      	uxtb	r2, r1
 8003292:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	dbf0      	blt.n	8003284 <_read+0x12>
	}

return len;
 80032a2:	687b      	ldr	r3, [r7, #4]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e009      	b.n	80032d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	60ba      	str	r2, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	dbf1      	blt.n	80032be <_write+0x12>
	}
	return len;
 80032da:	687b      	ldr	r3, [r7, #4]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_close>:

int _close(int file)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	return -1;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330a:	605a      	str	r2, [r3, #4]
	return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <_isatty>:

int _isatty(int file)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	return 1;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
	return 0;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <_sbrk+0x5c>)
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <_sbrk+0x60>)
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <_sbrk+0x64>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <_sbrk+0x68>)
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003374:	f003 faba 	bl	80068ec <__errno>
 8003378:	4603      	mov	r3, r0
 800337a:	220c      	movs	r2, #12
 800337c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e009      	b.n	8003398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <_sbrk+0x64>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <_sbrk+0x64>)
 8003394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20005000 	.word	0x20005000
 80033a4:	00000400 	.word	0x00000400
 80033a8:	200002a8 	.word	0x200002a8
 80033ac:	20000438 	.word	0x20000438

080033b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <setTimer>:
//}

int timer_flag[MAXTM] = {0};
int timer_counter[MAXTM]= {0};

void setTimer(int index, int counter){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <setTimer+0x28>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2100      	movs	r1, #0
 80033cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter;
 80033d0:	4905      	ldr	r1, [pc, #20]	; (80033e8 <setTimer+0x2c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	200002ac 	.word	0x200002ac
 80033e8:	200002d4 	.word	0x200002d4

080033ec <timerRun>:
void timerRun(){
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAXTM; i++){
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	e017      	b.n	8003428 <timerRun+0x3c>
		if(timer_counter[i] > 0){
 80033f8:	4a10      	ldr	r2, [pc, #64]	; (800343c <timerRun+0x50>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	2b00      	cmp	r3, #0
 8003402:	dd09      	ble.n	8003418 <timerRun+0x2c>
			timer_counter[i]--;
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <timerRun+0x50>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	490b      	ldr	r1, [pc, #44]	; (800343c <timerRun+0x50>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003416:	e004      	b.n	8003422 <timerRun+0x36>
			if(timer_counter <= 0){
				timer_flag[i] = 1;
			}
		}
		else{
			timer_flag[i] = 1;
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <timerRun+0x54>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2101      	movs	r1, #1
 800341e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAXTM; i++){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3301      	adds	r3, #1
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b09      	cmp	r3, #9
 800342c:	dde4      	ble.n	80033f8 <timerRun+0xc>
		}
	}
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	200002d4 	.word	0x200002d4
 8003440:	200002ac 	.word	0x200002ac

08003444 <clearAllLed>:
#include "traffic_light.h"


void clearAllLed(){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	4809      	ldr	r0, [pc, #36]	; (8003474 <clearAllLed+0x30>)
 800344e:	f000 fc5e 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8003452:	2200      	movs	r2, #0
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4808      	ldr	r0, [pc, #32]	; (8003478 <clearAllLed+0x34>)
 8003458:	f000 fc59 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	2108      	movs	r1, #8
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <clearAllLed+0x34>)
 8003462:	f000 fc54 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8003466:	2200      	movs	r2, #0
 8003468:	2120      	movs	r1, #32
 800346a:	4803      	ldr	r0, [pc, #12]	; (8003478 <clearAllLed+0x34>)
 800346c:	f000 fc4f 	bl	8003d0e <HAL_GPIO_WritePin>
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40011000 	.word	0x40011000
 8003478:	40010c00 	.word	0x40010c00

0800347c <led_red_green>:

void led_red_green(){
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);  // Red LED
 8003480:	2201      	movs	r2, #1
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <led_red_green+0x30>)
 8003486:	f000 fc42 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);    // Red LED
 800348a:	2201      	movs	r2, #1
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	4808      	ldr	r0, [pc, #32]	; (80034b0 <led_red_green+0x34>)
 8003490:	f000 fc3d 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);  // Green LED
 8003494:	2200      	movs	r2, #0
 8003496:	2120      	movs	r1, #32
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <led_red_green+0x30>)
 800349a:	f000 fc38 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);    // Green LED
 800349e:	2201      	movs	r2, #1
 80034a0:	2108      	movs	r1, #8
 80034a2:	4802      	ldr	r0, [pc, #8]	; (80034ac <led_red_green+0x30>)
 80034a4:	f000 fc33 	bl	8003d0e <HAL_GPIO_WritePin>
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40010c00 	.word	0x40010c00
 80034b0:	40011000 	.word	0x40011000

080034b4 <led_red_amber>:

void led_red_amber(){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);  // Red LED
 80034b8:	2201      	movs	r2, #1
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	4809      	ldr	r0, [pc, #36]	; (80034e4 <led_red_amber+0x30>)
 80034be:	f000 fc26 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);    // Red LED
 80034c2:	2201      	movs	r2, #1
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	4808      	ldr	r0, [pc, #32]	; (80034e8 <led_red_amber+0x34>)
 80034c8:	f000 fc21 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);    // Amber LED
 80034cc:	2201      	movs	r2, #1
 80034ce:	2120      	movs	r1, #32
 80034d0:	4804      	ldr	r0, [pc, #16]	; (80034e4 <led_red_amber+0x30>)
 80034d2:	f000 fc1c 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);  // Green LED
 80034d6:	2200      	movs	r2, #0
 80034d8:	2108      	movs	r1, #8
 80034da:	4802      	ldr	r0, [pc, #8]	; (80034e4 <led_red_amber+0x30>)
 80034dc:	f000 fc17 	bl	8003d0e <HAL_GPIO_WritePin>
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010c00 	.word	0x40010c00
 80034e8:	40011000 	.word	0x40011000

080034ec <led_green_red>:

void led_green_red(){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET); // Green LED
 80034f0:	2200      	movs	r2, #0
 80034f2:	2140      	movs	r1, #64	; 0x40
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <led_green_red+0x30>)
 80034f6:	f000 fc0a 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);    // Red LED
 80034fa:	2201      	movs	r2, #1
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	4808      	ldr	r0, [pc, #32]	; (8003520 <led_green_red+0x34>)
 8003500:	f000 fc05 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);    // Amber LED
 8003504:	2201      	movs	r2, #1
 8003506:	2120      	movs	r1, #32
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <led_green_red+0x30>)
 800350a:	f000 fc00 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);    // Green LED
 800350e:	2201      	movs	r2, #1
 8003510:	2108      	movs	r1, #8
 8003512:	4802      	ldr	r0, [pc, #8]	; (800351c <led_green_red+0x30>)
 8003514:	f000 fbfb 	bl	8003d0e <HAL_GPIO_WritePin>
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40010c00 	.word	0x40010c00
 8003520:	40011000 	.word	0x40011000

08003524 <led_amber_red>:

void led_amber_red(){
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);  // Red LED
 8003528:	2201      	movs	r2, #1
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <led_amber_red+0x30>)
 800352e:	f000 fbee 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);  // Green LED
 8003532:	2200      	movs	r2, #0
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	4808      	ldr	r0, [pc, #32]	; (8003558 <led_amber_red+0x34>)
 8003538:	f000 fbe9 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);    // Amber LED
 800353c:	2201      	movs	r2, #1
 800353e:	2120      	movs	r1, #32
 8003540:	4804      	ldr	r0, [pc, #16]	; (8003554 <led_amber_red+0x30>)
 8003542:	f000 fbe4 	bl	8003d0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);    // Green LED
 8003546:	2201      	movs	r2, #1
 8003548:	2108      	movs	r1, #8
 800354a:	4802      	ldr	r0, [pc, #8]	; (8003554 <led_amber_red+0x30>)
 800354c:	f000 fbdf 	bl	8003d0e <HAL_GPIO_WritePin>
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40010c00 	.word	0x40010c00
 8003558:	40011000 	.word	0x40011000

0800355c <controlTime_led>:
    clearAllLed();
    led_red_green();
    led_red_amber();
}

void controlTime_led(){
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
    if(red <= 0) red = temp_red;
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <controlTime_led+0x3c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dc03      	bgt.n	8003570 <controlTime_led+0x14>
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <controlTime_led+0x40>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <controlTime_led+0x3c>)
 800356e:	6013      	str	r3, [r2, #0]
    if(green <= 0) green = temp_green;
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <controlTime_led+0x44>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	dc03      	bgt.n	8003580 <controlTime_led+0x24>
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <controlTime_led+0x48>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <controlTime_led+0x44>)
 800357e:	6013      	str	r3, [r2, #0]
    if(amber <= 0) amber = temp_amber;
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <controlTime_led+0x4c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	dc03      	bgt.n	8003590 <controlTime_led+0x34>
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <controlTime_led+0x50>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <controlTime_led+0x4c>)
 800358e:	6013      	str	r3, [r2, #0]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000044 	.word	0x20000044
 800359c:	20000050 	.word	0x20000050
 80035a0:	2000004c 	.word	0x2000004c
 80035a4:	20000058 	.word	0x20000058
 80035a8:	20000048 	.word	0x20000048
 80035ac:	20000054 	.word	0x20000054

080035b0 <blinkingLed>:

void blinkingLed(int mode){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	switch(mode){
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d033      	beq.n	8003626 <blinkingLed+0x76>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	dc45      	bgt.n	8003650 <blinkingLed+0xa0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d003      	beq.n	80035d2 <blinkingLed+0x22>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d015      	beq.n	80035fc <blinkingLed+0x4c>
			HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
			HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
			HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);

			break;
		default: break;
 80035d0:	e03e      	b.n	8003650 <blinkingLed+0xa0>
			HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 80035d2:	2201      	movs	r2, #1
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	4821      	ldr	r0, [pc, #132]	; (800365c <blinkingLed+0xac>)
 80035d8:	f000 fb99 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 80035dc:	2201      	movs	r2, #1
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	481f      	ldr	r0, [pc, #124]	; (8003660 <blinkingLed+0xb0>)
 80035e2:	f000 fb94 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 80035e6:	2201      	movs	r2, #1
 80035e8:	2120      	movs	r1, #32
 80035ea:	481c      	ldr	r0, [pc, #112]	; (800365c <blinkingLed+0xac>)
 80035ec:	f000 fb8f 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);//11 đỏ
 80035f0:	2201      	movs	r2, #1
 80035f2:	2108      	movs	r1, #8
 80035f4:	4819      	ldr	r0, [pc, #100]	; (800365c <blinkingLed+0xac>)
 80035f6:	f000 fb8a 	bl	8003d0e <HAL_GPIO_WritePin>
			break;
 80035fa:	e02a      	b.n	8003652 <blinkingLed+0xa2>
			HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 80035fc:	2201      	movs	r2, #1
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	4816      	ldr	r0, [pc, #88]	; (800365c <blinkingLed+0xac>)
 8003602:	f000 fb84 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8003606:	2200      	movs	r2, #0
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	4815      	ldr	r0, [pc, #84]	; (8003660 <blinkingLed+0xb0>)
 800360c:	f000 fb7f 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8003610:	2201      	movs	r2, #1
 8003612:	2120      	movs	r1, #32
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <blinkingLed+0xac>)
 8003616:	f000 fb7a 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);//01 vàng
 800361a:	2200      	movs	r2, #0
 800361c:	2108      	movs	r1, #8
 800361e:	480f      	ldr	r0, [pc, #60]	; (800365c <blinkingLed+0xac>)
 8003620:	f000 fb75 	bl	8003d0e <HAL_GPIO_WritePin>
			break;
 8003624:	e015      	b.n	8003652 <blinkingLed+0xa2>
			HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);//10 xanh
 8003626:	2200      	movs	r2, #0
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <blinkingLed+0xac>)
 800362c:	f000 fb6f 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8003630:	2201      	movs	r2, #1
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	480a      	ldr	r0, [pc, #40]	; (8003660 <blinkingLed+0xb0>)
 8003636:	f000 fb6a 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 800363a:	2200      	movs	r2, #0
 800363c:	2120      	movs	r1, #32
 800363e:	4807      	ldr	r0, [pc, #28]	; (800365c <blinkingLed+0xac>)
 8003640:	f000 fb65 	bl	8003d0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8003644:	2201      	movs	r2, #1
 8003646:	2108      	movs	r1, #8
 8003648:	4804      	ldr	r0, [pc, #16]	; (800365c <blinkingLed+0xac>)
 800364a:	f000 fb60 	bl	8003d0e <HAL_GPIO_WritePin>
			break;
 800364e:	e000      	b.n	8003652 <blinkingLed+0xa2>
		default: break;
 8003650:	bf00      	nop
	}
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40010c00 	.word	0x40010c00
 8003660:	40011000 	.word	0x40011000

08003664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003664:	f7ff fea4 	bl	80033b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003668:	480b      	ldr	r0, [pc, #44]	; (8003698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800366a:	490c      	ldr	r1, [pc, #48]	; (800369c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003670:	e002      	b.n	8003678 <LoopCopyDataInit>

08003672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003676:	3304      	adds	r3, #4

08003678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800367c:	d3f9      	bcc.n	8003672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003680:	4c09      	ldr	r4, [pc, #36]	; (80036a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003684:	e001      	b.n	800368a <LoopFillZerobss>

08003686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003688:	3204      	adds	r2, #4

0800368a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800368c:	d3fb      	bcc.n	8003686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368e:	f003 f933 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003692:	f7ff f91f 	bl	80028d4 <main>
  bx lr
 8003696:	4770      	bx	lr
  ldr r0, =_sdata
 8003698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800369c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80036a0:	08009e44 	.word	0x08009e44
  ldr r2, =_sbss
 80036a4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80036a8:	20000438 	.word	0x20000438

080036ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036ac:	e7fe      	b.n	80036ac <ADC1_2_IRQHandler>
	...

080036b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_Init+0x28>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_Init+0x28>)
 80036ba:	f043 0310 	orr.w	r3, r3, #16
 80036be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c0:	2003      	movs	r0, #3
 80036c2:	f000 f947 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f000 f808 	bl	80036dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036cc:	f7ff fc92 	bl	8002ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40022000 	.word	0x40022000

080036dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_InitTick+0x54>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_InitTick+0x58>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f95f 	bl	80039be <HAL_SYSTICK_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00e      	b.n	8003728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d80a      	bhi.n	8003726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003710:	2200      	movs	r2, #0
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f000 f927 	bl	800396a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <HAL_InitTick+0x5c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000074 	.word	0x20000074
 8003734:	2000007c 	.word	0x2000007c
 8003738:	20000078 	.word	0x20000078

0800373c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_IncTick+0x1c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_IncTick+0x20>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a03      	ldr	r2, [pc, #12]	; (800375c <HAL_IncTick+0x20>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	2000007c 	.word	0x2000007c
 800375c:	20000424 	.word	0x20000424

08003760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b02      	ldr	r3, [pc, #8]	; (8003770 <HAL_GetTick+0x10>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000424 	.word	0x20000424

08003774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7ff fff0 	bl	8003760 <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d005      	beq.n	800379a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_Delay+0x44>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800379a:	bf00      	nop
 800379c:	f7ff ffe0 	bl	8003760 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d8f7      	bhi.n	800379c <HAL_Delay+0x28>
  {
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000007c 	.word	0x2000007c

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <__NVIC_EnableIRQ+0x34>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d301      	bcc.n	8003926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003922:	2301      	movs	r3, #1
 8003924:	e00f      	b.n	8003946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SysTick_Config+0x40>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392e:	210f      	movs	r1, #15
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f7ff ff90 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x40>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x40>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff2d 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff42 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff90 	bl	80038ac <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5f 	bl	8003858 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff35 	bl	8003820 <__NVIC_EnableIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ffa2 	bl	8003910 <SysTick_Config>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b08b      	sub	sp, #44	; 0x2c
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ea:	e169      	b.n	8003cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039ec:	2201      	movs	r2, #1
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 8158 	bne.w	8003cba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a9a      	ldr	r2, [pc, #616]	; (8003c78 <HAL_GPIO_Init+0x2a0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d05e      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
 8003a14:	4a98      	ldr	r2, [pc, #608]	; (8003c78 <HAL_GPIO_Init+0x2a0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d875      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a1a:	4a98      	ldr	r2, [pc, #608]	; (8003c7c <HAL_GPIO_Init+0x2a4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d058      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
 8003a20:	4a96      	ldr	r2, [pc, #600]	; (8003c7c <HAL_GPIO_Init+0x2a4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d86f      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a26:	4a96      	ldr	r2, [pc, #600]	; (8003c80 <HAL_GPIO_Init+0x2a8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d052      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
 8003a2c:	4a94      	ldr	r2, [pc, #592]	; (8003c80 <HAL_GPIO_Init+0x2a8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d869      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a32:	4a94      	ldr	r2, [pc, #592]	; (8003c84 <HAL_GPIO_Init+0x2ac>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04c      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
 8003a38:	4a92      	ldr	r2, [pc, #584]	; (8003c84 <HAL_GPIO_Init+0x2ac>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d863      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a3e:	4a92      	ldr	r2, [pc, #584]	; (8003c88 <HAL_GPIO_Init+0x2b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d046      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
 8003a44:	4a90      	ldr	r2, [pc, #576]	; (8003c88 <HAL_GPIO_Init+0x2b0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d85d      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a4a:	2b12      	cmp	r3, #18
 8003a4c:	d82a      	bhi.n	8003aa4 <HAL_GPIO_Init+0xcc>
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d859      	bhi.n	8003b06 <HAL_GPIO_Init+0x12e>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_GPIO_Init+0x80>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003ad3 	.word	0x08003ad3
 8003a5c:	08003aad 	.word	0x08003aad
 8003a60:	08003abf 	.word	0x08003abf
 8003a64:	08003b01 	.word	0x08003b01
 8003a68:	08003b07 	.word	0x08003b07
 8003a6c:	08003b07 	.word	0x08003b07
 8003a70:	08003b07 	.word	0x08003b07
 8003a74:	08003b07 	.word	0x08003b07
 8003a78:	08003b07 	.word	0x08003b07
 8003a7c:	08003b07 	.word	0x08003b07
 8003a80:	08003b07 	.word	0x08003b07
 8003a84:	08003b07 	.word	0x08003b07
 8003a88:	08003b07 	.word	0x08003b07
 8003a8c:	08003b07 	.word	0x08003b07
 8003a90:	08003b07 	.word	0x08003b07
 8003a94:	08003b07 	.word	0x08003b07
 8003a98:	08003b07 	.word	0x08003b07
 8003a9c:	08003ab5 	.word	0x08003ab5
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	4a79      	ldr	r2, [pc, #484]	; (8003c8c <HAL_GPIO_Init+0x2b4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aaa:	e02c      	b.n	8003b06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	623b      	str	r3, [r7, #32]
          break;
 8003ab2:	e029      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	623b      	str	r3, [r7, #32]
          break;
 8003abc:	e024      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	623b      	str	r3, [r7, #32]
          break;
 8003ac6:	e01f      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	330c      	adds	r3, #12
 8003ace:	623b      	str	r3, [r7, #32]
          break;
 8003ad0:	e01a      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ada:	2304      	movs	r3, #4
 8003adc:	623b      	str	r3, [r7, #32]
          break;
 8003ade:	e013      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ae8:	2308      	movs	r3, #8
 8003aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	611a      	str	r2, [r3, #16]
          break;
 8003af2:	e009      	b.n	8003b08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af4:	2308      	movs	r3, #8
 8003af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	615a      	str	r2, [r3, #20]
          break;
 8003afe:	e003      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
          break;
 8003b04:	e000      	b.n	8003b08 <HAL_GPIO_Init+0x130>
          break;
 8003b06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2bff      	cmp	r3, #255	; 0xff
 8003b0c:	d801      	bhi.n	8003b12 <HAL_GPIO_Init+0x13a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	e001      	b.n	8003b16 <HAL_GPIO_Init+0x13e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2bff      	cmp	r3, #255	; 0xff
 8003b1c:	d802      	bhi.n	8003b24 <HAL_GPIO_Init+0x14c>
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	e002      	b.n	8003b2a <HAL_GPIO_Init+0x152>
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3b08      	subs	r3, #8
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	210f      	movs	r1, #15
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	6a39      	ldr	r1, [r7, #32]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	431a      	orrs	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80b1 	beq.w	8003cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b58:	4b4d      	ldr	r3, [pc, #308]	; (8003c90 <HAL_GPIO_Init+0x2b8>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	4a4c      	ldr	r2, [pc, #304]	; (8003c90 <HAL_GPIO_Init+0x2b8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6193      	str	r3, [r2, #24]
 8003b64:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_GPIO_Init+0x2b8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b70:	4a48      	ldr	r2, [pc, #288]	; (8003c94 <HAL_GPIO_Init+0x2bc>)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <HAL_GPIO_Init+0x2c0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_GPIO_Init+0x1ec>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <HAL_GPIO_Init+0x2c4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_GPIO_Init+0x1e8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3e      	ldr	r2, [pc, #248]	; (8003ca0 <HAL_GPIO_Init+0x2c8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d007      	beq.n	8003bbc <HAL_GPIO_Init+0x1e4>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3d      	ldr	r2, [pc, #244]	; (8003ca4 <HAL_GPIO_Init+0x2cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_GPIO_Init+0x1e0>
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <HAL_GPIO_Init+0x1ee>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	e004      	b.n	8003bc6 <HAL_GPIO_Init+0x1ee>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e002      	b.n	8003bc6 <HAL_GPIO_Init+0x1ee>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_GPIO_Init+0x1ee>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	f002 0203 	and.w	r2, r2, #3
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	4093      	lsls	r3, r2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bd6:	492f      	ldr	r1, [pc, #188]	; (8003c94 <HAL_GPIO_Init+0x2bc>)
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	492c      	ldr	r1, [pc, #176]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	4928      	ldr	r1, [pc, #160]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	4922      	ldr	r1, [pc, #136]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60cb      	str	r3, [r1, #12]
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	491e      	ldr	r1, [pc, #120]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4918      	ldr	r1, [pc, #96]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c4e:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	4914      	ldr	r1, [pc, #80]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d021      	beq.n	8003cac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	490e      	ldr	r1, [pc, #56]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e021      	b.n	8003cba <HAL_GPIO_Init+0x2e2>
 8003c76:	bf00      	nop
 8003c78:	10320000 	.word	0x10320000
 8003c7c:	10310000 	.word	0x10310000
 8003c80:	10220000 	.word	0x10220000
 8003c84:	10210000 	.word	0x10210000
 8003c88:	10120000 	.word	0x10120000
 8003c8c:	10110000 	.word	0x10110000
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40010800 	.word	0x40010800
 8003c9c:	40010c00 	.word	0x40010c00
 8003ca0:	40011000 	.word	0x40011000
 8003ca4:	40011400 	.word	0x40011400
 8003ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	4909      	ldr	r1, [pc, #36]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f47f ae8e 	bne.w	80039ec <HAL_GPIO_Init+0x14>
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	372c      	adds	r7, #44	; 0x2c
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e001      	b.n	8003d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	807b      	strh	r3, [r7, #2]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d1e:	787b      	ldrb	r3, [r7, #1]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d2a:	e003      	b.n	8003d34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	041a      	lsls	r2, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f806 	bl	8003d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40010400 	.word	0x40010400

08003d70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e12b      	b.n	8003fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff f954 	bl	8003058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de8:	f001 ff24 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a81      	ldr	r2, [pc, #516]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d807      	bhi.n	8003e08 <HAL_I2C_Init+0x84>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <HAL_I2C_Init+0x278>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf94      	ite	ls
 8003e00:	2301      	movls	r3, #1
 8003e02:	2300      	movhi	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e006      	b.n	8003e16 <HAL_I2C_Init+0x92>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a7d      	ldr	r2, [pc, #500]	; (8004000 <HAL_I2C_Init+0x27c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0e7      	b.n	8003fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a78      	ldr	r2, [pc, #480]	; (8004004 <HAL_I2C_Init+0x280>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d802      	bhi.n	8003e58 <HAL_I2C_Init+0xd4>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e009      	b.n	8003e6c <HAL_I2C_Init+0xe8>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	4a69      	ldr	r2, [pc, #420]	; (8004008 <HAL_I2C_Init+0x284>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	495c      	ldr	r1, [pc, #368]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	d819      	bhi.n	8003ec0 <HAL_I2C_Init+0x13c>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e59      	subs	r1, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ea0:	400b      	ands	r3, r1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_I2C_Init+0x138>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1e59      	subs	r1, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	e051      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	e04f      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d111      	bne.n	8003eec <HAL_I2C_Init+0x168>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	440b      	add	r3, r1
 8003ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e012      	b.n	8003f12 <HAL_I2C_Init+0x18e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	0099      	lsls	r1, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Init+0x196>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e022      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10e      	bne.n	8003f40 <HAL_I2C_Init+0x1bc>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1e58      	subs	r0, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	440b      	add	r3, r1
 8003f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	e00f      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	6809      	ldr	r1, [r1, #0]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6911      	ldr	r1, [r2, #16]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	000186a0 	.word	0x000186a0
 8003ffc:	001e847f 	.word	0x001e847f
 8004000:	003d08ff 	.word	0x003d08ff
 8004004:	431bde83 	.word	0x431bde83
 8004008:	10624dd3 	.word	0x10624dd3

0800400c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	461a      	mov	r2, r3
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	4613      	mov	r3, r2
 800401e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff fb9e 	bl	8003760 <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 80e0 	bne.w	80041f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2319      	movs	r3, #25
 800403a:	2201      	movs	r2, #1
 800403c:	4970      	ldr	r1, [pc, #448]	; (8004200 <HAL_I2C_Master_Transmit+0x1f4>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fffa 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	e0d3      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_Master_Transmit+0x50>
 8004058:	2302      	movs	r3, #2
 800405a:	e0cc      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2210      	movs	r2, #16
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	893a      	ldrh	r2, [r7, #8]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a50      	ldr	r2, [pc, #320]	; (8004204 <HAL_I2C_Master_Transmit+0x1f8>)
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040c4:	8979      	ldrh	r1, [r7, #10]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6a3a      	ldr	r2, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fd7c 	bl	8004bc8 <I2C_MasterRequestWrite>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e08d      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040f0:	e066      	b.n	80041c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f001 f8b8 	bl	800526c <I2C_WaitOnTXEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b04      	cmp	r3, #4
 8004108:	d107      	bne.n	800411a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06b      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d11b      	bne.n	8004194 <HAL_I2C_Master_Transmit+0x188>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d017      	beq.n	8004194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6a39      	ldr	r1, [r7, #32]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f001 f8af 	bl	80052fc <I2C_WaitOnBTFFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d107      	bne.n	80041bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e01a      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d194      	bne.n	80040f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000

08004208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	461a      	mov	r2, r3
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
 8004218:	4613      	mov	r3, r2
 800421a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004220:	f7ff fa9e 	bl	8003760 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	f040 824b 	bne.w	80046ca <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2319      	movs	r3, #25
 800423a:	2201      	movs	r2, #1
 800423c:	497f      	ldr	r1, [pc, #508]	; (800443c <HAL_I2C_Master_Receive+0x234>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fefa 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
 800424c:	e23e      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_I2C_Master_Receive+0x54>
 8004258:	2302      	movs	r3, #2
 800425a:	e237      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d007      	beq.n	8004282 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2222      	movs	r2, #34	; 0x22
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	893a      	ldrh	r2, [r7, #8]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a5f      	ldr	r2, [pc, #380]	; (8004440 <HAL_I2C_Master_Receive+0x238>)
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042c4:	8979      	ldrh	r1, [r7, #10]
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fcfe 	bl	8004ccc <I2C_MasterRequestRead>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1f8      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e1cc      	b.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b01      	cmp	r3, #1
 8004310:	d11e      	bne.n	8004350 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004322:	b672      	cpsid	i
}
 8004324:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800434c:	b662      	cpsie	i
}
 800434e:	e035      	b.n	80043bc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b02      	cmp	r3, #2
 8004356:	d11e      	bne.n	8004396 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004368:	b672      	cpsid	i
}
 800436a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004392:	b662      	cpsie	i
}
 8004394:	e012      	b.n	80043bc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043bc:	e172      	b.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	f200 811f 	bhi.w	8004606 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d123      	bne.n	8004418 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 ffd9 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e173      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004416:	e145      	b.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	2b02      	cmp	r3, #2
 800441e:	d152      	bne.n	80044c6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	4906      	ldr	r1, [pc, #24]	; (8004444 <HAL_I2C_Master_Receive+0x23c>)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fe04 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e148      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
 800443a:	bf00      	nop
 800443c:	00100002 	.word	0x00100002
 8004440:	ffff0000 	.word	0xffff0000
 8004444:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004448:	b672      	cpsid	i
}
 800444a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800448e:	b662      	cpsie	i
}
 8004490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c4:	e0ee      	b.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	4981      	ldr	r1, [pc, #516]	; (80046d4 <HAL_I2C_Master_Receive+0x4cc>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fdb1 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0f5      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044f0:	b672      	cpsid	i
}
 80044f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_I2C_Master_Receive+0x4d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	4a6b      	ldr	r2, [pc, #428]	; (80046dc <HAL_I2C_Master_Receive+0x4d4>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0a1a      	lsrs	r2, r3, #8
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00da      	lsls	r2, r3, #3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	3b01      	subs	r3, #1
 8004544:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d118      	bne.n	800457e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800456e:	b662      	cpsie	i
}
 8004570:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0a6      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b04      	cmp	r3, #4
 800458a:	d1d9      	bne.n	8004540 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045ce:	b662      	cpsie	i
}
 80045d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004604:	e04e      	b.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 febe 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e058      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d124      	bne.n	80046a4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	2b03      	cmp	r3, #3
 8004660:	d107      	bne.n	8004672 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004670:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f ae88 	bne.w	80043be <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3728      	adds	r7, #40	; 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	00010004 	.word	0x00010004
 80046d8:	20000074 	.word	0x20000074
 80046dc:	14f8b589 	.word	0x14f8b589

080046e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08c      	sub	sp, #48	; 0x30
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	817b      	strh	r3, [r7, #10]
 80046f2:	460b      	mov	r3, r1
 80046f4:	813b      	strh	r3, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7ff f82f 	bl	8003760 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8250 	bne.w	8004bb2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	4982      	ldr	r1, [pc, #520]	; (8004924 <HAL_I2C_Mem_Read+0x244>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fc8b 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e243      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Read+0x5a>
 8004736:	2302      	movs	r3, #2
 8004738:	e23c      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a62      	ldr	r2, [pc, #392]	; (8004928 <HAL_I2C_Mem_Read+0x248>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb58 	bl	8004e68 <I2C_RequestMemoryRead>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1f8      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e1cc      	b.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11e      	bne.n	8004838 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800480a:	b672      	cpsid	i
}
 800480c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004834:	b662      	cpsie	i
}
 8004836:	e035      	b.n	80048a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	2b02      	cmp	r3, #2
 800483e:	d11e      	bne.n	800487e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004850:	b672      	cpsid	i
}
 8004852:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800487a:	b662      	cpsie	i
}
 800487c:	e012      	b.n	80048a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048a4:	e172      	b.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	f200 811f 	bhi.w	8004aee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d123      	bne.n	8004900 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fd65 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e173      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fe:	e145      	b.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b02      	cmp	r3, #2
 8004906:	d152      	bne.n	80049ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	2200      	movs	r2, #0
 8004910:	4906      	ldr	r1, [pc, #24]	; (800492c <HAL_I2C_Mem_Read+0x24c>)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb90 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e148      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
 8004922:	bf00      	nop
 8004924:	00100002 	.word	0x00100002
 8004928:	ffff0000 	.word	0xffff0000
 800492c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004930:	b672      	cpsid	i
}
 8004932:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004976:	b662      	cpsie	i
}
 8004978:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ac:	e0ee      	b.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2200      	movs	r2, #0
 80049b6:	4981      	ldr	r1, [pc, #516]	; (8004bbc <HAL_I2C_Mem_Read+0x4dc>)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fb3d 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0f5      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049d8:	b672      	cpsid	i
}
 80049da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	; (8004bc0 <HAL_I2C_Mem_Read+0x4e0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	08db      	lsrs	r3, r3, #3
 8004a14:	4a6b      	ldr	r2, [pc, #428]	; (8004bc4 <HAL_I2C_Mem_Read+0x4e4>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0a1a      	lsrs	r2, r3, #8
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d118      	bne.n	8004a66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a56:	b662      	cpsie	i
}
 8004a58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0a6      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d1d9      	bne.n	8004a28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab6:	b662      	cpsie	i
}
 8004ab8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aec:	e04e      	b.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fc4a 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e058      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d124      	bne.n	8004b8c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d107      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f47f ae88 	bne.w	80048a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	00010004 	.word	0x00010004
 8004bc0:	20000074 	.word	0x20000074
 8004bc4:	14f8b589 	.word	0x14f8b589

08004bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d006      	beq.n	8004bf2 <I2C_MasterRequestWrite+0x2a>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <I2C_MasterRequestWrite+0x2a>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf0:	d108      	bne.n	8004c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e00b      	b.n	8004c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	2b12      	cmp	r3, #18
 8004c0a:	d107      	bne.n	8004c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa05 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c42:	d103      	bne.n	8004c4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e035      	b.n	8004cbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c58:	d108      	bne.n	8004c6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c68:	611a      	str	r2, [r3, #16]
 8004c6a:	e01b      	b.n	8004ca4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c6c:	897b      	ldrh	r3, [r7, #10]
 8004c6e:	11db      	asrs	r3, r3, #7
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f003 0306 	and.w	r3, r3, #6
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f063 030f 	orn	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	490e      	ldr	r1, [pc, #56]	; (8004cc4 <I2C_MasterRequestWrite+0xfc>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa4e 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e010      	b.n	8004cbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c9a:	897b      	ldrh	r3, [r7, #10]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <I2C_MasterRequestWrite+0x100>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fa3e 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	00010008 	.word	0x00010008
 8004cc8:	00010002 	.word	0x00010002

08004ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d006      	beq.n	8004d06 <I2C_MasterRequestRead+0x3a>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <I2C_MasterRequestRead+0x3a>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d04:	d108      	bne.n	8004d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e00b      	b.n	8004d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	2b11      	cmp	r3, #17
 8004d1e:	d107      	bne.n	8004d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f97b 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e079      	b.n	8004e58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6c:	d108      	bne.n	8004d80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d6e:	897b      	ldrh	r3, [r7, #10]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e05f      	b.n	8004e40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	11db      	asrs	r3, r3, #7
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0306 	and.w	r3, r3, #6
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f063 030f 	orn	r3, r3, #15
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4930      	ldr	r1, [pc, #192]	; (8004e60 <I2C_MasterRequestRead+0x194>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f9c4 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e054      	b.n	8004e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4929      	ldr	r1, [pc, #164]	; (8004e64 <I2C_MasterRequestRead+0x198>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f9b4 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e044      	b.n	8004e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f919 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	d103      	bne.n	8004e24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e017      	b.n	8004e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e28:	897b      	ldrh	r3, [r7, #10]
 8004e2a:	11db      	asrs	r3, r3, #7
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 0306 	and.w	r3, r3, #6
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f063 030e 	orn	r3, r3, #14
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4907      	ldr	r1, [pc, #28]	; (8004e64 <I2C_MasterRequestRead+0x198>)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f970 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	00010008 	.word	0x00010008
 8004e64:	00010002 	.word	0x00010002

08004e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	813b      	strh	r3, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f8c2 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec8:	d103      	bne.n	8004ed2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0aa      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	4952      	ldr	r1, [pc, #328]	; (8005034 <I2C_RequestMemoryRead+0x1cc>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f91d 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e097      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f9a8 	bl	800526c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d107      	bne.n	8004f3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e076      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	e021      	b.n	8004f94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f982 	bl	800526c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e050      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8a:	893b      	ldrh	r3, [r7, #8]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f96:	6a39      	ldr	r1, [r7, #32]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f967 	bl	800526c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d107      	bne.n	8004fbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e035      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f82b 	bl	8005038 <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d103      	bne.n	8005000 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e013      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005004:	897b      	ldrh	r3, [r7, #10]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	b2da      	uxtb	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	4906      	ldr	r1, [pc, #24]	; (8005034 <I2C_RequestMemoryRead+0x1cc>)
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f886 	bl	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	00010002 	.word	0x00010002

08005038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005048:	e048      	b.n	80050dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d044      	beq.n	80050dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fe fb85 	bl	8003760 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d139      	bne.n	80050dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	43da      	mvns	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	e00c      	b.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	43da      	mvns	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d116      	bne.n	80050dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e023      	b.n	8005124 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10d      	bne.n	8005102 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	43da      	mvns	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	e00c      	b.n	800511c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	43da      	mvns	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	429a      	cmp	r2, r3
 8005120:	d093      	beq.n	800504a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800513a:	e071      	b.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514a:	d123      	bne.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f043 0204 	orr.w	r2, r3, #4
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e067      	b.n	8005264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d041      	beq.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fe fae0 	bl	8003760 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d136      	bne.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10c      	bne.n	80051d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4013      	ands	r3, r2
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	e00b      	b.n	80051ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e021      	b.n	8005264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10c      	bne.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	43da      	mvns	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e00b      	b.n	800525c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	43da      	mvns	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af6d 	bne.w	800513c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005278:	e034      	b.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f8e3 	bl	8005446 <I2C_IsAcknowledgeFailed>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e034      	b.n	80052f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d028      	beq.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fe fa65 	bl	8003760 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11d      	bne.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d016      	beq.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e007      	b.n	80052f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d1c3      	bne.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005308:	e034      	b.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f89b 	bl	8005446 <I2C_IsAcknowledgeFailed>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e034      	b.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d028      	beq.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fe fa1d 	bl	8003760 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11d      	bne.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d016      	beq.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e007      	b.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b04      	cmp	r3, #4
 8005380:	d1c3      	bne.n	800530a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005398:	e049      	b.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d119      	bne.n	80053dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0210 	mvn.w	r2, #16
 80053b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e030      	b.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fe f9c0 	bl	8003760 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11d      	bne.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d016      	beq.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e007      	b.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d1ae      	bne.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d11b      	bne.n	8005496 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005466:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e26c      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8087 	beq.w	80055d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054c4:	4b92      	ldr	r3, [pc, #584]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d00c      	beq.n	80054ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054d0:	4b8f      	ldr	r3, [pc, #572]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d112      	bne.n	8005502 <HAL_RCC_OscConfig+0x5e>
 80054dc:	4b8c      	ldr	r3, [pc, #560]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e8:	d10b      	bne.n	8005502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ea:	4b89      	ldr	r3, [pc, #548]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d06c      	beq.n	80055d0 <HAL_RCC_OscConfig+0x12c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d168      	bne.n	80055d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e246      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x76>
 800550c:	4b80      	ldr	r3, [pc, #512]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a7f      	ldr	r2, [pc, #508]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e02e      	b.n	8005578 <HAL_RCC_OscConfig+0xd4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0x98>
 8005522:	4b7b      	ldr	r3, [pc, #492]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7a      	ldr	r2, [pc, #488]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b78      	ldr	r3, [pc, #480]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a77      	ldr	r2, [pc, #476]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e01d      	b.n	8005578 <HAL_RCC_OscConfig+0xd4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0xbc>
 8005546:	4b72      	ldr	r3, [pc, #456]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a71      	ldr	r2, [pc, #452]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800554c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6e      	ldr	r2, [pc, #440]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0xd4>
 8005560:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6a      	ldr	r2, [pc, #424]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a67      	ldr	r2, [pc, #412]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fe f8ee 	bl	8003760 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005588:	f7fe f8ea 	bl	8003760 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e1fa      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0xe4>
 80055a6:	e014      	b.n	80055d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe f8da 	bl	8003760 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fe f8d6 	bl	8003760 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1e6      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x10c>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d063      	beq.n	80056a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055de:	4b4c      	ldr	r3, [pc, #304]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055ea:	4b49      	ldr	r3, [pc, #292]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d11c      	bne.n	8005630 <HAL_RCC_OscConfig+0x18c>
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d116      	bne.n	8005630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005602:	4b43      	ldr	r3, [pc, #268]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x176>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d001      	beq.n	800561a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e1ba      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	4b3d      	ldr	r3, [pc, #244]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4939      	ldr	r1, [pc, #228]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	e03a      	b.n	80056a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <HAL_RCC_OscConfig+0x270>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563e:	f7fe f88f 	bl	8003760 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005646:	f7fe f88b 	bl	8003760 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e19b      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005664:	4b2a      	ldr	r3, [pc, #168]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4927      	ldr	r1, [pc, #156]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	e015      	b.n	80056a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <HAL_RCC_OscConfig+0x270>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fe f86e 	bl	8003760 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005688:	f7fe f86a 	bl	8003760 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e17a      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03a      	beq.n	8005728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ba:	4b17      	ldr	r3, [pc, #92]	; (8005718 <HAL_RCC_OscConfig+0x274>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c0:	f7fe f84e 	bl	8003760 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fe f84a 	bl	8003760 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e15a      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056e6:	2001      	movs	r0, #1
 80056e8:	f000 facc 	bl	8005c84 <RCC_Delay>
 80056ec:	e01c      	b.n	8005728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_RCC_OscConfig+0x274>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f4:	f7fe f834 	bl	8003760 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fa:	e00f      	b.n	800571c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fe f830 	bl	8003760 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d908      	bls.n	800571c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e140      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	42420000 	.word	0x42420000
 8005718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	4b9e      	ldr	r3, [pc, #632]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e9      	bne.n	80056fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a6 	beq.w	8005882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573a:	4b97      	ldr	r3, [pc, #604]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	4b94      	ldr	r3, [pc, #592]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4a93      	ldr	r2, [pc, #588]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	61d3      	str	r3, [r2, #28]
 8005752:	4b91      	ldr	r3, [pc, #580]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005762:	4b8e      	ldr	r3, [pc, #568]	; (800599c <HAL_RCC_OscConfig+0x4f8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d118      	bne.n	80057a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576e:	4b8b      	ldr	r3, [pc, #556]	; (800599c <HAL_RCC_OscConfig+0x4f8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a8a      	ldr	r2, [pc, #552]	; (800599c <HAL_RCC_OscConfig+0x4f8>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577a:	f7fd fff1 	bl	8003760 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005782:	f7fd ffed 	bl	8003760 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b64      	cmp	r3, #100	; 0x64
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e0fd      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_RCC_OscConfig+0x4f8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x312>
 80057a8:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	4a7a      	ldr	r2, [pc, #488]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6213      	str	r3, [r2, #32]
 80057b4:	e02d      	b.n	8005812 <HAL_RCC_OscConfig+0x36e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x334>
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4a75      	ldr	r2, [pc, #468]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	6213      	str	r3, [r2, #32]
 80057ca:	4b73      	ldr	r3, [pc, #460]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4a72      	ldr	r2, [pc, #456]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	6213      	str	r3, [r2, #32]
 80057d6:	e01c      	b.n	8005812 <HAL_RCC_OscConfig+0x36e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b05      	cmp	r3, #5
 80057de:	d10c      	bne.n	80057fa <HAL_RCC_OscConfig+0x356>
 80057e0:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	4a6c      	ldr	r2, [pc, #432]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057e6:	f043 0304 	orr.w	r3, r3, #4
 80057ea:	6213      	str	r3, [r2, #32]
 80057ec:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	4a69      	ldr	r2, [pc, #420]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6213      	str	r3, [r2, #32]
 80057f8:	e00b      	b.n	8005812 <HAL_RCC_OscConfig+0x36e>
 80057fa:	4b67      	ldr	r3, [pc, #412]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	4a66      	ldr	r2, [pc, #408]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	6213      	str	r3, [r2, #32]
 8005806:	4b64      	ldr	r3, [pc, #400]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	4a63      	ldr	r2, [pc, #396]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d015      	beq.n	8005846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581a:	f7fd ffa1 	bl	8003760 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fd ff9d 	bl	8003760 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0ab      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005838:	4b57      	ldr	r3, [pc, #348]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ee      	beq.n	8005822 <HAL_RCC_OscConfig+0x37e>
 8005844:	e014      	b.n	8005870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fd ff8b 	bl	8003760 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fd ff87 	bl	8003760 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e095      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005864:	4b4c      	ldr	r3, [pc, #304]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ee      	bne.n	800584e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d105      	bne.n	8005882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005876:	4b48      	ldr	r3, [pc, #288]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	4a47      	ldr	r2, [pc, #284]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8081 	beq.w	800598e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b08      	cmp	r3, #8
 8005896:	d061      	beq.n	800595c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d146      	bne.n	800592e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <HAL_RCC_OscConfig+0x4fc>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a6:	f7fd ff5b 	bl	8003760 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ae:	f7fd ff57 	bl	8003760 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e067      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d108      	bne.n	80058e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	492d      	ldr	r1, [pc, #180]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a19      	ldr	r1, [r3, #32]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	430b      	orrs	r3, r1
 80058fa:	4927      	ldr	r1, [pc, #156]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005900:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <HAL_RCC_OscConfig+0x4fc>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fd ff2b 	bl	8003760 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fd ff27 	bl	8003760 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e037      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x46a>
 800592c:	e02f      	b.n	800598e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592e:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <HAL_RCC_OscConfig+0x4fc>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005934:	f7fd ff14 	bl	8003760 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fd ff10 	bl	8003760 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e020      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x498>
 800595a:	e018      	b.n	800598e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e013      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_OscConfig+0x4f4>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	429a      	cmp	r2, r3
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	40007000 	.word	0x40007000
 80059a0:	42420060 	.word	0x42420060

080059a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0d0      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b67      	ldr	r3, [pc, #412]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 0207 	bic.w	r2, r3, #7
 80059ce:	4965      	ldr	r1, [pc, #404]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b63      	ldr	r3, [pc, #396]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0b8      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d020      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a00:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a58      	ldr	r2, [pc, #352]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a18:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a52      	ldr	r2, [pc, #328]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a24:	4b50      	ldr	r3, [pc, #320]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	494d      	ldr	r1, [pc, #308]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d040      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d107      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b47      	ldr	r3, [pc, #284]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d115      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e07f      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d107      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a62:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e073      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a72:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06b      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a82:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f023 0203 	bic.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4936      	ldr	r1, [pc, #216]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a94:	f7fd fe64 	bl	8003760 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fd fe60 	bl	8003760 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e053      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	4b2d      	ldr	r3, [pc, #180]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 020c 	and.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1eb      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d210      	bcs.n	8005af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 0207 	bic.w	r2, r3, #7
 8005ada:	4922      	ldr	r1, [pc, #136]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e032      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4916      	ldr	r1, [pc, #88]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	490e      	ldr	r1, [pc, #56]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b32:	f000 f821 	bl	8005b78 <HAL_RCC_GetSysClockFreq>
 8005b36:	4602      	mov	r2, r0
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	490a      	ldr	r1, [pc, #40]	; (8005b6c <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	5ccb      	ldrb	r3, [r1, r3]
 8005b46:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <HAL_RCC_ClockConfig+0x1cc>)
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x1d0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fd fdc2 	bl	80036dc <HAL_InitTick>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40022000 	.word	0x40022000
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	08009a30 	.word	0x08009a30
 8005b70:	20000074 	.word	0x20000074
 8005b74:	20000078 	.word	0x20000078

08005b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d002      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d003      	beq.n	8005bae <HAL_RCC_GetSysClockFreq+0x36>
 8005ba6:	e027      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8005baa:	613b      	str	r3, [r7, #16]
      break;
 8005bac:	e027      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	0c9b      	lsrs	r3, r3, #18
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005bb8:	5cd3      	ldrb	r3, [r2, r3]
 8005bba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	0c5b      	lsrs	r3, r3, #17
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005bd2:	5cd3      	ldrb	r3, [r2, r3]
 8005bd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bda:	fb02 f203 	mul.w	r2, r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e004      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	613b      	str	r3, [r7, #16]
      break;
 8005bf6:	e002      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bfa:	613b      	str	r3, [r7, #16]
      break;
 8005bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfe:	693b      	ldr	r3, [r7, #16]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	007a1200 	.word	0x007a1200
 8005c14:	08009a48 	.word	0x08009a48
 8005c18:	08009a58 	.word	0x08009a58
 8005c1c:	003d0900 	.word	0x003d0900

08005c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c24:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c26:	681b      	ldr	r3, [r3, #0]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	20000074 	.word	0x20000074

08005c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c38:	f7ff fff2 	bl	8005c20 <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4903      	ldr	r1, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000
 8005c58:	08009a40 	.word	0x08009a40

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c60:	f7ff ffde 	bl	8005c20 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	0adb      	lsrs	r3, r3, #11
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	08009a40 	.word	0x08009a40

08005c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <RCC_Delay+0x34>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <RCC_Delay+0x38>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	0a5b      	lsrs	r3, r3, #9
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ca0:	bf00      	nop
  }
  while (Delay --);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f9      	bne.n	8005ca0 <RCC_Delay+0x1c>
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	20000074 	.word	0x20000074
 8005cbc:	10624dd3 	.word	0x10624dd3

08005cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e041      	b.n	8005d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fd fa06 	bl	80030f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f000 fa5c 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d001      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e03a      	b.n	8005dee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <HAL_TIM_Base_Start_IT+0x98>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x58>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d009      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x58>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <HAL_TIM_Base_Start_IT+0x9c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x58>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <HAL_TIM_Base_Start_IT+0xa0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d111      	bne.n	8005ddc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b06      	cmp	r3, #6
 8005dc8:	d010      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	e007      	b.n	8005dec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800

08005e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d020      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0202 	mvn.w	r2, #2
 8005e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f998 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f98b 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f99a 	bl	8006196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01b      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0204 	mvn.w	r2, #4
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f972 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f965 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f974 	bl	8006196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d020      	beq.n	8005f00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0208 	mvn.w	r2, #8
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f94c 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f93f 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f94e 	bl	8006196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0210 	mvn.w	r2, #16
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2208      	movs	r2, #8
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f926 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f919 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f928 	bl	8006196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0201 	mvn.w	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fc fe80 	bl	8002c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa7f 	bl	8006492 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8f8 	bl	80061a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0220 	mvn.w	r2, #32
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa52 	bl	8006480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_TIM_ConfigClockSource+0x1c>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0b4      	b.n	800616a <HAL_TIM_ConfigClockSource+0x186>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800601e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006038:	d03e      	beq.n	80060b8 <HAL_TIM_ConfigClockSource+0xd4>
 800603a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603e:	f200 8087 	bhi.w	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	f000 8086 	beq.w	8006156 <HAL_TIM_ConfigClockSource+0x172>
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d87f      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006050:	2b70      	cmp	r3, #112	; 0x70
 8006052:	d01a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0xa6>
 8006054:	2b70      	cmp	r3, #112	; 0x70
 8006056:	d87b      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	2b60      	cmp	r3, #96	; 0x60
 800605a:	d050      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x11a>
 800605c:	2b60      	cmp	r3, #96	; 0x60
 800605e:	d877      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b50      	cmp	r3, #80	; 0x50
 8006062:	d03c      	beq.n	80060de <HAL_TIM_ConfigClockSource+0xfa>
 8006064:	2b50      	cmp	r3, #80	; 0x50
 8006066:	d873      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d058      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x13a>
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d86f      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b30      	cmp	r3, #48	; 0x30
 8006072:	d064      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d86b      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b20      	cmp	r3, #32
 800607a:	d060      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x15a>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d867      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d05c      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x15a>
 8006084:	2b10      	cmp	r3, #16
 8006086:	d05a      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	e062      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6899      	ldr	r1, [r3, #8]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f000 f974 	bl	8006386 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	609a      	str	r2, [r3, #8]
      break;
 80060b6:	e04f      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6899      	ldr	r1, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f000 f95d 	bl	8006386 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060da:	609a      	str	r2, [r3, #8]
      break;
 80060dc:	e03c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f000 f8d4 	bl	8006298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2150      	movs	r1, #80	; 0x50
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f92b 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060fc:	e02c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	461a      	mov	r2, r3
 800610c:	f000 f8f2 	bl	80062f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2160      	movs	r1, #96	; 0x60
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f91b 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 800611c:	e01c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 f8b4 	bl	8006298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2140      	movs	r1, #64	; 0x40
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f90b 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 800613c:	e00c      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f000 f902 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 800614e:	e003      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e000      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
	...

080061bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2f      	ldr	r2, [pc, #188]	; (800628c <TIM_Base_SetConfig+0xd0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0x30>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0x30>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <TIM_Base_SetConfig+0xd4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0x30>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_Base_SetConfig+0xd8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a22      	ldr	r2, [pc, #136]	; (800628c <TIM_Base_SetConfig+0xd0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_Base_SetConfig+0x62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d007      	beq.n	800621e <TIM_Base_SetConfig+0x62>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <TIM_Base_SetConfig+0xd4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0x62>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <TIM_Base_SetConfig+0xd8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0d      	ldr	r2, [pc, #52]	; (800628c <TIM_Base_SetConfig+0xd0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d103      	bne.n	8006264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f023 0201 	bic.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]
  }
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800

08006298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f023 030a 	bic.w	r3, r3, #10
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0210 	bic.w	r2, r3, #16
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	031b      	lsls	r3, r3, #12
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006330:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	621a      	str	r2, [r3, #32]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	021a      	lsls	r2, r3, #8
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	609a      	str	r2, [r3, #8]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d8:	2302      	movs	r3, #2
 80063da:	e046      	b.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a16      	ldr	r2, [pc, #88]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d009      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a10      	ldr	r2, [pc, #64]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10c      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800

08006480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e042      	b.n	800653c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fc fe38 	bl	8003140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f971 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800651c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b20      	cmp	r3, #32
 8006562:	d175      	bne.n	8006650 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_UART_Transmit+0x2c>
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e06e      	b.n	8006652 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2221      	movs	r2, #33	; 0x21
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006582:	f7fd f8ed 	bl	8003760 <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659c:	d108      	bne.n	80065b0 <HAL_UART_Transmit+0x6c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e003      	b.n	80065b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065b8:	e02e      	b.n	8006618 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f848 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e03a      	b.n	8006652 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	3302      	adds	r3, #2
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e007      	b.n	800660a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3301      	adds	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1cb      	bne.n	80065ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2140      	movs	r1, #64	; 0x40
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f814 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e006      	b.n	8006652 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e000      	b.n	8006652 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006650:	2302      	movs	r3, #2
  }
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	e03b      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d037      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006674:	f7fd f874 	bl	8003760 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <UART_WaitOnFlagUntilTimeout+0x30>
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e03a      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d023      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b80      	cmp	r3, #128	; 0x80
 80066a0:	d020      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d01d      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d116      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f81d 	bl	800670c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2208      	movs	r2, #8
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e00f      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d0b4      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b095      	sub	sp, #84	; 0x54
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006734:	643a      	str	r2, [r7, #64]	; 0x40
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	61fb      	str	r3, [r7, #28]
   return(result);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d119      	bne.n	80067b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60bb      	str	r3, [r7, #8]
   return(result);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	647b      	str	r3, [r7, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067a4:	61ba      	str	r2, [r7, #24]
 80067a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067c6:	bf00      	nop
 80067c8:	3754      	adds	r7, #84	; 0x54
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800680a:	f023 030c 	bic.w	r3, r3, #12
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	430b      	orrs	r3, r1
 8006816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <UART_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d103      	bne.n	8006840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7ff fa10 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	e002      	b.n	8006846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7ff f9f8 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009a      	lsls	r2, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <UART_SetConfig+0x118>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	0119      	lsls	r1, r3, #4
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009a      	lsls	r2, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	fbb2 f2f3 	udiv	r2, r2, r3
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <UART_SetConfig+0x118>)
 800687e:	fba3 0302 	umull	r0, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2064      	movs	r0, #100	; 0x64
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	3332      	adds	r3, #50	; 0x32
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <UART_SetConfig+0x118>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800689c:	4419      	add	r1, r3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <UART_SetConfig+0x118>)
 80068b6:	fba3 0302 	umull	r0, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	fb00 f303 	mul.w	r3, r0, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <UART_SetConfig+0x118>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	440a      	add	r2, r1
 80068da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40013800 	.word	0x40013800
 80068e8:	51eb851f 	.word	0x51eb851f

080068ec <__errno>:
 80068ec:	4b01      	ldr	r3, [pc, #4]	; (80068f4 <__errno+0x8>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000080 	.word	0x20000080

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	2600      	movs	r6, #0
 80068fc:	4d0c      	ldr	r5, [pc, #48]	; (8006930 <__libc_init_array+0x38>)
 80068fe:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	f002 ff86 	bl	8009818 <_init>
 800690c:	2600      	movs	r6, #0
 800690e:	4d0a      	ldr	r5, [pc, #40]	; (8006938 <__libc_init_array+0x40>)
 8006910:	4c0a      	ldr	r4, [pc, #40]	; (800693c <__libc_init_array+0x44>)
 8006912:	1b64      	subs	r4, r4, r5
 8006914:	10a4      	asrs	r4, r4, #2
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	08009e3c 	.word	0x08009e3c
 8006934:	08009e3c 	.word	0x08009e3c
 8006938:	08009e3c 	.word	0x08009e3c
 800693c:	08009e40 	.word	0x08009e40

08006940 <malloc>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <malloc+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f000 b85f 	b.w	8006a08 <_malloc_r>
 800694a:	bf00      	nop
 800694c:	20000080 	.word	0x20000080

08006950 <free>:
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <free+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 b80b 	b.w	8006970 <_free_r>
 800695a:	bf00      	nop
 800695c:	20000080 	.word	0x20000080

08006960 <memset>:
 8006960:	4603      	mov	r3, r0
 8006962:	4402      	add	r2, r0
 8006964:	4293      	cmp	r3, r2
 8006966:	d100      	bne.n	800696a <memset+0xa>
 8006968:	4770      	bx	lr
 800696a:	f803 1b01 	strb.w	r1, [r3], #1
 800696e:	e7f9      	b.n	8006964 <memset+0x4>

08006970 <_free_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	d043      	beq.n	8006a00 <_free_r+0x90>
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f0c      	subs	r4, r1, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	18e4      	addlt	r4, r4, r3
 8006984:	f001 ff6a 	bl	800885c <__malloc_lock>
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <_free_r+0x94>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	4610      	mov	r0, r2
 800698e:	b933      	cbnz	r3, 800699e <_free_r+0x2e>
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	6014      	str	r4, [r2, #0]
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800699a:	f001 bf65 	b.w	8008868 <__malloc_unlock>
 800699e:	42a3      	cmp	r3, r4
 80069a0:	d90a      	bls.n	80069b8 <_free_r+0x48>
 80069a2:	6821      	ldr	r1, [r4, #0]
 80069a4:	1862      	adds	r2, r4, r1
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bf01      	itttt	eq
 80069aa:	681a      	ldreq	r2, [r3, #0]
 80069ac:	685b      	ldreq	r3, [r3, #4]
 80069ae:	1852      	addeq	r2, r2, r1
 80069b0:	6022      	streq	r2, [r4, #0]
 80069b2:	6063      	str	r3, [r4, #4]
 80069b4:	6004      	str	r4, [r0, #0]
 80069b6:	e7ed      	b.n	8006994 <_free_r+0x24>
 80069b8:	461a      	mov	r2, r3
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b10b      	cbz	r3, 80069c2 <_free_r+0x52>
 80069be:	42a3      	cmp	r3, r4
 80069c0:	d9fa      	bls.n	80069b8 <_free_r+0x48>
 80069c2:	6811      	ldr	r1, [r2, #0]
 80069c4:	1850      	adds	r0, r2, r1
 80069c6:	42a0      	cmp	r0, r4
 80069c8:	d10b      	bne.n	80069e2 <_free_r+0x72>
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	4401      	add	r1, r0
 80069ce:	1850      	adds	r0, r2, r1
 80069d0:	4283      	cmp	r3, r0
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	d1de      	bne.n	8006994 <_free_r+0x24>
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4401      	add	r1, r0
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	6053      	str	r3, [r2, #4]
 80069e0:	e7d8      	b.n	8006994 <_free_r+0x24>
 80069e2:	d902      	bls.n	80069ea <_free_r+0x7a>
 80069e4:	230c      	movs	r3, #12
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	e7d4      	b.n	8006994 <_free_r+0x24>
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1821      	adds	r1, r4, r0
 80069ee:	428b      	cmp	r3, r1
 80069f0:	bf01      	itttt	eq
 80069f2:	6819      	ldreq	r1, [r3, #0]
 80069f4:	685b      	ldreq	r3, [r3, #4]
 80069f6:	1809      	addeq	r1, r1, r0
 80069f8:	6021      	streq	r1, [r4, #0]
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	6054      	str	r4, [r2, #4]
 80069fe:	e7c9      	b.n	8006994 <_free_r+0x24>
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	bf00      	nop
 8006a04:	200002fc 	.word	0x200002fc

08006a08 <_malloc_r>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	1ccd      	adds	r5, r1, #3
 8006a0c:	f025 0503 	bic.w	r5, r5, #3
 8006a10:	3508      	adds	r5, #8
 8006a12:	2d0c      	cmp	r5, #12
 8006a14:	bf38      	it	cc
 8006a16:	250c      	movcc	r5, #12
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	db01      	blt.n	8006a22 <_malloc_r+0x1a>
 8006a1e:	42a9      	cmp	r1, r5
 8006a20:	d903      	bls.n	8006a2a <_malloc_r+0x22>
 8006a22:	230c      	movs	r3, #12
 8006a24:	6033      	str	r3, [r6, #0]
 8006a26:	2000      	movs	r0, #0
 8006a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a2a:	f001 ff17 	bl	800885c <__malloc_lock>
 8006a2e:	4921      	ldr	r1, [pc, #132]	; (8006ab4 <_malloc_r+0xac>)
 8006a30:	680a      	ldr	r2, [r1, #0]
 8006a32:	4614      	mov	r4, r2
 8006a34:	b99c      	cbnz	r4, 8006a5e <_malloc_r+0x56>
 8006a36:	4f20      	ldr	r7, [pc, #128]	; (8006ab8 <_malloc_r+0xb0>)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	b923      	cbnz	r3, 8006a46 <_malloc_r+0x3e>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f000 fd2a 	bl	8007498 <_sbrk_r>
 8006a44:	6038      	str	r0, [r7, #0]
 8006a46:	4629      	mov	r1, r5
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f000 fd25 	bl	8007498 <_sbrk_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d123      	bne.n	8006a9a <_malloc_r+0x92>
 8006a52:	230c      	movs	r3, #12
 8006a54:	4630      	mov	r0, r6
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f001 ff06 	bl	8008868 <__malloc_unlock>
 8006a5c:	e7e3      	b.n	8006a26 <_malloc_r+0x1e>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1b5b      	subs	r3, r3, r5
 8006a62:	d417      	bmi.n	8006a94 <_malloc_r+0x8c>
 8006a64:	2b0b      	cmp	r3, #11
 8006a66:	d903      	bls.n	8006a70 <_malloc_r+0x68>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	441c      	add	r4, r3
 8006a6c:	6025      	str	r5, [r4, #0]
 8006a6e:	e004      	b.n	8006a7a <_malloc_r+0x72>
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	42a2      	cmp	r2, r4
 8006a74:	bf0c      	ite	eq
 8006a76:	600b      	streq	r3, [r1, #0]
 8006a78:	6053      	strne	r3, [r2, #4]
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f001 fef4 	bl	8008868 <__malloc_unlock>
 8006a80:	f104 000b 	add.w	r0, r4, #11
 8006a84:	1d23      	adds	r3, r4, #4
 8006a86:	f020 0007 	bic.w	r0, r0, #7
 8006a8a:	1ac2      	subs	r2, r0, r3
 8006a8c:	d0cc      	beq.n	8006a28 <_malloc_r+0x20>
 8006a8e:	1a1b      	subs	r3, r3, r0
 8006a90:	50a3      	str	r3, [r4, r2]
 8006a92:	e7c9      	b.n	8006a28 <_malloc_r+0x20>
 8006a94:	4622      	mov	r2, r4
 8006a96:	6864      	ldr	r4, [r4, #4]
 8006a98:	e7cc      	b.n	8006a34 <_malloc_r+0x2c>
 8006a9a:	1cc4      	adds	r4, r0, #3
 8006a9c:	f024 0403 	bic.w	r4, r4, #3
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d0e3      	beq.n	8006a6c <_malloc_r+0x64>
 8006aa4:	1a21      	subs	r1, r4, r0
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 fcf6 	bl	8007498 <_sbrk_r>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d1dd      	bne.n	8006a6c <_malloc_r+0x64>
 8006ab0:	e7cf      	b.n	8006a52 <_malloc_r+0x4a>
 8006ab2:	bf00      	nop
 8006ab4:	200002fc 	.word	0x200002fc
 8006ab8:	20000300 	.word	0x20000300

08006abc <__cvt>:
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	bfbb      	ittet	lt
 8006ac6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	461f      	movlt	r7, r3
 8006acc:	2300      	movge	r3, #0
 8006ace:	232d      	movlt	r3, #45	; 0x2d
 8006ad0:	b088      	sub	sp, #32
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006adc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006ae0:	f023 0820 	bic.w	r8, r3, #32
 8006ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ae8:	d005      	beq.n	8006af6 <__cvt+0x3a>
 8006aea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006aee:	d100      	bne.n	8006af2 <__cvt+0x36>
 8006af0:	3501      	adds	r5, #1
 8006af2:	2302      	movs	r3, #2
 8006af4:	e000      	b.n	8006af8 <__cvt+0x3c>
 8006af6:	2303      	movs	r3, #3
 8006af8:	aa07      	add	r2, sp, #28
 8006afa:	9204      	str	r2, [sp, #16]
 8006afc:	aa06      	add	r2, sp, #24
 8006afe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b02:	e9cd 3500 	strd	r3, r5, [sp]
 8006b06:	4622      	mov	r2, r4
 8006b08:	463b      	mov	r3, r7
 8006b0a:	f000 fe79 	bl	8007800 <_dtoa_r>
 8006b0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b12:	4606      	mov	r6, r0
 8006b14:	d102      	bne.n	8006b1c <__cvt+0x60>
 8006b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b18:	07db      	lsls	r3, r3, #31
 8006b1a:	d522      	bpl.n	8006b62 <__cvt+0xa6>
 8006b1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b20:	eb06 0905 	add.w	r9, r6, r5
 8006b24:	d110      	bne.n	8006b48 <__cvt+0x8c>
 8006b26:	7833      	ldrb	r3, [r6, #0]
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d10a      	bne.n	8006b42 <__cvt+0x86>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4620      	mov	r0, r4
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8006b38:	b918      	cbnz	r0, 8006b42 <__cvt+0x86>
 8006b3a:	f1c5 0501 	rsb	r5, r5, #1
 8006b3e:	f8ca 5000 	str.w	r5, [sl]
 8006b42:	f8da 3000 	ldr.w	r3, [sl]
 8006b46:	4499      	add	r9, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b54:	b108      	cbz	r0, 8006b5a <__cvt+0x9e>
 8006b56:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b5a:	2230      	movs	r2, #48	; 0x30
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	454b      	cmp	r3, r9
 8006b60:	d307      	bcc.n	8006b72 <__cvt+0xb6>
 8006b62:	4630      	mov	r0, r6
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b68:	1b9b      	subs	r3, r3, r6
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	b008      	add	sp, #32
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	1c59      	adds	r1, r3, #1
 8006b74:	9107      	str	r1, [sp, #28]
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e7f0      	b.n	8006b5c <__cvt+0xa0>

08006b7a <__exponent>:
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	f803 2b02 	strb.w	r2, [r3], #2
 8006b84:	bfb6      	itet	lt
 8006b86:	222d      	movlt	r2, #45	; 0x2d
 8006b88:	222b      	movge	r2, #43	; 0x2b
 8006b8a:	4249      	neglt	r1, r1
 8006b8c:	2909      	cmp	r1, #9
 8006b8e:	7042      	strb	r2, [r0, #1]
 8006b90:	dd2b      	ble.n	8006bea <__exponent+0x70>
 8006b92:	f10d 0407 	add.w	r4, sp, #7
 8006b96:	46a4      	mov	ip, r4
 8006b98:	270a      	movs	r7, #10
 8006b9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	46a6      	mov	lr, r4
 8006ba2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ba6:	2a63      	cmp	r2, #99	; 0x63
 8006ba8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006bac:	4631      	mov	r1, r6
 8006bae:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bb6:	dcf0      	bgt.n	8006b9a <__exponent+0x20>
 8006bb8:	3130      	adds	r1, #48	; 0x30
 8006bba:	f1ae 0502 	sub.w	r5, lr, #2
 8006bbe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	1c44      	adds	r4, r0, #1
 8006bc6:	4561      	cmp	r1, ip
 8006bc8:	d30a      	bcc.n	8006be0 <__exponent+0x66>
 8006bca:	f10d 0209 	add.w	r2, sp, #9
 8006bce:	eba2 020e 	sub.w	r2, r2, lr
 8006bd2:	4565      	cmp	r5, ip
 8006bd4:	bf88      	it	hi
 8006bd6:	2200      	movhi	r2, #0
 8006bd8:	4413      	add	r3, r2
 8006bda:	1a18      	subs	r0, r3, r0
 8006bdc:	b003      	add	sp, #12
 8006bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006be8:	e7ed      	b.n	8006bc6 <__exponent+0x4c>
 8006bea:	2330      	movs	r3, #48	; 0x30
 8006bec:	3130      	adds	r1, #48	; 0x30
 8006bee:	7083      	strb	r3, [r0, #2]
 8006bf0:	70c1      	strb	r1, [r0, #3]
 8006bf2:	1d03      	adds	r3, r0, #4
 8006bf4:	e7f1      	b.n	8006bda <__exponent+0x60>
	...

08006bf8 <_printf_float>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	b091      	sub	sp, #68	; 0x44
 8006bfe:	460c      	mov	r4, r1
 8006c00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c04:	4616      	mov	r6, r2
 8006c06:	461f      	mov	r7, r3
 8006c08:	4605      	mov	r5, r0
 8006c0a:	f001 fd9f 	bl	800874c <_localeconv_r>
 8006c0e:	6803      	ldr	r3, [r0, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
 8006c14:	f7f9 fa9c 	bl	8000150 <strlen>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	900a      	str	r0, [sp, #40]	; 0x28
 8006c22:	3307      	adds	r3, #7
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	f103 0208 	add.w	r2, r3, #8
 8006c2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c30:	f8d4 b000 	ldr.w	fp, [r4]
 8006c34:	f8c8 2000 	str.w	r2, [r8]
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006c44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4b9c      	ldr	r3, [pc, #624]	; (8006ec4 <_printf_float+0x2cc>)
 8006c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c54:	f7f9 feda 	bl	8000a0c <__aeabi_dcmpun>
 8006c58:	bb70      	cbnz	r0, 8006cb8 <_printf_float+0xc0>
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	4640      	mov	r0, r8
 8006c60:	4b98      	ldr	r3, [pc, #608]	; (8006ec4 <_printf_float+0x2cc>)
 8006c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c64:	f7f9 feb4 	bl	80009d0 <__aeabi_dcmple>
 8006c68:	bb30      	cbnz	r0, 8006cb8 <_printf_float+0xc0>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4651      	mov	r1, sl
 8006c72:	f7f9 fea3 	bl	80009bc <__aeabi_dcmplt>
 8006c76:	b110      	cbz	r0, 8006c7e <_printf_float+0x86>
 8006c78:	232d      	movs	r3, #45	; 0x2d
 8006c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7e:	4b92      	ldr	r3, [pc, #584]	; (8006ec8 <_printf_float+0x2d0>)
 8006c80:	4892      	ldr	r0, [pc, #584]	; (8006ecc <_printf_float+0x2d4>)
 8006c82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c86:	bf94      	ite	ls
 8006c88:	4698      	movls	r8, r3
 8006c8a:	4680      	movhi	r8, r0
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	f04f 0a00 	mov.w	sl, #0
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	f02b 0304 	bic.w	r3, fp, #4
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	4633      	mov	r3, r6
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	9700      	str	r7, [sp, #0]
 8006ca2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ca4:	f000 f9d4 	bl	8007050 <_printf_common>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f040 8090 	bne.w	8006dce <_printf_float+0x1d6>
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	b011      	add	sp, #68	; 0x44
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	4642      	mov	r2, r8
 8006cba:	4653      	mov	r3, sl
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4651      	mov	r1, sl
 8006cc0:	f7f9 fea4 	bl	8000a0c <__aeabi_dcmpun>
 8006cc4:	b148      	cbz	r0, 8006cda <_printf_float+0xe2>
 8006cc6:	f1ba 0f00 	cmp.w	sl, #0
 8006cca:	bfb8      	it	lt
 8006ccc:	232d      	movlt	r3, #45	; 0x2d
 8006cce:	4880      	ldr	r0, [pc, #512]	; (8006ed0 <_printf_float+0x2d8>)
 8006cd0:	bfb8      	it	lt
 8006cd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cd6:	4b7f      	ldr	r3, [pc, #508]	; (8006ed4 <_printf_float+0x2dc>)
 8006cd8:	e7d3      	b.n	8006c82 <_printf_float+0x8a>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	d142      	bne.n	8006d6a <_printf_float+0x172>
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	9206      	str	r2, [sp, #24]
 8006cec:	aa0e      	add	r2, sp, #56	; 0x38
 8006cee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006cf2:	aa0d      	add	r2, sp, #52	; 0x34
 8006cf4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006cf8:	9203      	str	r2, [sp, #12]
 8006cfa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006cfe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	4642      	mov	r2, r8
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	4653      	mov	r3, sl
 8006d0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d10:	f7ff fed4 	bl	8006abc <__cvt>
 8006d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d16:	4680      	mov	r8, r0
 8006d18:	2947      	cmp	r1, #71	; 0x47
 8006d1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d1c:	d108      	bne.n	8006d30 <_printf_float+0x138>
 8006d1e:	1cc8      	adds	r0, r1, #3
 8006d20:	db02      	blt.n	8006d28 <_printf_float+0x130>
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	4299      	cmp	r1, r3
 8006d26:	dd40      	ble.n	8006daa <_printf_float+0x1b2>
 8006d28:	f1a9 0902 	sub.w	r9, r9, #2
 8006d2c:	fa5f f989 	uxtb.w	r9, r9
 8006d30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d34:	d81f      	bhi.n	8006d76 <_printf_float+0x17e>
 8006d36:	464a      	mov	r2, r9
 8006d38:	3901      	subs	r1, #1
 8006d3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d3e:	910d      	str	r1, [sp, #52]	; 0x34
 8006d40:	f7ff ff1b 	bl	8006b7a <__exponent>
 8006d44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d46:	4682      	mov	sl, r0
 8006d48:	1813      	adds	r3, r2, r0
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	dc02      	bgt.n	8006d56 <_printf_float+0x15e>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d501      	bpl.n	8006d5a <_printf_float+0x162>
 8006d56:	3301      	adds	r3, #1
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d09b      	beq.n	8006c9a <_printf_float+0xa2>
 8006d62:	232d      	movs	r3, #45	; 0x2d
 8006d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d68:	e797      	b.n	8006c9a <_printf_float+0xa2>
 8006d6a:	2947      	cmp	r1, #71	; 0x47
 8006d6c:	d1bc      	bne.n	8006ce8 <_printf_float+0xf0>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ba      	bne.n	8006ce8 <_printf_float+0xf0>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e7b7      	b.n	8006ce6 <_printf_float+0xee>
 8006d76:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d7a:	d118      	bne.n	8006dae <_printf_float+0x1b6>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	dd0b      	ble.n	8006d9a <_printf_float+0x1a2>
 8006d82:	6121      	str	r1, [r4, #16]
 8006d84:	b913      	cbnz	r3, 8006d8c <_printf_float+0x194>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	07d0      	lsls	r0, r2, #31
 8006d8a:	d502      	bpl.n	8006d92 <_printf_float+0x19a>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	440b      	add	r3, r1
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d98:	e7df      	b.n	8006d5a <_printf_float+0x162>
 8006d9a:	b913      	cbnz	r3, 8006da2 <_printf_float+0x1aa>
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	07d2      	lsls	r2, r2, #31
 8006da0:	d501      	bpl.n	8006da6 <_printf_float+0x1ae>
 8006da2:	3302      	adds	r3, #2
 8006da4:	e7f4      	b.n	8006d90 <_printf_float+0x198>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e7f2      	b.n	8006d90 <_printf_float+0x198>
 8006daa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db0:	4299      	cmp	r1, r3
 8006db2:	db05      	blt.n	8006dc0 <_printf_float+0x1c8>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	6121      	str	r1, [r4, #16]
 8006db8:	07d8      	lsls	r0, r3, #31
 8006dba:	d5ea      	bpl.n	8006d92 <_printf_float+0x19a>
 8006dbc:	1c4b      	adds	r3, r1, #1
 8006dbe:	e7e7      	b.n	8006d90 <_printf_float+0x198>
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	bfcc      	ite	gt
 8006dc4:	2201      	movgt	r2, #1
 8006dc6:	f1c1 0202 	rsble	r2, r1, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	e7e0      	b.n	8006d90 <_printf_float+0x198>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	055a      	lsls	r2, r3, #21
 8006dd2:	d407      	bmi.n	8006de4 <_printf_float+0x1ec>
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	d12b      	bne.n	8006e3a <_printf_float+0x242>
 8006de2:	e764      	b.n	8006cae <_printf_float+0xb6>
 8006de4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006de8:	f240 80dd 	bls.w	8006fa6 <_printf_float+0x3ae>
 8006dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006df0:	2200      	movs	r2, #0
 8006df2:	2300      	movs	r3, #0
 8006df4:	f7f9 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d033      	beq.n	8006e64 <_printf_float+0x26c>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	4a35      	ldr	r2, [pc, #212]	; (8006ed8 <_printf_float+0x2e0>)
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f af51 	beq.w	8006cae <_printf_float+0xb6>
 8006e0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e10:	429a      	cmp	r2, r3
 8006e12:	db02      	blt.n	8006e1a <_printf_float+0x222>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	07d8      	lsls	r0, r3, #31
 8006e18:	d50f      	bpl.n	8006e3a <_printf_float+0x242>
 8006e1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f af42 	beq.w	8006cae <_printf_float+0xb6>
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	f104 091a 	add.w	r9, r4, #26
 8006e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4543      	cmp	r3, r8
 8006e38:	dc09      	bgt.n	8006e4e <_printf_float+0x256>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	079b      	lsls	r3, r3, #30
 8006e3e:	f100 8102 	bmi.w	8007046 <_printf_float+0x44e>
 8006e42:	68e0      	ldr	r0, [r4, #12]
 8006e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e46:	4298      	cmp	r0, r3
 8006e48:	bfb8      	it	lt
 8006e4a:	4618      	movlt	r0, r3
 8006e4c:	e731      	b.n	8006cb2 <_printf_float+0xba>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	464a      	mov	r2, r9
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f43f af28 	beq.w	8006cae <_printf_float+0xb6>
 8006e5e:	f108 0801 	add.w	r8, r8, #1
 8006e62:	e7e6      	b.n	8006e32 <_printf_float+0x23a>
 8006e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dc38      	bgt.n	8006edc <_printf_float+0x2e4>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <_printf_float+0x2e0>)
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f af1a 	beq.w	8006cae <_printf_float+0xb6>
 8006e7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	d102      	bne.n	8006e88 <_printf_float+0x290>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	07d9      	lsls	r1, r3, #31
 8006e86:	d5d8      	bpl.n	8006e3a <_printf_float+0x242>
 8006e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	f43f af0b 	beq.w	8006cae <_printf_float+0xb6>
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	f104 0a1a 	add.w	sl, r4, #26
 8006ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea2:	425b      	negs	r3, r3
 8006ea4:	454b      	cmp	r3, r9
 8006ea6:	dc01      	bgt.n	8006eac <_printf_float+0x2b4>
 8006ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eaa:	e794      	b.n	8006dd6 <_printf_float+0x1de>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4652      	mov	r2, sl
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f aef9 	beq.w	8006cae <_printf_float+0xb6>
 8006ebc:	f109 0901 	add.w	r9, r9, #1
 8006ec0:	e7ee      	b.n	8006ea0 <_printf_float+0x2a8>
 8006ec2:	bf00      	nop
 8006ec4:	7fefffff 	.word	0x7fefffff
 8006ec8:	08009a60 	.word	0x08009a60
 8006ecc:	08009a64 	.word	0x08009a64
 8006ed0:	08009a6c 	.word	0x08009a6c
 8006ed4:	08009a68 	.word	0x08009a68
 8006ed8:	08009a70 	.word	0x08009a70
 8006edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	bfa8      	it	ge
 8006ee4:	461a      	movge	r2, r3
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	4691      	mov	r9, r2
 8006eea:	dc37      	bgt.n	8006f5c <_printf_float+0x364>
 8006eec:	f04f 0b00 	mov.w	fp, #0
 8006ef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ef4:	f104 021a 	add.w	r2, r4, #26
 8006ef8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006efc:	ebaa 0309 	sub.w	r3, sl, r9
 8006f00:	455b      	cmp	r3, fp
 8006f02:	dc33      	bgt.n	8006f6c <_printf_float+0x374>
 8006f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	db3b      	blt.n	8006f84 <_printf_float+0x38c>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07da      	lsls	r2, r3, #31
 8006f10:	d438      	bmi.n	8006f84 <_printf_float+0x38c>
 8006f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f16:	eba2 030a 	sub.w	r3, r2, sl
 8006f1a:	eba2 0901 	sub.w	r9, r2, r1
 8006f1e:	4599      	cmp	r9, r3
 8006f20:	bfa8      	it	ge
 8006f22:	4699      	movge	r9, r3
 8006f24:	f1b9 0f00 	cmp.w	r9, #0
 8006f28:	dc34      	bgt.n	8006f94 <_printf_float+0x39c>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f32:	f104 0a1a 	add.w	sl, r4, #26
 8006f36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	eba3 0309 	sub.w	r3, r3, r9
 8006f40:	4543      	cmp	r3, r8
 8006f42:	f77f af7a 	ble.w	8006e3a <_printf_float+0x242>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4652      	mov	r2, sl
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f aeac 	beq.w	8006cae <_printf_float+0xb6>
 8006f56:	f108 0801 	add.w	r8, r8, #1
 8006f5a:	e7ec      	b.n	8006f36 <_printf_float+0x33e>
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4642      	mov	r2, r8
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	d1c0      	bne.n	8006eec <_printf_float+0x2f4>
 8006f6a:	e6a0      	b.n	8006cae <_printf_float+0xb6>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f ae99 	beq.w	8006cae <_printf_float+0xb6>
 8006f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f7e:	f10b 0b01 	add.w	fp, fp, #1
 8006f82:	e7b9      	b.n	8006ef8 <_printf_float+0x300>
 8006f84:	4631      	mov	r1, r6
 8006f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d1bf      	bne.n	8006f12 <_printf_float+0x31a>
 8006f92:	e68c      	b.n	8006cae <_printf_float+0xb6>
 8006f94:	464b      	mov	r3, r9
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	eb08 020a 	add.w	r2, r8, sl
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d1c2      	bne.n	8006f2a <_printf_float+0x332>
 8006fa4:	e683      	b.n	8006cae <_printf_float+0xb6>
 8006fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa8:	2a01      	cmp	r2, #1
 8006faa:	dc01      	bgt.n	8006fb0 <_printf_float+0x3b8>
 8006fac:	07db      	lsls	r3, r3, #31
 8006fae:	d537      	bpl.n	8007020 <_printf_float+0x428>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f ae77 	beq.w	8006cae <_printf_float+0xb6>
 8006fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f ae6f 	beq.w	8006cae <_printf_float+0xb6>
 8006fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f7f9 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8006fdc:	b9d8      	cbnz	r0, 8007016 <_printf_float+0x41e>
 8006fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fe0:	f108 0201 	add.w	r2, r8, #1
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d10e      	bne.n	800700e <_printf_float+0x416>
 8006ff0:	e65d      	b.n	8006cae <_printf_float+0xb6>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	464a      	mov	r2, r9
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae56 	beq.w	8006cae <_printf_float+0xb6>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007008:	3b01      	subs	r3, #1
 800700a:	4543      	cmp	r3, r8
 800700c:	dcf1      	bgt.n	8006ff2 <_printf_float+0x3fa>
 800700e:	4653      	mov	r3, sl
 8007010:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007014:	e6e0      	b.n	8006dd8 <_printf_float+0x1e0>
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	f104 091a 	add.w	r9, r4, #26
 800701e:	e7f2      	b.n	8007006 <_printf_float+0x40e>
 8007020:	2301      	movs	r3, #1
 8007022:	4642      	mov	r2, r8
 8007024:	e7df      	b.n	8006fe6 <_printf_float+0x3ee>
 8007026:	2301      	movs	r3, #1
 8007028:	464a      	mov	r2, r9
 800702a:	4631      	mov	r1, r6
 800702c:	4628      	mov	r0, r5
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	f43f ae3c 	beq.w	8006cae <_printf_float+0xb6>
 8007036:	f108 0801 	add.w	r8, r8, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	4543      	cmp	r3, r8
 8007042:	dcf0      	bgt.n	8007026 <_printf_float+0x42e>
 8007044:	e6fd      	b.n	8006e42 <_printf_float+0x24a>
 8007046:	f04f 0800 	mov.w	r8, #0
 800704a:	f104 0919 	add.w	r9, r4, #25
 800704e:	e7f4      	b.n	800703a <_printf_float+0x442>

08007050 <_printf_common>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	4616      	mov	r6, r2
 8007056:	4699      	mov	r9, r3
 8007058:	688a      	ldr	r2, [r1, #8]
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	4607      	mov	r7, r0
 800705e:	4293      	cmp	r3, r2
 8007060:	bfb8      	it	lt
 8007062:	4613      	movlt	r3, r2
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800706a:	460c      	mov	r4, r1
 800706c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007070:	b10a      	cbz	r2, 8007076 <_printf_common+0x26>
 8007072:	3301      	adds	r3, #1
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	0699      	lsls	r1, r3, #26
 800707a:	bf42      	ittt	mi
 800707c:	6833      	ldrmi	r3, [r6, #0]
 800707e:	3302      	addmi	r3, #2
 8007080:	6033      	strmi	r3, [r6, #0]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	f015 0506 	ands.w	r5, r5, #6
 8007088:	d106      	bne.n	8007098 <_printf_common+0x48>
 800708a:	f104 0a19 	add.w	sl, r4, #25
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	6832      	ldr	r2, [r6, #0]
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42ab      	cmp	r3, r5
 8007096:	dc28      	bgt.n	80070ea <_printf_common+0x9a>
 8007098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800709c:	1e13      	subs	r3, r2, #0
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	bf18      	it	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	0692      	lsls	r2, r2, #26
 80070a6:	d42d      	bmi.n	8007104 <_printf_common+0xb4>
 80070a8:	4649      	mov	r1, r9
 80070aa:	4638      	mov	r0, r7
 80070ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b0:	47c0      	blx	r8
 80070b2:	3001      	adds	r0, #1
 80070b4:	d020      	beq.n	80070f8 <_printf_common+0xa8>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	68e5      	ldr	r5, [r4, #12]
 80070ba:	f003 0306 	and.w	r3, r3, #6
 80070be:	2b04      	cmp	r3, #4
 80070c0:	bf18      	it	ne
 80070c2:	2500      	movne	r5, #0
 80070c4:	6832      	ldr	r2, [r6, #0]
 80070c6:	f04f 0600 	mov.w	r6, #0
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	bf08      	it	eq
 80070ce:	1aad      	subeq	r5, r5, r2
 80070d0:	6922      	ldr	r2, [r4, #16]
 80070d2:	bf08      	it	eq
 80070d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d8:	4293      	cmp	r3, r2
 80070da:	bfc4      	itt	gt
 80070dc:	1a9b      	subgt	r3, r3, r2
 80070de:	18ed      	addgt	r5, r5, r3
 80070e0:	341a      	adds	r4, #26
 80070e2:	42b5      	cmp	r5, r6
 80070e4:	d11a      	bne.n	800711c <_printf_common+0xcc>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e008      	b.n	80070fc <_printf_common+0xac>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4649      	mov	r1, r9
 80070f0:	4638      	mov	r0, r7
 80070f2:	47c0      	blx	r8
 80070f4:	3001      	adds	r0, #1
 80070f6:	d103      	bne.n	8007100 <_printf_common+0xb0>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	3501      	adds	r5, #1
 8007102:	e7c4      	b.n	800708e <_printf_common+0x3e>
 8007104:	2030      	movs	r0, #48	; 0x30
 8007106:	18e1      	adds	r1, r4, r3
 8007108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007112:	4422      	add	r2, r4
 8007114:	3302      	adds	r3, #2
 8007116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800711a:	e7c5      	b.n	80070a8 <_printf_common+0x58>
 800711c:	2301      	movs	r3, #1
 800711e:	4622      	mov	r2, r4
 8007120:	4649      	mov	r1, r9
 8007122:	4638      	mov	r0, r7
 8007124:	47c0      	blx	r8
 8007126:	3001      	adds	r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa8>
 800712a:	3601      	adds	r6, #1
 800712c:	e7d9      	b.n	80070e2 <_printf_common+0x92>
	...

08007130 <_printf_i>:
 8007130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	7e27      	ldrb	r7, [r4, #24]
 8007138:	4691      	mov	r9, r2
 800713a:	2f78      	cmp	r7, #120	; 0x78
 800713c:	4680      	mov	r8, r0
 800713e:	469a      	mov	sl, r3
 8007140:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007146:	d807      	bhi.n	8007158 <_printf_i+0x28>
 8007148:	2f62      	cmp	r7, #98	; 0x62
 800714a:	d80a      	bhi.n	8007162 <_printf_i+0x32>
 800714c:	2f00      	cmp	r7, #0
 800714e:	f000 80d9 	beq.w	8007304 <_printf_i+0x1d4>
 8007152:	2f58      	cmp	r7, #88	; 0x58
 8007154:	f000 80a4 	beq.w	80072a0 <_printf_i+0x170>
 8007158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800715c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007160:	e03a      	b.n	80071d8 <_printf_i+0xa8>
 8007162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007166:	2b15      	cmp	r3, #21
 8007168:	d8f6      	bhi.n	8007158 <_printf_i+0x28>
 800716a:	a001      	add	r0, pc, #4	; (adr r0, 8007170 <_printf_i+0x40>)
 800716c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071dd 	.word	0x080071dd
 8007178:	08007159 	.word	0x08007159
 800717c:	08007159 	.word	0x08007159
 8007180:	08007159 	.word	0x08007159
 8007184:	08007159 	.word	0x08007159
 8007188:	080071dd 	.word	0x080071dd
 800718c:	08007159 	.word	0x08007159
 8007190:	08007159 	.word	0x08007159
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	080072eb 	.word	0x080072eb
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	080072cd 	.word	0x080072cd
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	0800730d 	.word	0x0800730d
 80071b4:	08007159 	.word	0x08007159
 80071b8:	0800720d 	.word	0x0800720d
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	080072d5 	.word	0x080072d5
 80071c8:	680b      	ldr	r3, [r1, #0]
 80071ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	600a      	str	r2, [r1, #0]
 80071d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d8:	2301      	movs	r3, #1
 80071da:	e0a4      	b.n	8007326 <_printf_i+0x1f6>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	6808      	ldr	r0, [r1, #0]
 80071e0:	062e      	lsls	r6, r5, #24
 80071e2:	f100 0304 	add.w	r3, r0, #4
 80071e6:	d50a      	bpl.n	80071fe <_printf_i+0xce>
 80071e8:	6805      	ldr	r5, [r0, #0]
 80071ea:	600b      	str	r3, [r1, #0]
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	da03      	bge.n	80071f8 <_printf_i+0xc8>
 80071f0:	232d      	movs	r3, #45	; 0x2d
 80071f2:	426d      	negs	r5, r5
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f8:	230a      	movs	r3, #10
 80071fa:	485e      	ldr	r0, [pc, #376]	; (8007374 <_printf_i+0x244>)
 80071fc:	e019      	b.n	8007232 <_printf_i+0x102>
 80071fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007202:	6805      	ldr	r5, [r0, #0]
 8007204:	600b      	str	r3, [r1, #0]
 8007206:	bf18      	it	ne
 8007208:	b22d      	sxthne	r5, r5
 800720a:	e7ef      	b.n	80071ec <_printf_i+0xbc>
 800720c:	680b      	ldr	r3, [r1, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	1d18      	adds	r0, r3, #4
 8007212:	6008      	str	r0, [r1, #0]
 8007214:	0628      	lsls	r0, r5, #24
 8007216:	d501      	bpl.n	800721c <_printf_i+0xec>
 8007218:	681d      	ldr	r5, [r3, #0]
 800721a:	e002      	b.n	8007222 <_printf_i+0xf2>
 800721c:	0669      	lsls	r1, r5, #25
 800721e:	d5fb      	bpl.n	8007218 <_printf_i+0xe8>
 8007220:	881d      	ldrh	r5, [r3, #0]
 8007222:	2f6f      	cmp	r7, #111	; 0x6f
 8007224:	bf0c      	ite	eq
 8007226:	2308      	moveq	r3, #8
 8007228:	230a      	movne	r3, #10
 800722a:	4852      	ldr	r0, [pc, #328]	; (8007374 <_printf_i+0x244>)
 800722c:	2100      	movs	r1, #0
 800722e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007232:	6866      	ldr	r6, [r4, #4]
 8007234:	2e00      	cmp	r6, #0
 8007236:	bfa8      	it	ge
 8007238:	6821      	ldrge	r1, [r4, #0]
 800723a:	60a6      	str	r6, [r4, #8]
 800723c:	bfa4      	itt	ge
 800723e:	f021 0104 	bicge.w	r1, r1, #4
 8007242:	6021      	strge	r1, [r4, #0]
 8007244:	b90d      	cbnz	r5, 800724a <_printf_i+0x11a>
 8007246:	2e00      	cmp	r6, #0
 8007248:	d04d      	beq.n	80072e6 <_printf_i+0x1b6>
 800724a:	4616      	mov	r6, r2
 800724c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007250:	fb03 5711 	mls	r7, r3, r1, r5
 8007254:	5dc7      	ldrb	r7, [r0, r7]
 8007256:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800725a:	462f      	mov	r7, r5
 800725c:	42bb      	cmp	r3, r7
 800725e:	460d      	mov	r5, r1
 8007260:	d9f4      	bls.n	800724c <_printf_i+0x11c>
 8007262:	2b08      	cmp	r3, #8
 8007264:	d10b      	bne.n	800727e <_printf_i+0x14e>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	07df      	lsls	r7, r3, #31
 800726a:	d508      	bpl.n	800727e <_printf_i+0x14e>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	6861      	ldr	r1, [r4, #4]
 8007270:	4299      	cmp	r1, r3
 8007272:	bfde      	ittt	le
 8007274:	2330      	movle	r3, #48	; 0x30
 8007276:	f806 3c01 	strble.w	r3, [r6, #-1]
 800727a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800727e:	1b92      	subs	r2, r2, r6
 8007280:	6122      	str	r2, [r4, #16]
 8007282:	464b      	mov	r3, r9
 8007284:	4621      	mov	r1, r4
 8007286:	4640      	mov	r0, r8
 8007288:	f8cd a000 	str.w	sl, [sp]
 800728c:	aa03      	add	r2, sp, #12
 800728e:	f7ff fedf 	bl	8007050 <_printf_common>
 8007292:	3001      	adds	r0, #1
 8007294:	d14c      	bne.n	8007330 <_printf_i+0x200>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	b004      	add	sp, #16
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	4834      	ldr	r0, [pc, #208]	; (8007374 <_printf_i+0x244>)
 80072a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072a6:	680e      	ldr	r6, [r1, #0]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80072ae:	061f      	lsls	r7, r3, #24
 80072b0:	600e      	str	r6, [r1, #0]
 80072b2:	d514      	bpl.n	80072de <_printf_i+0x1ae>
 80072b4:	07d9      	lsls	r1, r3, #31
 80072b6:	bf44      	itt	mi
 80072b8:	f043 0320 	orrmi.w	r3, r3, #32
 80072bc:	6023      	strmi	r3, [r4, #0]
 80072be:	b91d      	cbnz	r5, 80072c8 <_printf_i+0x198>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	f023 0320 	bic.w	r3, r3, #32
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	2310      	movs	r3, #16
 80072ca:	e7af      	b.n	800722c <_printf_i+0xfc>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	f043 0320 	orr.w	r3, r3, #32
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	2378      	movs	r3, #120	; 0x78
 80072d6:	4828      	ldr	r0, [pc, #160]	; (8007378 <_printf_i+0x248>)
 80072d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072dc:	e7e3      	b.n	80072a6 <_printf_i+0x176>
 80072de:	065e      	lsls	r6, r3, #25
 80072e0:	bf48      	it	mi
 80072e2:	b2ad      	uxthmi	r5, r5
 80072e4:	e7e6      	b.n	80072b4 <_printf_i+0x184>
 80072e6:	4616      	mov	r6, r2
 80072e8:	e7bb      	b.n	8007262 <_printf_i+0x132>
 80072ea:	680b      	ldr	r3, [r1, #0]
 80072ec:	6826      	ldr	r6, [r4, #0]
 80072ee:	1d1d      	adds	r5, r3, #4
 80072f0:	6960      	ldr	r0, [r4, #20]
 80072f2:	600d      	str	r5, [r1, #0]
 80072f4:	0635      	lsls	r5, r6, #24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	d501      	bpl.n	80072fe <_printf_i+0x1ce>
 80072fa:	6018      	str	r0, [r3, #0]
 80072fc:	e002      	b.n	8007304 <_printf_i+0x1d4>
 80072fe:	0671      	lsls	r1, r6, #25
 8007300:	d5fb      	bpl.n	80072fa <_printf_i+0x1ca>
 8007302:	8018      	strh	r0, [r3, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	4616      	mov	r6, r2
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	e7ba      	b.n	8007282 <_printf_i+0x152>
 800730c:	680b      	ldr	r3, [r1, #0]
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	600a      	str	r2, [r1, #0]
 8007312:	681e      	ldr	r6, [r3, #0]
 8007314:	2100      	movs	r1, #0
 8007316:	4630      	mov	r0, r6
 8007318:	6862      	ldr	r2, [r4, #4]
 800731a:	f001 fa83 	bl	8008824 <memchr>
 800731e:	b108      	cbz	r0, 8007324 <_printf_i+0x1f4>
 8007320:	1b80      	subs	r0, r0, r6
 8007322:	6060      	str	r0, [r4, #4]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	2300      	movs	r3, #0
 800732a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800732e:	e7a8      	b.n	8007282 <_printf_i+0x152>
 8007330:	4632      	mov	r2, r6
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	47d0      	blx	sl
 800733a:	3001      	adds	r0, #1
 800733c:	d0ab      	beq.n	8007296 <_printf_i+0x166>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	079b      	lsls	r3, r3, #30
 8007342:	d413      	bmi.n	800736c <_printf_i+0x23c>
 8007344:	68e0      	ldr	r0, [r4, #12]
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	4298      	cmp	r0, r3
 800734a:	bfb8      	it	lt
 800734c:	4618      	movlt	r0, r3
 800734e:	e7a4      	b.n	800729a <_printf_i+0x16a>
 8007350:	2301      	movs	r3, #1
 8007352:	4632      	mov	r2, r6
 8007354:	4649      	mov	r1, r9
 8007356:	4640      	mov	r0, r8
 8007358:	47d0      	blx	sl
 800735a:	3001      	adds	r0, #1
 800735c:	d09b      	beq.n	8007296 <_printf_i+0x166>
 800735e:	3501      	adds	r5, #1
 8007360:	68e3      	ldr	r3, [r4, #12]
 8007362:	9903      	ldr	r1, [sp, #12]
 8007364:	1a5b      	subs	r3, r3, r1
 8007366:	42ab      	cmp	r3, r5
 8007368:	dcf2      	bgt.n	8007350 <_printf_i+0x220>
 800736a:	e7eb      	b.n	8007344 <_printf_i+0x214>
 800736c:	2500      	movs	r5, #0
 800736e:	f104 0619 	add.w	r6, r4, #25
 8007372:	e7f5      	b.n	8007360 <_printf_i+0x230>
 8007374:	08009a72 	.word	0x08009a72
 8007378:	08009a83 	.word	0x08009a83

0800737c <iprintf>:
 800737c:	b40f      	push	{r0, r1, r2, r3}
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <iprintf+0x2c>)
 8007380:	b513      	push	{r0, r1, r4, lr}
 8007382:	681c      	ldr	r4, [r3, #0]
 8007384:	b124      	cbz	r4, 8007390 <iprintf+0x14>
 8007386:	69a3      	ldr	r3, [r4, #24]
 8007388:	b913      	cbnz	r3, 8007390 <iprintf+0x14>
 800738a:	4620      	mov	r0, r4
 800738c:	f001 f940 	bl	8008610 <__sinit>
 8007390:	ab05      	add	r3, sp, #20
 8007392:	4620      	mov	r0, r4
 8007394:	9a04      	ldr	r2, [sp, #16]
 8007396:	68a1      	ldr	r1, [r4, #8]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	f001 ff7f 	bl	800929c <_vfiprintf_r>
 800739e:	b002      	add	sp, #8
 80073a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a4:	b004      	add	sp, #16
 80073a6:	4770      	bx	lr
 80073a8:	20000080 	.word	0x20000080

080073ac <_puts_r>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	460e      	mov	r6, r1
 80073b0:	4605      	mov	r5, r0
 80073b2:	b118      	cbz	r0, 80073bc <_puts_r+0x10>
 80073b4:	6983      	ldr	r3, [r0, #24]
 80073b6:	b90b      	cbnz	r3, 80073bc <_puts_r+0x10>
 80073b8:	f001 f92a 	bl	8008610 <__sinit>
 80073bc:	69ab      	ldr	r3, [r5, #24]
 80073be:	68ac      	ldr	r4, [r5, #8]
 80073c0:	b913      	cbnz	r3, 80073c8 <_puts_r+0x1c>
 80073c2:	4628      	mov	r0, r5
 80073c4:	f001 f924 	bl	8008610 <__sinit>
 80073c8:	4b2c      	ldr	r3, [pc, #176]	; (800747c <_puts_r+0xd0>)
 80073ca:	429c      	cmp	r4, r3
 80073cc:	d120      	bne.n	8007410 <_puts_r+0x64>
 80073ce:	686c      	ldr	r4, [r5, #4]
 80073d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073d2:	07db      	lsls	r3, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_puts_r+0x36>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	0598      	lsls	r0, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_puts_r+0x36>
 80073dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073de:	f001 f9ba 	bl	8008756 <__retarget_lock_acquire_recursive>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d51d      	bpl.n	8007424 <_puts_r+0x78>
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b1db      	cbz	r3, 8007424 <_puts_r+0x78>
 80073ec:	3e01      	subs	r6, #1
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60a3      	str	r3, [r4, #8]
 80073f8:	bb39      	cbnz	r1, 800744a <_puts_r+0x9e>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da38      	bge.n	8007470 <_puts_r+0xc4>
 80073fe:	4622      	mov	r2, r4
 8007400:	210a      	movs	r1, #10
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f8ac 	bl	8007560 <__swbuf_r>
 8007408:	3001      	adds	r0, #1
 800740a:	d011      	beq.n	8007430 <_puts_r+0x84>
 800740c:	250a      	movs	r5, #10
 800740e:	e011      	b.n	8007434 <_puts_r+0x88>
 8007410:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <_puts_r+0xd4>)
 8007412:	429c      	cmp	r4, r3
 8007414:	d101      	bne.n	800741a <_puts_r+0x6e>
 8007416:	68ac      	ldr	r4, [r5, #8]
 8007418:	e7da      	b.n	80073d0 <_puts_r+0x24>
 800741a:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <_puts_r+0xd8>)
 800741c:	429c      	cmp	r4, r3
 800741e:	bf08      	it	eq
 8007420:	68ec      	ldreq	r4, [r5, #12]
 8007422:	e7d5      	b.n	80073d0 <_puts_r+0x24>
 8007424:	4621      	mov	r1, r4
 8007426:	4628      	mov	r0, r5
 8007428:	f000 f8ec 	bl	8007604 <__swsetup_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	d0dd      	beq.n	80073ec <_puts_r+0x40>
 8007430:	f04f 35ff 	mov.w	r5, #4294967295
 8007434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007436:	07da      	lsls	r2, r3, #31
 8007438:	d405      	bmi.n	8007446 <_puts_r+0x9a>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	059b      	lsls	r3, r3, #22
 800743e:	d402      	bmi.n	8007446 <_puts_r+0x9a>
 8007440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007442:	f001 f989 	bl	8008758 <__retarget_lock_release_recursive>
 8007446:	4628      	mov	r0, r5
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	2b00      	cmp	r3, #0
 800744c:	da04      	bge.n	8007458 <_puts_r+0xac>
 800744e:	69a2      	ldr	r2, [r4, #24]
 8007450:	429a      	cmp	r2, r3
 8007452:	dc06      	bgt.n	8007462 <_puts_r+0xb6>
 8007454:	290a      	cmp	r1, #10
 8007456:	d004      	beq.n	8007462 <_puts_r+0xb6>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	7019      	strb	r1, [r3, #0]
 8007460:	e7c5      	b.n	80073ee <_puts_r+0x42>
 8007462:	4622      	mov	r2, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 f87b 	bl	8007560 <__swbuf_r>
 800746a:	3001      	adds	r0, #1
 800746c:	d1bf      	bne.n	80073ee <_puts_r+0x42>
 800746e:	e7df      	b.n	8007430 <_puts_r+0x84>
 8007470:	250a      	movs	r5, #10
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	6022      	str	r2, [r4, #0]
 8007478:	701d      	strb	r5, [r3, #0]
 800747a:	e7db      	b.n	8007434 <_puts_r+0x88>
 800747c:	08009b48 	.word	0x08009b48
 8007480:	08009b68 	.word	0x08009b68
 8007484:	08009b28 	.word	0x08009b28

08007488 <puts>:
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <puts+0xc>)
 800748a:	4601      	mov	r1, r0
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	f7ff bf8d 	b.w	80073ac <_puts_r>
 8007492:	bf00      	nop
 8007494:	20000080 	.word	0x20000080

08007498 <_sbrk_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	2300      	movs	r3, #0
 800749c:	4d05      	ldr	r5, [pc, #20]	; (80074b4 <_sbrk_r+0x1c>)
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	f7fb ff4e 	bl	8003344 <_sbrk>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_sbrk_r+0x1a>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_sbrk_r+0x1a>
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	20000434 	.word	0x20000434

080074b8 <sniprintf>:
 80074b8:	b40c      	push	{r2, r3}
 80074ba:	b530      	push	{r4, r5, lr}
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <sniprintf+0x64>)
 80074be:	1e0c      	subs	r4, r1, #0
 80074c0:	681d      	ldr	r5, [r3, #0]
 80074c2:	b09d      	sub	sp, #116	; 0x74
 80074c4:	da08      	bge.n	80074d8 <sniprintf+0x20>
 80074c6:	238b      	movs	r3, #139	; 0x8b
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	b01d      	add	sp, #116	; 0x74
 80074d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d4:	b002      	add	sp, #8
 80074d6:	4770      	bx	lr
 80074d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80074dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074e0:	bf0c      	ite	eq
 80074e2:	4623      	moveq	r3, r4
 80074e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	9307      	str	r3, [sp, #28]
 80074ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9006      	str	r0, [sp, #24]
 80074f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074f8:	4628      	mov	r0, r5
 80074fa:	ab21      	add	r3, sp, #132	; 0x84
 80074fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074fe:	a902      	add	r1, sp, #8
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	f001 fda3 	bl	800904c <_svfiprintf_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	bfbc      	itt	lt
 800750a:	238b      	movlt	r3, #139	; 0x8b
 800750c:	602b      	strlt	r3, [r5, #0]
 800750e:	2c00      	cmp	r4, #0
 8007510:	d0dd      	beq.n	80074ce <sniprintf+0x16>
 8007512:	2200      	movs	r2, #0
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e7d9      	b.n	80074ce <sniprintf+0x16>
 800751a:	bf00      	nop
 800751c:	20000080 	.word	0x20000080

08007520 <siprintf>:
 8007520:	b40e      	push	{r1, r2, r3}
 8007522:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007526:	b500      	push	{lr}
 8007528:	b09c      	sub	sp, #112	; 0x70
 800752a:	ab1d      	add	r3, sp, #116	; 0x74
 800752c:	9002      	str	r0, [sp, #8]
 800752e:	9006      	str	r0, [sp, #24]
 8007530:	9107      	str	r1, [sp, #28]
 8007532:	9104      	str	r1, [sp, #16]
 8007534:	4808      	ldr	r0, [pc, #32]	; (8007558 <siprintf+0x38>)
 8007536:	4909      	ldr	r1, [pc, #36]	; (800755c <siprintf+0x3c>)
 8007538:	f853 2b04 	ldr.w	r2, [r3], #4
 800753c:	9105      	str	r1, [sp, #20]
 800753e:	6800      	ldr	r0, [r0, #0]
 8007540:	a902      	add	r1, sp, #8
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	f001 fd82 	bl	800904c <_svfiprintf_r>
 8007548:	2200      	movs	r2, #0
 800754a:	9b02      	ldr	r3, [sp, #8]
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	b01c      	add	sp, #112	; 0x70
 8007550:	f85d eb04 	ldr.w	lr, [sp], #4
 8007554:	b003      	add	sp, #12
 8007556:	4770      	bx	lr
 8007558:	20000080 	.word	0x20000080
 800755c:	ffff0208 	.word	0xffff0208

08007560 <__swbuf_r>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	460e      	mov	r6, r1
 8007564:	4614      	mov	r4, r2
 8007566:	4605      	mov	r5, r0
 8007568:	b118      	cbz	r0, 8007572 <__swbuf_r+0x12>
 800756a:	6983      	ldr	r3, [r0, #24]
 800756c:	b90b      	cbnz	r3, 8007572 <__swbuf_r+0x12>
 800756e:	f001 f84f 	bl	8008610 <__sinit>
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <__swbuf_r+0x98>)
 8007574:	429c      	cmp	r4, r3
 8007576:	d12b      	bne.n	80075d0 <__swbuf_r+0x70>
 8007578:	686c      	ldr	r4, [r5, #4]
 800757a:	69a3      	ldr	r3, [r4, #24]
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	071a      	lsls	r2, r3, #28
 8007582:	d52f      	bpl.n	80075e4 <__swbuf_r+0x84>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b36b      	cbz	r3, 80075e4 <__swbuf_r+0x84>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	b2f6      	uxtb	r6, r6
 800758e:	1ac0      	subs	r0, r0, r3
 8007590:	6963      	ldr	r3, [r4, #20]
 8007592:	4637      	mov	r7, r6
 8007594:	4283      	cmp	r3, r0
 8007596:	dc04      	bgt.n	80075a2 <__swbuf_r+0x42>
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f000 ffa4 	bl	80084e8 <_fflush_r>
 80075a0:	bb30      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	3001      	adds	r0, #1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	701e      	strb	r6, [r3, #0]
 80075b2:	6963      	ldr	r3, [r4, #20]
 80075b4:	4283      	cmp	r3, r0
 80075b6:	d004      	beq.n	80075c2 <__swbuf_r+0x62>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d506      	bpl.n	80075cc <__swbuf_r+0x6c>
 80075be:	2e0a      	cmp	r6, #10
 80075c0:	d104      	bne.n	80075cc <__swbuf_r+0x6c>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 ff8f 	bl	80084e8 <_fflush_r>
 80075ca:	b988      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075cc:	4638      	mov	r0, r7
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <__swbuf_r+0x9c>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <__swbuf_r+0x7a>
 80075d6:	68ac      	ldr	r4, [r5, #8]
 80075d8:	e7cf      	b.n	800757a <__swbuf_r+0x1a>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <__swbuf_r+0xa0>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	bf08      	it	eq
 80075e0:	68ec      	ldreq	r4, [r5, #12]
 80075e2:	e7ca      	b.n	800757a <__swbuf_r+0x1a>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f80c 	bl	8007604 <__swsetup_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0cb      	beq.n	8007588 <__swbuf_r+0x28>
 80075f0:	f04f 37ff 	mov.w	r7, #4294967295
 80075f4:	e7ea      	b.n	80075cc <__swbuf_r+0x6c>
 80075f6:	bf00      	nop
 80075f8:	08009b48 	.word	0x08009b48
 80075fc:	08009b68 	.word	0x08009b68
 8007600:	08009b28 	.word	0x08009b28

08007604 <__swsetup_r>:
 8007604:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <__swsetup_r+0xcc>)
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	b125      	cbz	r5, 800761a <__swsetup_r+0x16>
 8007610:	69ab      	ldr	r3, [r5, #24]
 8007612:	b913      	cbnz	r3, 800761a <__swsetup_r+0x16>
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fffb 	bl	8008610 <__sinit>
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <__swsetup_r+0xd0>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d10f      	bne.n	8007640 <__swsetup_r+0x3c>
 8007620:	686c      	ldr	r4, [r5, #4]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007628:	0719      	lsls	r1, r3, #28
 800762a:	d42c      	bmi.n	8007686 <__swsetup_r+0x82>
 800762c:	06dd      	lsls	r5, r3, #27
 800762e:	d411      	bmi.n	8007654 <__swsetup_r+0x50>
 8007630:	2309      	movs	r3, #9
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	e03e      	b.n	80076be <__swsetup_r+0xba>
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <__swsetup_r+0xd4>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <__swsetup_r+0x46>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7eb      	b.n	8007622 <__swsetup_r+0x1e>
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <__swsetup_r+0xd8>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7e6      	b.n	8007622 <__swsetup_r+0x1e>
 8007654:	0758      	lsls	r0, r3, #29
 8007656:	d512      	bpl.n	800767e <__swsetup_r+0x7a>
 8007658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765a:	b141      	cbz	r1, 800766e <__swsetup_r+0x6a>
 800765c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007660:	4299      	cmp	r1, r3
 8007662:	d002      	beq.n	800766a <__swsetup_r+0x66>
 8007664:	4630      	mov	r0, r6
 8007666:	f7ff f983 	bl	8006970 <_free_r>
 800766a:	2300      	movs	r3, #0
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	2300      	movs	r3, #0
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0308 	orr.w	r3, r3, #8
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	b94b      	cbnz	r3, 800769e <__swsetup_r+0x9a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d003      	beq.n	800769e <__swsetup_r+0x9a>
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f001 f883 	bl	80087a4 <__smakebuf_r>
 800769e:	89a0      	ldrh	r0, [r4, #12]
 80076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a4:	f010 0301 	ands.w	r3, r0, #1
 80076a8:	d00a      	beq.n	80076c0 <__swsetup_r+0xbc>
 80076aa:	2300      	movs	r3, #0
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	425b      	negs	r3, r3
 80076b2:	61a3      	str	r3, [r4, #24]
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b943      	cbnz	r3, 80076ca <__swsetup_r+0xc6>
 80076b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076bc:	d1ba      	bne.n	8007634 <__swsetup_r+0x30>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	0781      	lsls	r1, r0, #30
 80076c2:	bf58      	it	pl
 80076c4:	6963      	ldrpl	r3, [r4, #20]
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	e7f4      	b.n	80076b4 <__swsetup_r+0xb0>
 80076ca:	2000      	movs	r0, #0
 80076cc:	e7f7      	b.n	80076be <__swsetup_r+0xba>
 80076ce:	bf00      	nop
 80076d0:	20000080 	.word	0x20000080
 80076d4:	08009b48 	.word	0x08009b48
 80076d8:	08009b68 	.word	0x08009b68
 80076dc:	08009b28 	.word	0x08009b28

080076e0 <quorem>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	6903      	ldr	r3, [r0, #16]
 80076e6:	690c      	ldr	r4, [r1, #16]
 80076e8:	4607      	mov	r7, r0
 80076ea:	42a3      	cmp	r3, r4
 80076ec:	f2c0 8083 	blt.w	80077f6 <quorem+0x116>
 80076f0:	3c01      	subs	r4, #1
 80076f2:	f100 0514 	add.w	r5, r0, #20
 80076f6:	f101 0814 	add.w	r8, r1, #20
 80076fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007708:	3301      	adds	r3, #1
 800770a:	429a      	cmp	r2, r3
 800770c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007718:	d332      	bcc.n	8007780 <quorem+0xa0>
 800771a:	f04f 0e00 	mov.w	lr, #0
 800771e:	4640      	mov	r0, r8
 8007720:	46ac      	mov	ip, r5
 8007722:	46f2      	mov	sl, lr
 8007724:	f850 2b04 	ldr.w	r2, [r0], #4
 8007728:	b293      	uxth	r3, r2
 800772a:	fb06 e303 	mla	r3, r6, r3, lr
 800772e:	0c12      	lsrs	r2, r2, #16
 8007730:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007734:	fb06 e202 	mla	r2, r6, r2, lr
 8007738:	b29b      	uxth	r3, r3
 800773a:	ebaa 0303 	sub.w	r3, sl, r3
 800773e:	f8dc a000 	ldr.w	sl, [ip]
 8007742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007746:	fa1f fa8a 	uxth.w	sl, sl
 800774a:	4453      	add	r3, sl
 800774c:	fa1f fa82 	uxth.w	sl, r2
 8007750:	f8dc 2000 	ldr.w	r2, [ip]
 8007754:	4581      	cmp	r9, r0
 8007756:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800775a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007764:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007768:	f84c 3b04 	str.w	r3, [ip], #4
 800776c:	d2da      	bcs.n	8007724 <quorem+0x44>
 800776e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007772:	b92b      	cbnz	r3, 8007780 <quorem+0xa0>
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	3b04      	subs	r3, #4
 8007778:	429d      	cmp	r5, r3
 800777a:	461a      	mov	r2, r3
 800777c:	d32f      	bcc.n	80077de <quorem+0xfe>
 800777e:	613c      	str	r4, [r7, #16]
 8007780:	4638      	mov	r0, r7
 8007782:	f001 faf1 	bl	8008d68 <__mcmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	db25      	blt.n	80077d6 <quorem+0xf6>
 800778a:	4628      	mov	r0, r5
 800778c:	f04f 0c00 	mov.w	ip, #0
 8007790:	3601      	adds	r6, #1
 8007792:	f858 1b04 	ldr.w	r1, [r8], #4
 8007796:	f8d0 e000 	ldr.w	lr, [r0]
 800779a:	b28b      	uxth	r3, r1
 800779c:	ebac 0303 	sub.w	r3, ip, r3
 80077a0:	fa1f f28e 	uxth.w	r2, lr
 80077a4:	4413      	add	r3, r2
 80077a6:	0c0a      	lsrs	r2, r1, #16
 80077a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b6:	45c1      	cmp	r9, r8
 80077b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077bc:	f840 3b04 	str.w	r3, [r0], #4
 80077c0:	d2e7      	bcs.n	8007792 <quorem+0xb2>
 80077c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ca:	b922      	cbnz	r2, 80077d6 <quorem+0xf6>
 80077cc:	3b04      	subs	r3, #4
 80077ce:	429d      	cmp	r5, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	d30a      	bcc.n	80077ea <quorem+0x10a>
 80077d4:	613c      	str	r4, [r7, #16]
 80077d6:	4630      	mov	r0, r6
 80077d8:	b003      	add	sp, #12
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	3b04      	subs	r3, #4
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d1cb      	bne.n	800777e <quorem+0x9e>
 80077e6:	3c01      	subs	r4, #1
 80077e8:	e7c6      	b.n	8007778 <quorem+0x98>
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	3b04      	subs	r3, #4
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d1f0      	bne.n	80077d4 <quorem+0xf4>
 80077f2:	3c01      	subs	r4, #1
 80077f4:	e7eb      	b.n	80077ce <quorem+0xee>
 80077f6:	2000      	movs	r0, #0
 80077f8:	e7ee      	b.n	80077d8 <quorem+0xf8>
 80077fa:	0000      	movs	r0, r0
 80077fc:	0000      	movs	r0, r0
	...

08007800 <_dtoa_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	461f      	mov	r7, r3
 8007808:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800780a:	b099      	sub	sp, #100	; 0x64
 800780c:	4605      	mov	r5, r0
 800780e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007812:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007816:	b974      	cbnz	r4, 8007836 <_dtoa_r+0x36>
 8007818:	2010      	movs	r0, #16
 800781a:	f7ff f891 	bl	8006940 <malloc>
 800781e:	4602      	mov	r2, r0
 8007820:	6268      	str	r0, [r5, #36]	; 0x24
 8007822:	b920      	cbnz	r0, 800782e <_dtoa_r+0x2e>
 8007824:	21ea      	movs	r1, #234	; 0xea
 8007826:	4bae      	ldr	r3, [pc, #696]	; (8007ae0 <_dtoa_r+0x2e0>)
 8007828:	48ae      	ldr	r0, [pc, #696]	; (8007ae4 <_dtoa_r+0x2e4>)
 800782a:	f001 febd 	bl	80095a8 <__assert_func>
 800782e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007832:	6004      	str	r4, [r0, #0]
 8007834:	60c4      	str	r4, [r0, #12]
 8007836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007838:	6819      	ldr	r1, [r3, #0]
 800783a:	b151      	cbz	r1, 8007852 <_dtoa_r+0x52>
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	2301      	movs	r3, #1
 8007840:	4093      	lsls	r3, r2
 8007842:	604a      	str	r2, [r1, #4]
 8007844:	608b      	str	r3, [r1, #8]
 8007846:	4628      	mov	r0, r5
 8007848:	f001 f854 	bl	80088f4 <_Bfree>
 800784c:	2200      	movs	r2, #0
 800784e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	1e3b      	subs	r3, r7, #0
 8007854:	bfaf      	iteee	ge
 8007856:	2300      	movge	r3, #0
 8007858:	2201      	movlt	r2, #1
 800785a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800785e:	9305      	strlt	r3, [sp, #20]
 8007860:	bfa8      	it	ge
 8007862:	f8c8 3000 	strge.w	r3, [r8]
 8007866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800786a:	4b9f      	ldr	r3, [pc, #636]	; (8007ae8 <_dtoa_r+0x2e8>)
 800786c:	bfb8      	it	lt
 800786e:	f8c8 2000 	strlt.w	r2, [r8]
 8007872:	ea33 0309 	bics.w	r3, r3, r9
 8007876:	d119      	bne.n	80078ac <_dtoa_r+0xac>
 8007878:	f242 730f 	movw	r3, #9999	; 0x270f
 800787c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007884:	4333      	orrs	r3, r6
 8007886:	f000 8580 	beq.w	800838a <_dtoa_r+0xb8a>
 800788a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800788c:	b953      	cbnz	r3, 80078a4 <_dtoa_r+0xa4>
 800788e:	4b97      	ldr	r3, [pc, #604]	; (8007aec <_dtoa_r+0x2ec>)
 8007890:	e022      	b.n	80078d8 <_dtoa_r+0xd8>
 8007892:	4b97      	ldr	r3, [pc, #604]	; (8007af0 <_dtoa_r+0x2f0>)
 8007894:	9308      	str	r3, [sp, #32]
 8007896:	3308      	adds	r3, #8
 8007898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	9808      	ldr	r0, [sp, #32]
 800789e:	b019      	add	sp, #100	; 0x64
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	4b91      	ldr	r3, [pc, #580]	; (8007aec <_dtoa_r+0x2ec>)
 80078a6:	9308      	str	r3, [sp, #32]
 80078a8:	3303      	adds	r3, #3
 80078aa:	e7f5      	b.n	8007898 <_dtoa_r+0x98>
 80078ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80078b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	f7f9 f874 	bl	80009a8 <__aeabi_dcmpeq>
 80078c0:	4680      	mov	r8, r0
 80078c2:	b158      	cbz	r0, 80078dc <_dtoa_r+0xdc>
 80078c4:	2301      	movs	r3, #1
 80078c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8559 	beq.w	8008384 <_dtoa_r+0xb84>
 80078d2:	4888      	ldr	r0, [pc, #544]	; (8007af4 <_dtoa_r+0x2f4>)
 80078d4:	6018      	str	r0, [r3, #0]
 80078d6:	1e43      	subs	r3, r0, #1
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	e7df      	b.n	800789c <_dtoa_r+0x9c>
 80078dc:	ab16      	add	r3, sp, #88	; 0x58
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	ab17      	add	r3, sp, #92	; 0x5c
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4628      	mov	r0, r5
 80078e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078ea:	f001 fae9 	bl	8008ec0 <__d2b>
 80078ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80078f2:	4682      	mov	sl, r0
 80078f4:	2c00      	cmp	r4, #0
 80078f6:	d07e      	beq.n	80079f6 <_dtoa_r+0x1f6>
 80078f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007906:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800790a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800790e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007912:	2200      	movs	r2, #0
 8007914:	4b78      	ldr	r3, [pc, #480]	; (8007af8 <_dtoa_r+0x2f8>)
 8007916:	f7f8 fc27 	bl	8000168 <__aeabi_dsub>
 800791a:	a36b      	add	r3, pc, #428	; (adr r3, 8007ac8 <_dtoa_r+0x2c8>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fdda 	bl	80004d8 <__aeabi_dmul>
 8007924:	a36a      	add	r3, pc, #424	; (adr r3, 8007ad0 <_dtoa_r+0x2d0>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fc1f 	bl	800016c <__adddf3>
 800792e:	4606      	mov	r6, r0
 8007930:	4620      	mov	r0, r4
 8007932:	460f      	mov	r7, r1
 8007934:	f7f8 fd66 	bl	8000404 <__aeabi_i2d>
 8007938:	a367      	add	r3, pc, #412	; (adr r3, 8007ad8 <_dtoa_r+0x2d8>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fdcb 	bl	80004d8 <__aeabi_dmul>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fc0f 	bl	800016c <__adddf3>
 800794e:	4606      	mov	r6, r0
 8007950:	460f      	mov	r7, r1
 8007952:	f7f9 f871 	bl	8000a38 <__aeabi_d2iz>
 8007956:	2200      	movs	r2, #0
 8007958:	4681      	mov	r9, r0
 800795a:	2300      	movs	r3, #0
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f9 f82c 	bl	80009bc <__aeabi_dcmplt>
 8007964:	b148      	cbz	r0, 800797a <_dtoa_r+0x17a>
 8007966:	4648      	mov	r0, r9
 8007968:	f7f8 fd4c 	bl	8000404 <__aeabi_i2d>
 800796c:	4632      	mov	r2, r6
 800796e:	463b      	mov	r3, r7
 8007970:	f7f9 f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8007974:	b908      	cbnz	r0, 800797a <_dtoa_r+0x17a>
 8007976:	f109 39ff 	add.w	r9, r9, #4294967295
 800797a:	f1b9 0f16 	cmp.w	r9, #22
 800797e:	d857      	bhi.n	8007a30 <_dtoa_r+0x230>
 8007980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007984:	4b5d      	ldr	r3, [pc, #372]	; (8007afc <_dtoa_r+0x2fc>)
 8007986:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f9 f815 	bl	80009bc <__aeabi_dcmplt>
 8007992:	2800      	cmp	r0, #0
 8007994:	d04e      	beq.n	8007a34 <_dtoa_r+0x234>
 8007996:	2300      	movs	r3, #0
 8007998:	f109 39ff 	add.w	r9, r9, #4294967295
 800799c:	930f      	str	r3, [sp, #60]	; 0x3c
 800799e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079a0:	1b1c      	subs	r4, r3, r4
 80079a2:	1e63      	subs	r3, r4, #1
 80079a4:	9309      	str	r3, [sp, #36]	; 0x24
 80079a6:	bf49      	itett	mi
 80079a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80079ac:	2300      	movpl	r3, #0
 80079ae:	9306      	strmi	r3, [sp, #24]
 80079b0:	2300      	movmi	r3, #0
 80079b2:	bf54      	ite	pl
 80079b4:	9306      	strpl	r3, [sp, #24]
 80079b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80079b8:	f1b9 0f00 	cmp.w	r9, #0
 80079bc:	db3c      	blt.n	8007a38 <_dtoa_r+0x238>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80079c4:	444b      	add	r3, r9
 80079c6:	9309      	str	r3, [sp, #36]	; 0x24
 80079c8:	2300      	movs	r3, #0
 80079ca:	930a      	str	r3, [sp, #40]	; 0x28
 80079cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d86c      	bhi.n	8007aac <_dtoa_r+0x2ac>
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	bfc4      	itt	gt
 80079d6:	3b04      	subgt	r3, #4
 80079d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80079da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079dc:	bfc8      	it	gt
 80079de:	2400      	movgt	r4, #0
 80079e0:	f1a3 0302 	sub.w	r3, r3, #2
 80079e4:	bfd8      	it	le
 80079e6:	2401      	movle	r4, #1
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	f200 808b 	bhi.w	8007b04 <_dtoa_r+0x304>
 80079ee:	e8df f003 	tbb	[pc, r3]
 80079f2:	4f2d      	.short	0x4f2d
 80079f4:	5b4d      	.short	0x5b4d
 80079f6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80079fa:	441c      	add	r4, r3
 80079fc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	bfc3      	ittte	gt
 8007a04:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a08:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007a0c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a10:	f1c3 0320 	rsble	r3, r3, #32
 8007a14:	bfc6      	itte	gt
 8007a16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a1a:	4318      	orrgt	r0, r3
 8007a1c:	fa06 f003 	lslle.w	r0, r6, r3
 8007a20:	f7f8 fce0 	bl	80003e4 <__aeabi_ui2d>
 8007a24:	2301      	movs	r3, #1
 8007a26:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a2a:	3c01      	subs	r4, #1
 8007a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a2e:	e770      	b.n	8007912 <_dtoa_r+0x112>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e7b3      	b.n	800799c <_dtoa_r+0x19c>
 8007a34:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a36:	e7b2      	b.n	800799e <_dtoa_r+0x19e>
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	eba3 0309 	sub.w	r3, r3, r9
 8007a3e:	9306      	str	r3, [sp, #24]
 8007a40:	f1c9 0300 	rsb	r3, r9, #0
 8007a44:	930a      	str	r3, [sp, #40]	; 0x28
 8007a46:	2300      	movs	r3, #0
 8007a48:	930e      	str	r3, [sp, #56]	; 0x38
 8007a4a:	e7bf      	b.n	80079cc <_dtoa_r+0x1cc>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc59      	bgt.n	8007b0a <_dtoa_r+0x30a>
 8007a56:	f04f 0b01 	mov.w	fp, #1
 8007a5a:	465b      	mov	r3, fp
 8007a5c:	f8cd b008 	str.w	fp, [sp, #8]
 8007a60:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007a64:	2200      	movs	r2, #0
 8007a66:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007a68:	6042      	str	r2, [r0, #4]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	f102 0614 	add.w	r6, r2, #20
 8007a70:	429e      	cmp	r6, r3
 8007a72:	6841      	ldr	r1, [r0, #4]
 8007a74:	d94f      	bls.n	8007b16 <_dtoa_r+0x316>
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fefc 	bl	8008874 <_Balloc>
 8007a7c:	9008      	str	r0, [sp, #32]
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d14d      	bne.n	8007b1e <_dtoa_r+0x31e>
 8007a82:	4602      	mov	r2, r0
 8007a84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a88:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <_dtoa_r+0x300>)
 8007a8a:	e6cd      	b.n	8007828 <_dtoa_r+0x28>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e7de      	b.n	8007a4e <_dtoa_r+0x24e>
 8007a90:	2300      	movs	r3, #0
 8007a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a96:	eb09 0b03 	add.w	fp, r9, r3
 8007a9a:	f10b 0301 	add.w	r3, fp, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	bfb8      	it	lt
 8007aa4:	2301      	movlt	r3, #1
 8007aa6:	e7dd      	b.n	8007a64 <_dtoa_r+0x264>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7f2      	b.n	8007a92 <_dtoa_r+0x292>
 8007aac:	2401      	movs	r4, #1
 8007aae:	2300      	movs	r3, #0
 8007ab0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ab2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ab4:	f04f 3bff 	mov.w	fp, #4294967295
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2312      	movs	r3, #18
 8007abc:	f8cd b008 	str.w	fp, [sp, #8]
 8007ac0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ac2:	e7cf      	b.n	8007a64 <_dtoa_r+0x264>
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	08009aa1 	.word	0x08009aa1
 8007ae4:	08009ab8 	.word	0x08009ab8
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	08009a9d 	.word	0x08009a9d
 8007af0:	08009a94 	.word	0x08009a94
 8007af4:	08009a71 	.word	0x08009a71
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	08009c10 	.word	0x08009c10
 8007b00:	08009b17 	.word	0x08009b17
 8007b04:	2301      	movs	r3, #1
 8007b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b08:	e7d4      	b.n	8007ab4 <_dtoa_r+0x2b4>
 8007b0a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007b0e:	465b      	mov	r3, fp
 8007b10:	f8cd b008 	str.w	fp, [sp, #8]
 8007b14:	e7a6      	b.n	8007a64 <_dtoa_r+0x264>
 8007b16:	3101      	adds	r1, #1
 8007b18:	6041      	str	r1, [r0, #4]
 8007b1a:	0052      	lsls	r2, r2, #1
 8007b1c:	e7a6      	b.n	8007a6c <_dtoa_r+0x26c>
 8007b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b20:	9a08      	ldr	r2, [sp, #32]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	2b0e      	cmp	r3, #14
 8007b28:	f200 80a8 	bhi.w	8007c7c <_dtoa_r+0x47c>
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	f000 80a5 	beq.w	8007c7c <_dtoa_r+0x47c>
 8007b32:	f1b9 0f00 	cmp.w	r9, #0
 8007b36:	dd34      	ble.n	8007ba2 <_dtoa_r+0x3a2>
 8007b38:	4a9a      	ldr	r2, [pc, #616]	; (8007da4 <_dtoa_r+0x5a4>)
 8007b3a:	f009 030f 	and.w	r3, r9, #15
 8007b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b42:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b4e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007b52:	d016      	beq.n	8007b82 <_dtoa_r+0x382>
 8007b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b58:	4b93      	ldr	r3, [pc, #588]	; (8007da8 <_dtoa_r+0x5a8>)
 8007b5a:	2703      	movs	r7, #3
 8007b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b60:	f7f8 fde4 	bl	800072c <__aeabi_ddiv>
 8007b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b68:	f004 040f 	and.w	r4, r4, #15
 8007b6c:	4e8e      	ldr	r6, [pc, #568]	; (8007da8 <_dtoa_r+0x5a8>)
 8007b6e:	b954      	cbnz	r4, 8007b86 <_dtoa_r+0x386>
 8007b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b78:	f7f8 fdd8 	bl	800072c <__aeabi_ddiv>
 8007b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b80:	e029      	b.n	8007bd6 <_dtoa_r+0x3d6>
 8007b82:	2702      	movs	r7, #2
 8007b84:	e7f2      	b.n	8007b6c <_dtoa_r+0x36c>
 8007b86:	07e1      	lsls	r1, r4, #31
 8007b88:	d508      	bpl.n	8007b9c <_dtoa_r+0x39c>
 8007b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b92:	f7f8 fca1 	bl	80004d8 <__aeabi_dmul>
 8007b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b9a:	3701      	adds	r7, #1
 8007b9c:	1064      	asrs	r4, r4, #1
 8007b9e:	3608      	adds	r6, #8
 8007ba0:	e7e5      	b.n	8007b6e <_dtoa_r+0x36e>
 8007ba2:	f000 80a5 	beq.w	8007cf0 <_dtoa_r+0x4f0>
 8007ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007baa:	f1c9 0400 	rsb	r4, r9, #0
 8007bae:	4b7d      	ldr	r3, [pc, #500]	; (8007da4 <_dtoa_r+0x5a4>)
 8007bb0:	f004 020f 	and.w	r2, r4, #15
 8007bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fc8c 	bl	80004d8 <__aeabi_dmul>
 8007bc0:	2702      	movs	r7, #2
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc8:	4e77      	ldr	r6, [pc, #476]	; (8007da8 <_dtoa_r+0x5a8>)
 8007bca:	1124      	asrs	r4, r4, #4
 8007bcc:	2c00      	cmp	r4, #0
 8007bce:	f040 8084 	bne.w	8007cda <_dtoa_r+0x4da>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1d2      	bne.n	8007b7c <_dtoa_r+0x37c>
 8007bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 808b 	beq.w	8007cf4 <_dtoa_r+0x4f4>
 8007bde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007be2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b6f      	ldr	r3, [pc, #444]	; (8007dac <_dtoa_r+0x5ac>)
 8007bee:	f7f8 fee5 	bl	80009bc <__aeabi_dcmplt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d07e      	beq.n	8007cf4 <_dtoa_r+0x4f4>
 8007bf6:	9b02      	ldr	r3, [sp, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d07b      	beq.n	8007cf4 <_dtoa_r+0x4f4>
 8007bfc:	f1bb 0f00 	cmp.w	fp, #0
 8007c00:	dd38      	ble.n	8007c74 <_dtoa_r+0x474>
 8007c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c06:	2200      	movs	r2, #0
 8007c08:	4b69      	ldr	r3, [pc, #420]	; (8007db0 <_dtoa_r+0x5b0>)
 8007c0a:	f7f8 fc65 	bl	80004d8 <__aeabi_dmul>
 8007c0e:	465c      	mov	r4, fp
 8007c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c14:	f109 38ff 	add.w	r8, r9, #4294967295
 8007c18:	3701      	adds	r7, #1
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f7f8 fbf2 	bl	8000404 <__aeabi_i2d>
 8007c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c24:	f7f8 fc58 	bl	80004d8 <__aeabi_dmul>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4b62      	ldr	r3, [pc, #392]	; (8007db4 <_dtoa_r+0x5b4>)
 8007c2c:	f7f8 fa9e 	bl	800016c <__adddf3>
 8007c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c38:	9611      	str	r6, [sp, #68]	; 0x44
 8007c3a:	2c00      	cmp	r4, #0
 8007c3c:	d15d      	bne.n	8007cfa <_dtoa_r+0x4fa>
 8007c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c42:	2200      	movs	r2, #0
 8007c44:	4b5c      	ldr	r3, [pc, #368]	; (8007db8 <_dtoa_r+0x5b8>)
 8007c46:	f7f8 fa8f 	bl	8000168 <__aeabi_dsub>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c52:	4633      	mov	r3, r6
 8007c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c56:	f7f8 fecf 	bl	80009f8 <__aeabi_dcmpgt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f040 829e 	bne.w	800819c <_dtoa_r+0x99c>
 8007c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c6a:	f7f8 fea7 	bl	80009bc <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f040 8292 	bne.w	8008198 <_dtoa_r+0x998>
 8007c74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f2c0 8153 	blt.w	8007f2a <_dtoa_r+0x72a>
 8007c84:	f1b9 0f0e 	cmp.w	r9, #14
 8007c88:	f300 814f 	bgt.w	8007f2a <_dtoa_r+0x72a>
 8007c8c:	4b45      	ldr	r3, [pc, #276]	; (8007da4 <_dtoa_r+0x5a4>)
 8007c8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f280 80db 	bge.w	8007e58 <_dtoa_r+0x658>
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f300 80d7 	bgt.w	8007e58 <_dtoa_r+0x658>
 8007caa:	f040 8274 	bne.w	8008196 <_dtoa_r+0x996>
 8007cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b40      	ldr	r3, [pc, #256]	; (8007db8 <_dtoa_r+0x5b8>)
 8007cb6:	f7f8 fc0f 	bl	80004d8 <__aeabi_dmul>
 8007cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cbe:	f7f8 fe91 	bl	80009e4 <__aeabi_dcmpge>
 8007cc2:	9c02      	ldr	r4, [sp, #8]
 8007cc4:	4626      	mov	r6, r4
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 824a 	bne.w	8008160 <_dtoa_r+0x960>
 8007ccc:	2331      	movs	r3, #49	; 0x31
 8007cce:	9f08      	ldr	r7, [sp, #32]
 8007cd0:	f109 0901 	add.w	r9, r9, #1
 8007cd4:	f807 3b01 	strb.w	r3, [r7], #1
 8007cd8:	e246      	b.n	8008168 <_dtoa_r+0x968>
 8007cda:	07e2      	lsls	r2, r4, #31
 8007cdc:	d505      	bpl.n	8007cea <_dtoa_r+0x4ea>
 8007cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ce2:	f7f8 fbf9 	bl	80004d8 <__aeabi_dmul>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	3701      	adds	r7, #1
 8007cea:	1064      	asrs	r4, r4, #1
 8007cec:	3608      	adds	r6, #8
 8007cee:	e76d      	b.n	8007bcc <_dtoa_r+0x3cc>
 8007cf0:	2702      	movs	r7, #2
 8007cf2:	e770      	b.n	8007bd6 <_dtoa_r+0x3d6>
 8007cf4:	46c8      	mov	r8, r9
 8007cf6:	9c02      	ldr	r4, [sp, #8]
 8007cf8:	e78f      	b.n	8007c1a <_dtoa_r+0x41a>
 8007cfa:	9908      	ldr	r1, [sp, #32]
 8007cfc:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <_dtoa_r+0x5a4>)
 8007cfe:	4421      	add	r1, r4
 8007d00:	9112      	str	r1, [sp, #72]	; 0x48
 8007d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d055      	beq.n	8007dc0 <_dtoa_r+0x5c0>
 8007d14:	2000      	movs	r0, #0
 8007d16:	4929      	ldr	r1, [pc, #164]	; (8007dbc <_dtoa_r+0x5bc>)
 8007d18:	f7f8 fd08 	bl	800072c <__aeabi_ddiv>
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4632      	mov	r2, r6
 8007d20:	f7f8 fa22 	bl	8000168 <__aeabi_dsub>
 8007d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d28:	9f08      	ldr	r7, [sp, #32]
 8007d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d2e:	f7f8 fe83 	bl	8000a38 <__aeabi_d2iz>
 8007d32:	4604      	mov	r4, r0
 8007d34:	f7f8 fb66 	bl	8000404 <__aeabi_i2d>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d40:	f7f8 fa12 	bl	8000168 <__aeabi_dsub>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	3430      	adds	r4, #48	; 0x30
 8007d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d52:	f807 4b01 	strb.w	r4, [r7], #1
 8007d56:	f7f8 fe31 	bl	80009bc <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d174      	bne.n	8007e48 <_dtoa_r+0x648>
 8007d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d62:	2000      	movs	r0, #0
 8007d64:	4911      	ldr	r1, [pc, #68]	; (8007dac <_dtoa_r+0x5ac>)
 8007d66:	f7f8 f9ff 	bl	8000168 <__aeabi_dsub>
 8007d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d6e:	f7f8 fe25 	bl	80009bc <__aeabi_dcmplt>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f040 80b6 	bne.w	8007ee4 <_dtoa_r+0x6e4>
 8007d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d7a:	429f      	cmp	r7, r3
 8007d7c:	f43f af7a 	beq.w	8007c74 <_dtoa_r+0x474>
 8007d80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d84:	2200      	movs	r2, #0
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <_dtoa_r+0x5b0>)
 8007d88:	f7f8 fba6 	bl	80004d8 <__aeabi_dmul>
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <_dtoa_r+0x5b0>)
 8007d98:	f7f8 fb9e 	bl	80004d8 <__aeabi_dmul>
 8007d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da0:	e7c3      	b.n	8007d2a <_dtoa_r+0x52a>
 8007da2:	bf00      	nop
 8007da4:	08009c10 	.word	0x08009c10
 8007da8:	08009be8 	.word	0x08009be8
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fb88 	bl	80004d8 <__aeabi_dmul>
 8007dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dce:	9c08      	ldr	r4, [sp, #32]
 8007dd0:	9314      	str	r3, [sp, #80]	; 0x50
 8007dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd6:	f7f8 fe2f 	bl	8000a38 <__aeabi_d2iz>
 8007dda:	9015      	str	r0, [sp, #84]	; 0x54
 8007ddc:	f7f8 fb12 	bl	8000404 <__aeabi_i2d>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de8:	f7f8 f9be 	bl	8000168 <__aeabi_dsub>
 8007dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dee:	4606      	mov	r6, r0
 8007df0:	3330      	adds	r3, #48	; 0x30
 8007df2:	f804 3b01 	strb.w	r3, [r4], #1
 8007df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007df8:	460f      	mov	r7, r1
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	d124      	bne.n	8007e4c <_dtoa_r+0x64c>
 8007e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e06:	4bb3      	ldr	r3, [pc, #716]	; (80080d4 <_dtoa_r+0x8d4>)
 8007e08:	f7f8 f9b0 	bl	800016c <__adddf3>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d162      	bne.n	8007ee2 <_dtoa_r+0x6e2>
 8007e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e20:	2000      	movs	r0, #0
 8007e22:	49ac      	ldr	r1, [pc, #688]	; (80080d4 <_dtoa_r+0x8d4>)
 8007e24:	f7f8 f9a0 	bl	8000168 <__aeabi_dsub>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fdc4 	bl	80009bc <__aeabi_dcmplt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f af1d 	beq.w	8007c74 <_dtoa_r+0x474>
 8007e3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e3c:	1e7b      	subs	r3, r7, #1
 8007e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8007e40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d0f8      	beq.n	8007e3a <_dtoa_r+0x63a>
 8007e48:	46c1      	mov	r9, r8
 8007e4a:	e03a      	b.n	8007ec2 <_dtoa_r+0x6c2>
 8007e4c:	4ba2      	ldr	r3, [pc, #648]	; (80080d8 <_dtoa_r+0x8d8>)
 8007e4e:	f7f8 fb43 	bl	80004d8 <__aeabi_dmul>
 8007e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e56:	e7bc      	b.n	8007dd2 <_dtoa_r+0x5d2>
 8007e58:	9f08      	ldr	r7, [sp, #32]
 8007e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e62:	f7f8 fc63 	bl	800072c <__aeabi_ddiv>
 8007e66:	f7f8 fde7 	bl	8000a38 <__aeabi_d2iz>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	f7f8 faca 	bl	8000404 <__aeabi_i2d>
 8007e70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e74:	f7f8 fb30 	bl	80004d8 <__aeabi_dmul>
 8007e78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4602      	mov	r2, r0
 8007e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e84:	f7f8 f970 	bl	8000168 <__aeabi_dsub>
 8007e88:	f807 6b01 	strb.w	r6, [r7], #1
 8007e8c:	9e08      	ldr	r6, [sp, #32]
 8007e8e:	9b02      	ldr	r3, [sp, #8]
 8007e90:	1bbe      	subs	r6, r7, r6
 8007e92:	42b3      	cmp	r3, r6
 8007e94:	d13a      	bne.n	8007f0c <_dtoa_r+0x70c>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	f7f8 f967 	bl	800016c <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ea6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eaa:	f7f8 fda5 	bl	80009f8 <__aeabi_dcmpgt>
 8007eae:	bb58      	cbnz	r0, 8007f08 <_dtoa_r+0x708>
 8007eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb8:	f7f8 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8007ebc:	b108      	cbz	r0, 8007ec2 <_dtoa_r+0x6c2>
 8007ebe:	07e1      	lsls	r1, r4, #31
 8007ec0:	d422      	bmi.n	8007f08 <_dtoa_r+0x708>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	f000 fd15 	bl	80088f4 <_Bfree>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	703b      	strb	r3, [r7, #0]
 8007ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ed0:	f109 0001 	add.w	r0, r9, #1
 8007ed4:	6018      	str	r0, [r3, #0]
 8007ed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f43f acdf 	beq.w	800789c <_dtoa_r+0x9c>
 8007ede:	601f      	str	r7, [r3, #0]
 8007ee0:	e4dc      	b.n	800789c <_dtoa_r+0x9c>
 8007ee2:	4627      	mov	r7, r4
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eec:	2a39      	cmp	r2, #57	; 0x39
 8007eee:	d107      	bne.n	8007f00 <_dtoa_r+0x700>
 8007ef0:	9a08      	ldr	r2, [sp, #32]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d1f7      	bne.n	8007ee6 <_dtoa_r+0x6e6>
 8007ef6:	2230      	movs	r2, #48	; 0x30
 8007ef8:	9908      	ldr	r1, [sp, #32]
 8007efa:	f108 0801 	add.w	r8, r8, #1
 8007efe:	700a      	strb	r2, [r1, #0]
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	3201      	adds	r2, #1
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	e79f      	b.n	8007e48 <_dtoa_r+0x648>
 8007f08:	46c8      	mov	r8, r9
 8007f0a:	e7eb      	b.n	8007ee4 <_dtoa_r+0x6e4>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4b72      	ldr	r3, [pc, #456]	; (80080d8 <_dtoa_r+0x8d8>)
 8007f10:	f7f8 fae2 	bl	80004d8 <__aeabi_dmul>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f7f8 fd42 	bl	80009a8 <__aeabi_dcmpeq>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d098      	beq.n	8007e5a <_dtoa_r+0x65a>
 8007f28:	e7cb      	b.n	8007ec2 <_dtoa_r+0x6c2>
 8007f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	f000 80cd 	beq.w	80080cc <_dtoa_r+0x8cc>
 8007f32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f34:	2a01      	cmp	r2, #1
 8007f36:	f300 80af 	bgt.w	8008098 <_dtoa_r+0x898>
 8007f3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	f000 80a7 	beq.w	8008090 <_dtoa_r+0x890>
 8007f42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f48:	9f06      	ldr	r7, [sp, #24]
 8007f4a:	9a06      	ldr	r2, [sp, #24]
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	441a      	add	r2, r3
 8007f50:	9206      	str	r2, [sp, #24]
 8007f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f54:	4628      	mov	r0, r5
 8007f56:	441a      	add	r2, r3
 8007f58:	9209      	str	r2, [sp, #36]	; 0x24
 8007f5a:	f000 fd85 	bl	8008a68 <__i2b>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	dd0c      	ble.n	8007f7e <_dtoa_r+0x77e>
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd09      	ble.n	8007f7e <_dtoa_r+0x77e>
 8007f6a:	42bb      	cmp	r3, r7
 8007f6c:	bfa8      	it	ge
 8007f6e:	463b      	movge	r3, r7
 8007f70:	9a06      	ldr	r2, [sp, #24]
 8007f72:	1aff      	subs	r7, r7, r3
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	9206      	str	r2, [sp, #24]
 8007f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	b1f3      	cbz	r3, 8007fc0 <_dtoa_r+0x7c0>
 8007f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80a9 	beq.w	80080dc <_dtoa_r+0x8dc>
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	dd10      	ble.n	8007fb0 <_dtoa_r+0x7b0>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4622      	mov	r2, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 fe22 	bl	8008bdc <__pow5mult>
 8007f98:	4652      	mov	r2, sl
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 fd78 	bl	8008a94 <__multiply>
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4651      	mov	r1, sl
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 fca3 	bl	80088f4 <_Bfree>
 8007fae:	46c2      	mov	sl, r8
 8007fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb2:	1b1a      	subs	r2, r3, r4
 8007fb4:	d004      	beq.n	8007fc0 <_dtoa_r+0x7c0>
 8007fb6:	4651      	mov	r1, sl
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f000 fe0f 	bl	8008bdc <__pow5mult>
 8007fbe:	4682      	mov	sl, r0
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f000 fd50 	bl	8008a68 <__i2b>
 8007fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fca:	4604      	mov	r4, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f340 8087 	ble.w	80080e0 <_dtoa_r+0x8e0>
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fe00 	bl	8008bdc <__pow5mult>
 8007fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f340 8080 	ble.w	80080e6 <_dtoa_r+0x8e6>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ff0:	6918      	ldr	r0, [r3, #16]
 8007ff2:	f000 fceb 	bl	80089cc <__hi0bits>
 8007ff6:	f1c0 0020 	rsb	r0, r0, #32
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	4418      	add	r0, r3
 8007ffe:	f010 001f 	ands.w	r0, r0, #31
 8008002:	f000 8092 	beq.w	800812a <_dtoa_r+0x92a>
 8008006:	f1c0 0320 	rsb	r3, r0, #32
 800800a:	2b04      	cmp	r3, #4
 800800c:	f340 808a 	ble.w	8008124 <_dtoa_r+0x924>
 8008010:	f1c0 001c 	rsb	r0, r0, #28
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	4407      	add	r7, r0
 8008018:	4403      	add	r3, r0
 800801a:	9306      	str	r3, [sp, #24]
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	4403      	add	r3, r0
 8008020:	9309      	str	r3, [sp, #36]	; 0x24
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd05      	ble.n	8008034 <_dtoa_r+0x834>
 8008028:	4651      	mov	r1, sl
 800802a:	461a      	mov	r2, r3
 800802c:	4628      	mov	r0, r5
 800802e:	f000 fe2f 	bl	8008c90 <__lshift>
 8008032:	4682      	mov	sl, r0
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	dd05      	ble.n	8008046 <_dtoa_r+0x846>
 800803a:	4621      	mov	r1, r4
 800803c:	461a      	mov	r2, r3
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fe26 	bl	8008c90 <__lshift>
 8008044:	4604      	mov	r4, r0
 8008046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d070      	beq.n	800812e <_dtoa_r+0x92e>
 800804c:	4621      	mov	r1, r4
 800804e:	4650      	mov	r0, sl
 8008050:	f000 fe8a 	bl	8008d68 <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	da6a      	bge.n	800812e <_dtoa_r+0x92e>
 8008058:	2300      	movs	r3, #0
 800805a:	4651      	mov	r1, sl
 800805c:	220a      	movs	r2, #10
 800805e:	4628      	mov	r0, r5
 8008060:	f000 fc6a 	bl	8008938 <__multadd>
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	4682      	mov	sl, r0
 8008068:	f109 39ff 	add.w	r9, r9, #4294967295
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8193 	beq.w	8008398 <_dtoa_r+0xb98>
 8008072:	4631      	mov	r1, r6
 8008074:	2300      	movs	r3, #0
 8008076:	220a      	movs	r2, #10
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fc5d 	bl	8008938 <__multadd>
 800807e:	f1bb 0f00 	cmp.w	fp, #0
 8008082:	4606      	mov	r6, r0
 8008084:	f300 8093 	bgt.w	80081ae <_dtoa_r+0x9ae>
 8008088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800808a:	2b02      	cmp	r3, #2
 800808c:	dc57      	bgt.n	800813e <_dtoa_r+0x93e>
 800808e:	e08e      	b.n	80081ae <_dtoa_r+0x9ae>
 8008090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008092:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008096:	e756      	b.n	8007f46 <_dtoa_r+0x746>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	1e5c      	subs	r4, r3, #1
 800809c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809e:	42a3      	cmp	r3, r4
 80080a0:	bfb7      	itett	lt
 80080a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080a4:	1b1c      	subge	r4, r3, r4
 80080a6:	1ae2      	sublt	r2, r4, r3
 80080a8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80080aa:	bfbe      	ittt	lt
 80080ac:	940a      	strlt	r4, [sp, #40]	; 0x28
 80080ae:	189b      	addlt	r3, r3, r2
 80080b0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	bfb8      	it	lt
 80080b6:	2400      	movlt	r4, #0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfbb      	ittet	lt
 80080bc:	9b06      	ldrlt	r3, [sp, #24]
 80080be:	9a02      	ldrlt	r2, [sp, #8]
 80080c0:	9f06      	ldrge	r7, [sp, #24]
 80080c2:	1a9f      	sublt	r7, r3, r2
 80080c4:	bfac      	ite	ge
 80080c6:	9b02      	ldrge	r3, [sp, #8]
 80080c8:	2300      	movlt	r3, #0
 80080ca:	e73e      	b.n	8007f4a <_dtoa_r+0x74a>
 80080cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080ce:	9f06      	ldr	r7, [sp, #24]
 80080d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080d2:	e745      	b.n	8007f60 <_dtoa_r+0x760>
 80080d4:	3fe00000 	.word	0x3fe00000
 80080d8:	40240000 	.word	0x40240000
 80080dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080de:	e76a      	b.n	8007fb6 <_dtoa_r+0x7b6>
 80080e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	dc19      	bgt.n	800811a <_dtoa_r+0x91a>
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	b9bb      	cbnz	r3, 800811a <_dtoa_r+0x91a>
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080f0:	b99b      	cbnz	r3, 800811a <_dtoa_r+0x91a>
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080f8:	0d1b      	lsrs	r3, r3, #20
 80080fa:	051b      	lsls	r3, r3, #20
 80080fc:	b183      	cbz	r3, 8008120 <_dtoa_r+0x920>
 80080fe:	f04f 0801 	mov.w	r8, #1
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	3301      	adds	r3, #1
 8008106:	9306      	str	r3, [sp, #24]
 8008108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	9309      	str	r3, [sp, #36]	; 0x24
 800810e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af6a 	bne.w	8007fea <_dtoa_r+0x7ea>
 8008116:	2001      	movs	r0, #1
 8008118:	e76f      	b.n	8007ffa <_dtoa_r+0x7fa>
 800811a:	f04f 0800 	mov.w	r8, #0
 800811e:	e7f6      	b.n	800810e <_dtoa_r+0x90e>
 8008120:	4698      	mov	r8, r3
 8008122:	e7f4      	b.n	800810e <_dtoa_r+0x90e>
 8008124:	f43f af7d 	beq.w	8008022 <_dtoa_r+0x822>
 8008128:	4618      	mov	r0, r3
 800812a:	301c      	adds	r0, #28
 800812c:	e772      	b.n	8008014 <_dtoa_r+0x814>
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	dc36      	bgt.n	80081a2 <_dtoa_r+0x9a2>
 8008134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008136:	2b02      	cmp	r3, #2
 8008138:	dd33      	ble.n	80081a2 <_dtoa_r+0x9a2>
 800813a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800813e:	f1bb 0f00 	cmp.w	fp, #0
 8008142:	d10d      	bne.n	8008160 <_dtoa_r+0x960>
 8008144:	4621      	mov	r1, r4
 8008146:	465b      	mov	r3, fp
 8008148:	2205      	movs	r2, #5
 800814a:	4628      	mov	r0, r5
 800814c:	f000 fbf4 	bl	8008938 <__multadd>
 8008150:	4601      	mov	r1, r0
 8008152:	4604      	mov	r4, r0
 8008154:	4650      	mov	r0, sl
 8008156:	f000 fe07 	bl	8008d68 <__mcmp>
 800815a:	2800      	cmp	r0, #0
 800815c:	f73f adb6 	bgt.w	8007ccc <_dtoa_r+0x4cc>
 8008160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008162:	9f08      	ldr	r7, [sp, #32]
 8008164:	ea6f 0903 	mvn.w	r9, r3
 8008168:	f04f 0800 	mov.w	r8, #0
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f000 fbc0 	bl	80088f4 <_Bfree>
 8008174:	2e00      	cmp	r6, #0
 8008176:	f43f aea4 	beq.w	8007ec2 <_dtoa_r+0x6c2>
 800817a:	f1b8 0f00 	cmp.w	r8, #0
 800817e:	d005      	beq.n	800818c <_dtoa_r+0x98c>
 8008180:	45b0      	cmp	r8, r6
 8008182:	d003      	beq.n	800818c <_dtoa_r+0x98c>
 8008184:	4641      	mov	r1, r8
 8008186:	4628      	mov	r0, r5
 8008188:	f000 fbb4 	bl	80088f4 <_Bfree>
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	f000 fbb0 	bl	80088f4 <_Bfree>
 8008194:	e695      	b.n	8007ec2 <_dtoa_r+0x6c2>
 8008196:	2400      	movs	r4, #0
 8008198:	4626      	mov	r6, r4
 800819a:	e7e1      	b.n	8008160 <_dtoa_r+0x960>
 800819c:	46c1      	mov	r9, r8
 800819e:	4626      	mov	r6, r4
 80081a0:	e594      	b.n	8007ccc <_dtoa_r+0x4cc>
 80081a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80fc 	beq.w	80083a6 <_dtoa_r+0xba6>
 80081ae:	2f00      	cmp	r7, #0
 80081b0:	dd05      	ble.n	80081be <_dtoa_r+0x9be>
 80081b2:	4631      	mov	r1, r6
 80081b4:	463a      	mov	r2, r7
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 fd6a 	bl	8008c90 <__lshift>
 80081bc:	4606      	mov	r6, r0
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d05c      	beq.n	800827e <_dtoa_r+0xa7e>
 80081c4:	4628      	mov	r0, r5
 80081c6:	6871      	ldr	r1, [r6, #4]
 80081c8:	f000 fb54 	bl	8008874 <_Balloc>
 80081cc:	4607      	mov	r7, r0
 80081ce:	b928      	cbnz	r0, 80081dc <_dtoa_r+0x9dc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081d6:	4b7e      	ldr	r3, [pc, #504]	; (80083d0 <_dtoa_r+0xbd0>)
 80081d8:	f7ff bb26 	b.w	8007828 <_dtoa_r+0x28>
 80081dc:	6932      	ldr	r2, [r6, #16]
 80081de:	f106 010c 	add.w	r1, r6, #12
 80081e2:	3202      	adds	r2, #2
 80081e4:	0092      	lsls	r2, r2, #2
 80081e6:	300c      	adds	r0, #12
 80081e8:	f000 fb2a 	bl	8008840 <memcpy>
 80081ec:	2201      	movs	r2, #1
 80081ee:	4639      	mov	r1, r7
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 fd4d 	bl	8008c90 <__lshift>
 80081f6:	46b0      	mov	r8, r6
 80081f8:	4606      	mov	r6, r0
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	3301      	adds	r3, #1
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	9b08      	ldr	r3, [sp, #32]
 8008202:	445b      	add	r3, fp
 8008204:	930a      	str	r3, [sp, #40]	; 0x28
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	9309      	str	r3, [sp, #36]	; 0x24
 800820e:	9b02      	ldr	r3, [sp, #8]
 8008210:	4621      	mov	r1, r4
 8008212:	4650      	mov	r0, sl
 8008214:	f103 3bff 	add.w	fp, r3, #4294967295
 8008218:	f7ff fa62 	bl	80076e0 <quorem>
 800821c:	4603      	mov	r3, r0
 800821e:	4641      	mov	r1, r8
 8008220:	3330      	adds	r3, #48	; 0x30
 8008222:	9004      	str	r0, [sp, #16]
 8008224:	4650      	mov	r0, sl
 8008226:	930b      	str	r3, [sp, #44]	; 0x2c
 8008228:	f000 fd9e 	bl	8008d68 <__mcmp>
 800822c:	4632      	mov	r2, r6
 800822e:	9006      	str	r0, [sp, #24]
 8008230:	4621      	mov	r1, r4
 8008232:	4628      	mov	r0, r5
 8008234:	f000 fdb4 	bl	8008da0 <__mdiff>
 8008238:	68c2      	ldr	r2, [r0, #12]
 800823a:	4607      	mov	r7, r0
 800823c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823e:	bb02      	cbnz	r2, 8008282 <_dtoa_r+0xa82>
 8008240:	4601      	mov	r1, r0
 8008242:	4650      	mov	r0, sl
 8008244:	f000 fd90 	bl	8008d68 <__mcmp>
 8008248:	4602      	mov	r2, r0
 800824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824c:	4639      	mov	r1, r7
 800824e:	4628      	mov	r0, r5
 8008250:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008254:	f000 fb4e 	bl	80088f4 <_Bfree>
 8008258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800825a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800825c:	9f02      	ldr	r7, [sp, #8]
 800825e:	ea43 0102 	orr.w	r1, r3, r2
 8008262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008264:	430b      	orrs	r3, r1
 8008266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008268:	d10d      	bne.n	8008286 <_dtoa_r+0xa86>
 800826a:	2b39      	cmp	r3, #57	; 0x39
 800826c:	d027      	beq.n	80082be <_dtoa_r+0xabe>
 800826e:	9a06      	ldr	r2, [sp, #24]
 8008270:	2a00      	cmp	r2, #0
 8008272:	dd01      	ble.n	8008278 <_dtoa_r+0xa78>
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	3331      	adds	r3, #49	; 0x31
 8008278:	f88b 3000 	strb.w	r3, [fp]
 800827c:	e776      	b.n	800816c <_dtoa_r+0x96c>
 800827e:	4630      	mov	r0, r6
 8008280:	e7b9      	b.n	80081f6 <_dtoa_r+0x9f6>
 8008282:	2201      	movs	r2, #1
 8008284:	e7e2      	b.n	800824c <_dtoa_r+0xa4c>
 8008286:	9906      	ldr	r1, [sp, #24]
 8008288:	2900      	cmp	r1, #0
 800828a:	db04      	blt.n	8008296 <_dtoa_r+0xa96>
 800828c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800828e:	4301      	orrs	r1, r0
 8008290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008292:	4301      	orrs	r1, r0
 8008294:	d120      	bne.n	80082d8 <_dtoa_r+0xad8>
 8008296:	2a00      	cmp	r2, #0
 8008298:	ddee      	ble.n	8008278 <_dtoa_r+0xa78>
 800829a:	4651      	mov	r1, sl
 800829c:	2201      	movs	r2, #1
 800829e:	4628      	mov	r0, r5
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	f000 fcf5 	bl	8008c90 <__lshift>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4682      	mov	sl, r0
 80082aa:	f000 fd5d 	bl	8008d68 <__mcmp>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	dc02      	bgt.n	80082ba <_dtoa_r+0xaba>
 80082b4:	d1e0      	bne.n	8008278 <_dtoa_r+0xa78>
 80082b6:	07da      	lsls	r2, r3, #31
 80082b8:	d5de      	bpl.n	8008278 <_dtoa_r+0xa78>
 80082ba:	2b39      	cmp	r3, #57	; 0x39
 80082bc:	d1da      	bne.n	8008274 <_dtoa_r+0xa74>
 80082be:	2339      	movs	r3, #57	; 0x39
 80082c0:	f88b 3000 	strb.w	r3, [fp]
 80082c4:	463b      	mov	r3, r7
 80082c6:	461f      	mov	r7, r3
 80082c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	2a39      	cmp	r2, #57	; 0x39
 80082d0:	d050      	beq.n	8008374 <_dtoa_r+0xb74>
 80082d2:	3201      	adds	r2, #1
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e749      	b.n	800816c <_dtoa_r+0x96c>
 80082d8:	2a00      	cmp	r2, #0
 80082da:	dd03      	ble.n	80082e4 <_dtoa_r+0xae4>
 80082dc:	2b39      	cmp	r3, #57	; 0x39
 80082de:	d0ee      	beq.n	80082be <_dtoa_r+0xabe>
 80082e0:	3301      	adds	r3, #1
 80082e2:	e7c9      	b.n	8008278 <_dtoa_r+0xa78>
 80082e4:	9a02      	ldr	r2, [sp, #8]
 80082e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082ec:	428a      	cmp	r2, r1
 80082ee:	d02a      	beq.n	8008346 <_dtoa_r+0xb46>
 80082f0:	4651      	mov	r1, sl
 80082f2:	2300      	movs	r3, #0
 80082f4:	220a      	movs	r2, #10
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 fb1e 	bl	8008938 <__multadd>
 80082fc:	45b0      	cmp	r8, r6
 80082fe:	4682      	mov	sl, r0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	f04f 020a 	mov.w	r2, #10
 8008308:	4641      	mov	r1, r8
 800830a:	4628      	mov	r0, r5
 800830c:	d107      	bne.n	800831e <_dtoa_r+0xb1e>
 800830e:	f000 fb13 	bl	8008938 <__multadd>
 8008312:	4680      	mov	r8, r0
 8008314:	4606      	mov	r6, r0
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	3301      	adds	r3, #1
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	e777      	b.n	800820e <_dtoa_r+0xa0e>
 800831e:	f000 fb0b 	bl	8008938 <__multadd>
 8008322:	4631      	mov	r1, r6
 8008324:	4680      	mov	r8, r0
 8008326:	2300      	movs	r3, #0
 8008328:	220a      	movs	r2, #10
 800832a:	4628      	mov	r0, r5
 800832c:	f000 fb04 	bl	8008938 <__multadd>
 8008330:	4606      	mov	r6, r0
 8008332:	e7f0      	b.n	8008316 <_dtoa_r+0xb16>
 8008334:	f1bb 0f00 	cmp.w	fp, #0
 8008338:	bfcc      	ite	gt
 800833a:	465f      	movgt	r7, fp
 800833c:	2701      	movle	r7, #1
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	9a08      	ldr	r2, [sp, #32]
 8008344:	4417      	add	r7, r2
 8008346:	4651      	mov	r1, sl
 8008348:	2201      	movs	r2, #1
 800834a:	4628      	mov	r0, r5
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	f000 fc9f 	bl	8008c90 <__lshift>
 8008352:	4621      	mov	r1, r4
 8008354:	4682      	mov	sl, r0
 8008356:	f000 fd07 	bl	8008d68 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	dcb2      	bgt.n	80082c4 <_dtoa_r+0xac4>
 800835e:	d102      	bne.n	8008366 <_dtoa_r+0xb66>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	07db      	lsls	r3, r3, #31
 8008364:	d4ae      	bmi.n	80082c4 <_dtoa_r+0xac4>
 8008366:	463b      	mov	r3, r7
 8008368:	461f      	mov	r7, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a30      	cmp	r2, #48	; 0x30
 8008370:	d0fa      	beq.n	8008368 <_dtoa_r+0xb68>
 8008372:	e6fb      	b.n	800816c <_dtoa_r+0x96c>
 8008374:	9a08      	ldr	r2, [sp, #32]
 8008376:	429a      	cmp	r2, r3
 8008378:	d1a5      	bne.n	80082c6 <_dtoa_r+0xac6>
 800837a:	2331      	movs	r3, #49	; 0x31
 800837c:	f109 0901 	add.w	r9, r9, #1
 8008380:	7013      	strb	r3, [r2, #0]
 8008382:	e6f3      	b.n	800816c <_dtoa_r+0x96c>
 8008384:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <_dtoa_r+0xbd4>)
 8008386:	f7ff baa7 	b.w	80078d8 <_dtoa_r+0xd8>
 800838a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800838c:	2b00      	cmp	r3, #0
 800838e:	f47f aa80 	bne.w	8007892 <_dtoa_r+0x92>
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <_dtoa_r+0xbd8>)
 8008394:	f7ff baa0 	b.w	80078d8 <_dtoa_r+0xd8>
 8008398:	f1bb 0f00 	cmp.w	fp, #0
 800839c:	dc03      	bgt.n	80083a6 <_dtoa_r+0xba6>
 800839e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	f73f aecc 	bgt.w	800813e <_dtoa_r+0x93e>
 80083a6:	9f08      	ldr	r7, [sp, #32]
 80083a8:	4621      	mov	r1, r4
 80083aa:	4650      	mov	r0, sl
 80083ac:	f7ff f998 	bl	80076e0 <quorem>
 80083b0:	9a08      	ldr	r2, [sp, #32]
 80083b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083b6:	f807 3b01 	strb.w	r3, [r7], #1
 80083ba:	1aba      	subs	r2, r7, r2
 80083bc:	4593      	cmp	fp, r2
 80083be:	ddb9      	ble.n	8008334 <_dtoa_r+0xb34>
 80083c0:	4651      	mov	r1, sl
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fab6 	bl	8008938 <__multadd>
 80083cc:	4682      	mov	sl, r0
 80083ce:	e7eb      	b.n	80083a8 <_dtoa_r+0xba8>
 80083d0:	08009b17 	.word	0x08009b17
 80083d4:	08009a70 	.word	0x08009a70
 80083d8:	08009a94 	.word	0x08009a94

080083dc <__sflush_r>:
 80083dc:	898a      	ldrh	r2, [r1, #12]
 80083de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	4605      	mov	r5, r0
 80083e4:	0710      	lsls	r0, r2, #28
 80083e6:	460c      	mov	r4, r1
 80083e8:	d458      	bmi.n	800849c <__sflush_r+0xc0>
 80083ea:	684b      	ldr	r3, [r1, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dc05      	bgt.n	80083fc <__sflush_r+0x20>
 80083f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dc02      	bgt.n	80083fc <__sflush_r+0x20>
 80083f6:	2000      	movs	r0, #0
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fe:	2e00      	cmp	r6, #0
 8008400:	d0f9      	beq.n	80083f6 <__sflush_r+0x1a>
 8008402:	2300      	movs	r3, #0
 8008404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008408:	682f      	ldr	r7, [r5, #0]
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	d032      	beq.n	8008474 <__sflush_r+0x98>
 800840e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	075a      	lsls	r2, r3, #29
 8008414:	d505      	bpl.n	8008422 <__sflush_r+0x46>
 8008416:	6863      	ldr	r3, [r4, #4]
 8008418:	1ac0      	subs	r0, r0, r3
 800841a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800841c:	b10b      	cbz	r3, 8008422 <__sflush_r+0x46>
 800841e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008420:	1ac0      	subs	r0, r0, r3
 8008422:	2300      	movs	r3, #0
 8008424:	4602      	mov	r2, r0
 8008426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008428:	4628      	mov	r0, r5
 800842a:	6a21      	ldr	r1, [r4, #32]
 800842c:	47b0      	blx	r6
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	d106      	bne.n	8008442 <__sflush_r+0x66>
 8008434:	6829      	ldr	r1, [r5, #0]
 8008436:	291d      	cmp	r1, #29
 8008438:	d82c      	bhi.n	8008494 <__sflush_r+0xb8>
 800843a:	4a2a      	ldr	r2, [pc, #168]	; (80084e4 <__sflush_r+0x108>)
 800843c:	40ca      	lsrs	r2, r1
 800843e:	07d6      	lsls	r6, r2, #31
 8008440:	d528      	bpl.n	8008494 <__sflush_r+0xb8>
 8008442:	2200      	movs	r2, #0
 8008444:	6062      	str	r2, [r4, #4]
 8008446:	6922      	ldr	r2, [r4, #16]
 8008448:	04d9      	lsls	r1, r3, #19
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	d504      	bpl.n	8008458 <__sflush_r+0x7c>
 800844e:	1c42      	adds	r2, r0, #1
 8008450:	d101      	bne.n	8008456 <__sflush_r+0x7a>
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	b903      	cbnz	r3, 8008458 <__sflush_r+0x7c>
 8008456:	6560      	str	r0, [r4, #84]	; 0x54
 8008458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800845a:	602f      	str	r7, [r5, #0]
 800845c:	2900      	cmp	r1, #0
 800845e:	d0ca      	beq.n	80083f6 <__sflush_r+0x1a>
 8008460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008464:	4299      	cmp	r1, r3
 8008466:	d002      	beq.n	800846e <__sflush_r+0x92>
 8008468:	4628      	mov	r0, r5
 800846a:	f7fe fa81 	bl	8006970 <_free_r>
 800846e:	2000      	movs	r0, #0
 8008470:	6360      	str	r0, [r4, #52]	; 0x34
 8008472:	e7c1      	b.n	80083f8 <__sflush_r+0x1c>
 8008474:	6a21      	ldr	r1, [r4, #32]
 8008476:	2301      	movs	r3, #1
 8008478:	4628      	mov	r0, r5
 800847a:	47b0      	blx	r6
 800847c:	1c41      	adds	r1, r0, #1
 800847e:	d1c7      	bne.n	8008410 <__sflush_r+0x34>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0c4      	beq.n	8008410 <__sflush_r+0x34>
 8008486:	2b1d      	cmp	r3, #29
 8008488:	d001      	beq.n	800848e <__sflush_r+0xb2>
 800848a:	2b16      	cmp	r3, #22
 800848c:	d101      	bne.n	8008492 <__sflush_r+0xb6>
 800848e:	602f      	str	r7, [r5, #0]
 8008490:	e7b1      	b.n	80083f6 <__sflush_r+0x1a>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	e7ad      	b.n	80083f8 <__sflush_r+0x1c>
 800849c:	690f      	ldr	r7, [r1, #16]
 800849e:	2f00      	cmp	r7, #0
 80084a0:	d0a9      	beq.n	80083f6 <__sflush_r+0x1a>
 80084a2:	0793      	lsls	r3, r2, #30
 80084a4:	bf18      	it	ne
 80084a6:	2300      	movne	r3, #0
 80084a8:	680e      	ldr	r6, [r1, #0]
 80084aa:	bf08      	it	eq
 80084ac:	694b      	ldreq	r3, [r1, #20]
 80084ae:	eba6 0807 	sub.w	r8, r6, r7
 80084b2:	600f      	str	r7, [r1, #0]
 80084b4:	608b      	str	r3, [r1, #8]
 80084b6:	f1b8 0f00 	cmp.w	r8, #0
 80084ba:	dd9c      	ble.n	80083f6 <__sflush_r+0x1a>
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	6a21      	ldr	r1, [r4, #32]
 80084c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084c6:	47b0      	blx	r6
 80084c8:	2800      	cmp	r0, #0
 80084ca:	dc06      	bgt.n	80084da <__sflush_r+0xfe>
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d6:	81a3      	strh	r3, [r4, #12]
 80084d8:	e78e      	b.n	80083f8 <__sflush_r+0x1c>
 80084da:	4407      	add	r7, r0
 80084dc:	eba8 0800 	sub.w	r8, r8, r0
 80084e0:	e7e9      	b.n	80084b6 <__sflush_r+0xda>
 80084e2:	bf00      	nop
 80084e4:	20400001 	.word	0x20400001

080084e8 <_fflush_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	690b      	ldr	r3, [r1, #16]
 80084ec:	4605      	mov	r5, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	b913      	cbnz	r3, 80084f8 <_fflush_r+0x10>
 80084f2:	2500      	movs	r5, #0
 80084f4:	4628      	mov	r0, r5
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	b118      	cbz	r0, 8008502 <_fflush_r+0x1a>
 80084fa:	6983      	ldr	r3, [r0, #24]
 80084fc:	b90b      	cbnz	r3, 8008502 <_fflush_r+0x1a>
 80084fe:	f000 f887 	bl	8008610 <__sinit>
 8008502:	4b14      	ldr	r3, [pc, #80]	; (8008554 <_fflush_r+0x6c>)
 8008504:	429c      	cmp	r4, r3
 8008506:	d11b      	bne.n	8008540 <_fflush_r+0x58>
 8008508:	686c      	ldr	r4, [r5, #4]
 800850a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0ef      	beq.n	80084f2 <_fflush_r+0xa>
 8008512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008514:	07d0      	lsls	r0, r2, #31
 8008516:	d404      	bmi.n	8008522 <_fflush_r+0x3a>
 8008518:	0599      	lsls	r1, r3, #22
 800851a:	d402      	bmi.n	8008522 <_fflush_r+0x3a>
 800851c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851e:	f000 f91a 	bl	8008756 <__retarget_lock_acquire_recursive>
 8008522:	4628      	mov	r0, r5
 8008524:	4621      	mov	r1, r4
 8008526:	f7ff ff59 	bl	80083dc <__sflush_r>
 800852a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800852c:	4605      	mov	r5, r0
 800852e:	07da      	lsls	r2, r3, #31
 8008530:	d4e0      	bmi.n	80084f4 <_fflush_r+0xc>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	059b      	lsls	r3, r3, #22
 8008536:	d4dd      	bmi.n	80084f4 <_fflush_r+0xc>
 8008538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800853a:	f000 f90d 	bl	8008758 <__retarget_lock_release_recursive>
 800853e:	e7d9      	b.n	80084f4 <_fflush_r+0xc>
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <_fflush_r+0x70>)
 8008542:	429c      	cmp	r4, r3
 8008544:	d101      	bne.n	800854a <_fflush_r+0x62>
 8008546:	68ac      	ldr	r4, [r5, #8]
 8008548:	e7df      	b.n	800850a <_fflush_r+0x22>
 800854a:	4b04      	ldr	r3, [pc, #16]	; (800855c <_fflush_r+0x74>)
 800854c:	429c      	cmp	r4, r3
 800854e:	bf08      	it	eq
 8008550:	68ec      	ldreq	r4, [r5, #12]
 8008552:	e7da      	b.n	800850a <_fflush_r+0x22>
 8008554:	08009b48 	.word	0x08009b48
 8008558:	08009b68 	.word	0x08009b68
 800855c:	08009b28 	.word	0x08009b28

08008560 <std>:
 8008560:	2300      	movs	r3, #0
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	e9c0 3300 	strd	r3, r3, [r0]
 800856a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856e:	6083      	str	r3, [r0, #8]
 8008570:	8181      	strh	r1, [r0, #12]
 8008572:	6643      	str	r3, [r0, #100]	; 0x64
 8008574:	81c2      	strh	r2, [r0, #14]
 8008576:	6183      	str	r3, [r0, #24]
 8008578:	4619      	mov	r1, r3
 800857a:	2208      	movs	r2, #8
 800857c:	305c      	adds	r0, #92	; 0x5c
 800857e:	f7fe f9ef 	bl	8006960 <memset>
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x38>)
 8008584:	6224      	str	r4, [r4, #32]
 8008586:	6263      	str	r3, [r4, #36]	; 0x24
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <std+0x3c>)
 800858a:	62a3      	str	r3, [r4, #40]	; 0x28
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <std+0x40>)
 800858e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008590:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <std+0x44>)
 8008592:	6323      	str	r3, [r4, #48]	; 0x30
 8008594:	bd10      	pop	{r4, pc}
 8008596:	bf00      	nop
 8008598:	080094fd 	.word	0x080094fd
 800859c:	0800951f 	.word	0x0800951f
 80085a0:	08009557 	.word	0x08009557
 80085a4:	0800957b 	.word	0x0800957b

080085a8 <_cleanup_r>:
 80085a8:	4901      	ldr	r1, [pc, #4]	; (80085b0 <_cleanup_r+0x8>)
 80085aa:	f000 b8af 	b.w	800870c <_fwalk_reent>
 80085ae:	bf00      	nop
 80085b0:	080084e9 	.word	0x080084e9

080085b4 <__sfmoreglue>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	2568      	movs	r5, #104	; 0x68
 80085b8:	1e4a      	subs	r2, r1, #1
 80085ba:	4355      	muls	r5, r2
 80085bc:	460e      	mov	r6, r1
 80085be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085c2:	f7fe fa21 	bl	8006a08 <_malloc_r>
 80085c6:	4604      	mov	r4, r0
 80085c8:	b140      	cbz	r0, 80085dc <__sfmoreglue+0x28>
 80085ca:	2100      	movs	r1, #0
 80085cc:	e9c0 1600 	strd	r1, r6, [r0]
 80085d0:	300c      	adds	r0, #12
 80085d2:	60a0      	str	r0, [r4, #8]
 80085d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d8:	f7fe f9c2 	bl	8006960 <memset>
 80085dc:	4620      	mov	r0, r4
 80085de:	bd70      	pop	{r4, r5, r6, pc}

080085e0 <__sfp_lock_acquire>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__sfp_lock_acquire+0x8>)
 80085e2:	f000 b8b8 	b.w	8008756 <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000430 	.word	0x20000430

080085ec <__sfp_lock_release>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sfp_lock_release+0x8>)
 80085ee:	f000 b8b3 	b.w	8008758 <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	20000430 	.word	0x20000430

080085f8 <__sinit_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sinit_lock_acquire+0x8>)
 80085fa:	f000 b8ac 	b.w	8008756 <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	2000042b 	.word	0x2000042b

08008604 <__sinit_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sinit_lock_release+0x8>)
 8008606:	f000 b8a7 	b.w	8008758 <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	2000042b 	.word	0x2000042b

08008610 <__sinit>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	f7ff fff0 	bl	80085f8 <__sinit_lock_acquire>
 8008618:	69a3      	ldr	r3, [r4, #24]
 800861a:	b11b      	cbz	r3, 8008624 <__sinit+0x14>
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f7ff bff0 	b.w	8008604 <__sinit_lock_release>
 8008624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008628:	6523      	str	r3, [r4, #80]	; 0x50
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <__sinit+0x68>)
 800862c:	4a13      	ldr	r2, [pc, #76]	; (800867c <__sinit+0x6c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	62a2      	str	r2, [r4, #40]	; 0x28
 8008632:	42a3      	cmp	r3, r4
 8008634:	bf08      	it	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	4620      	mov	r0, r4
 800863a:	bf08      	it	eq
 800863c:	61a3      	streq	r3, [r4, #24]
 800863e:	f000 f81f 	bl	8008680 <__sfp>
 8008642:	6060      	str	r0, [r4, #4]
 8008644:	4620      	mov	r0, r4
 8008646:	f000 f81b 	bl	8008680 <__sfp>
 800864a:	60a0      	str	r0, [r4, #8]
 800864c:	4620      	mov	r0, r4
 800864e:	f000 f817 	bl	8008680 <__sfp>
 8008652:	2200      	movs	r2, #0
 8008654:	2104      	movs	r1, #4
 8008656:	60e0      	str	r0, [r4, #12]
 8008658:	6860      	ldr	r0, [r4, #4]
 800865a:	f7ff ff81 	bl	8008560 <std>
 800865e:	2201      	movs	r2, #1
 8008660:	2109      	movs	r1, #9
 8008662:	68a0      	ldr	r0, [r4, #8]
 8008664:	f7ff ff7c 	bl	8008560 <std>
 8008668:	2202      	movs	r2, #2
 800866a:	2112      	movs	r1, #18
 800866c:	68e0      	ldr	r0, [r4, #12]
 800866e:	f7ff ff77 	bl	8008560 <std>
 8008672:	2301      	movs	r3, #1
 8008674:	61a3      	str	r3, [r4, #24]
 8008676:	e7d1      	b.n	800861c <__sinit+0xc>
 8008678:	08009a5c 	.word	0x08009a5c
 800867c:	080085a9 	.word	0x080085a9

08008680 <__sfp>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	4607      	mov	r7, r0
 8008684:	f7ff ffac 	bl	80085e0 <__sfp_lock_acquire>
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <__sfp+0x84>)
 800868a:	681e      	ldr	r6, [r3, #0]
 800868c:	69b3      	ldr	r3, [r6, #24]
 800868e:	b913      	cbnz	r3, 8008696 <__sfp+0x16>
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ffbd 	bl	8008610 <__sinit>
 8008696:	3648      	adds	r6, #72	; 0x48
 8008698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800869c:	3b01      	subs	r3, #1
 800869e:	d503      	bpl.n	80086a8 <__sfp+0x28>
 80086a0:	6833      	ldr	r3, [r6, #0]
 80086a2:	b30b      	cbz	r3, 80086e8 <__sfp+0x68>
 80086a4:	6836      	ldr	r6, [r6, #0]
 80086a6:	e7f7      	b.n	8008698 <__sfp+0x18>
 80086a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086ac:	b9d5      	cbnz	r5, 80086e4 <__sfp+0x64>
 80086ae:	4b16      	ldr	r3, [pc, #88]	; (8008708 <__sfp+0x88>)
 80086b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b4:	60e3      	str	r3, [r4, #12]
 80086b6:	6665      	str	r5, [r4, #100]	; 0x64
 80086b8:	f000 f84c 	bl	8008754 <__retarget_lock_init_recursive>
 80086bc:	f7ff ff96 	bl	80085ec <__sfp_lock_release>
 80086c0:	2208      	movs	r2, #8
 80086c2:	4629      	mov	r1, r5
 80086c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086cc:	6025      	str	r5, [r4, #0]
 80086ce:	61a5      	str	r5, [r4, #24]
 80086d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d4:	f7fe f944 	bl	8006960 <memset>
 80086d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086e0:	4620      	mov	r0, r4
 80086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e4:	3468      	adds	r4, #104	; 0x68
 80086e6:	e7d9      	b.n	800869c <__sfp+0x1c>
 80086e8:	2104      	movs	r1, #4
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7ff ff62 	bl	80085b4 <__sfmoreglue>
 80086f0:	4604      	mov	r4, r0
 80086f2:	6030      	str	r0, [r6, #0]
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d1d5      	bne.n	80086a4 <__sfp+0x24>
 80086f8:	f7ff ff78 	bl	80085ec <__sfp_lock_release>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	e7ee      	b.n	80086e0 <__sfp+0x60>
 8008702:	bf00      	nop
 8008704:	08009a5c 	.word	0x08009a5c
 8008708:	ffff0001 	.word	0xffff0001

0800870c <_fwalk_reent>:
 800870c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008710:	4606      	mov	r6, r0
 8008712:	4688      	mov	r8, r1
 8008714:	2700      	movs	r7, #0
 8008716:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800871a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871e:	f1b9 0901 	subs.w	r9, r9, #1
 8008722:	d505      	bpl.n	8008730 <_fwalk_reent+0x24>
 8008724:	6824      	ldr	r4, [r4, #0]
 8008726:	2c00      	cmp	r4, #0
 8008728:	d1f7      	bne.n	800871a <_fwalk_reent+0xe>
 800872a:	4638      	mov	r0, r7
 800872c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008730:	89ab      	ldrh	r3, [r5, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d907      	bls.n	8008746 <_fwalk_reent+0x3a>
 8008736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800873a:	3301      	adds	r3, #1
 800873c:	d003      	beq.n	8008746 <_fwalk_reent+0x3a>
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	47c0      	blx	r8
 8008744:	4307      	orrs	r7, r0
 8008746:	3568      	adds	r5, #104	; 0x68
 8008748:	e7e9      	b.n	800871e <_fwalk_reent+0x12>
	...

0800874c <_localeconv_r>:
 800874c:	4800      	ldr	r0, [pc, #0]	; (8008750 <_localeconv_r+0x4>)
 800874e:	4770      	bx	lr
 8008750:	200001d4 	.word	0x200001d4

08008754 <__retarget_lock_init_recursive>:
 8008754:	4770      	bx	lr

08008756 <__retarget_lock_acquire_recursive>:
 8008756:	4770      	bx	lr

08008758 <__retarget_lock_release_recursive>:
 8008758:	4770      	bx	lr

0800875a <__swhatbuf_r>:
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	460e      	mov	r6, r1
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	4614      	mov	r4, r2
 8008764:	2900      	cmp	r1, #0
 8008766:	461d      	mov	r5, r3
 8008768:	b096      	sub	sp, #88	; 0x58
 800876a:	da07      	bge.n	800877c <__swhatbuf_r+0x22>
 800876c:	2300      	movs	r3, #0
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	89b3      	ldrh	r3, [r6, #12]
 8008772:	061a      	lsls	r2, r3, #24
 8008774:	d410      	bmi.n	8008798 <__swhatbuf_r+0x3e>
 8008776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877a:	e00e      	b.n	800879a <__swhatbuf_r+0x40>
 800877c:	466a      	mov	r2, sp
 800877e:	f000 ff53 	bl	8009628 <_fstat_r>
 8008782:	2800      	cmp	r0, #0
 8008784:	dbf2      	blt.n	800876c <__swhatbuf_r+0x12>
 8008786:	9a01      	ldr	r2, [sp, #4]
 8008788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800878c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008790:	425a      	negs	r2, r3
 8008792:	415a      	adcs	r2, r3
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	e7ee      	b.n	8008776 <__swhatbuf_r+0x1c>
 8008798:	2340      	movs	r3, #64	; 0x40
 800879a:	2000      	movs	r0, #0
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	b016      	add	sp, #88	; 0x58
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080087a4 <__smakebuf_r>:
 80087a4:	898b      	ldrh	r3, [r1, #12]
 80087a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087a8:	079d      	lsls	r5, r3, #30
 80087aa:	4606      	mov	r6, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	d507      	bpl.n	80087c0 <__smakebuf_r+0x1c>
 80087b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	2301      	movs	r3, #1
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	b002      	add	sp, #8
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	466a      	mov	r2, sp
 80087c2:	ab01      	add	r3, sp, #4
 80087c4:	f7ff ffc9 	bl	800875a <__swhatbuf_r>
 80087c8:	9900      	ldr	r1, [sp, #0]
 80087ca:	4605      	mov	r5, r0
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7fe f91b 	bl	8006a08 <_malloc_r>
 80087d2:	b948      	cbnz	r0, 80087e8 <__smakebuf_r+0x44>
 80087d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d8:	059a      	lsls	r2, r3, #22
 80087da:	d4ef      	bmi.n	80087bc <__smakebuf_r+0x18>
 80087dc:	f023 0303 	bic.w	r3, r3, #3
 80087e0:	f043 0302 	orr.w	r3, r3, #2
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	e7e3      	b.n	80087b0 <__smakebuf_r+0xc>
 80087e8:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <__smakebuf_r+0x7c>)
 80087ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	6020      	str	r0, [r4, #0]
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	6120      	str	r0, [r4, #16]
 80087fa:	6163      	str	r3, [r4, #20]
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	b15b      	cbz	r3, 8008818 <__smakebuf_r+0x74>
 8008800:	4630      	mov	r0, r6
 8008802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008806:	f000 ff21 	bl	800964c <_isatty_r>
 800880a:	b128      	cbz	r0, 8008818 <__smakebuf_r+0x74>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	89a0      	ldrh	r0, [r4, #12]
 800881a:	4305      	orrs	r5, r0
 800881c:	81a5      	strh	r5, [r4, #12]
 800881e:	e7cd      	b.n	80087bc <__smakebuf_r+0x18>
 8008820:	080085a9 	.word	0x080085a9

08008824 <memchr>:
 8008824:	4603      	mov	r3, r0
 8008826:	b510      	push	{r4, lr}
 8008828:	b2c9      	uxtb	r1, r1
 800882a:	4402      	add	r2, r0
 800882c:	4293      	cmp	r3, r2
 800882e:	4618      	mov	r0, r3
 8008830:	d101      	bne.n	8008836 <memchr+0x12>
 8008832:	2000      	movs	r0, #0
 8008834:	e003      	b.n	800883e <memchr+0x1a>
 8008836:	7804      	ldrb	r4, [r0, #0]
 8008838:	3301      	adds	r3, #1
 800883a:	428c      	cmp	r4, r1
 800883c:	d1f6      	bne.n	800882c <memchr+0x8>
 800883e:	bd10      	pop	{r4, pc}

08008840 <memcpy>:
 8008840:	440a      	add	r2, r1
 8008842:	4291      	cmp	r1, r2
 8008844:	f100 33ff 	add.w	r3, r0, #4294967295
 8008848:	d100      	bne.n	800884c <memcpy+0xc>
 800884a:	4770      	bx	lr
 800884c:	b510      	push	{r4, lr}
 800884e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008852:	4291      	cmp	r1, r2
 8008854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008858:	d1f9      	bne.n	800884e <memcpy+0xe>
 800885a:	bd10      	pop	{r4, pc}

0800885c <__malloc_lock>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__malloc_lock+0x8>)
 800885e:	f7ff bf7a 	b.w	8008756 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	2000042c 	.word	0x2000042c

08008868 <__malloc_unlock>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__malloc_unlock+0x8>)
 800886a:	f7ff bf75 	b.w	8008758 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	2000042c 	.word	0x2000042c

08008874 <_Balloc>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	b976      	cbnz	r6, 800889c <_Balloc+0x28>
 800887e:	2010      	movs	r0, #16
 8008880:	f7fe f85e 	bl	8006940 <malloc>
 8008884:	4602      	mov	r2, r0
 8008886:	6260      	str	r0, [r4, #36]	; 0x24
 8008888:	b920      	cbnz	r0, 8008894 <_Balloc+0x20>
 800888a:	2166      	movs	r1, #102	; 0x66
 800888c:	4b17      	ldr	r3, [pc, #92]	; (80088ec <_Balloc+0x78>)
 800888e:	4818      	ldr	r0, [pc, #96]	; (80088f0 <_Balloc+0x7c>)
 8008890:	f000 fe8a 	bl	80095a8 <__assert_func>
 8008894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008898:	6006      	str	r6, [r0, #0]
 800889a:	60c6      	str	r6, [r0, #12]
 800889c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800889e:	68f3      	ldr	r3, [r6, #12]
 80088a0:	b183      	cbz	r3, 80088c4 <_Balloc+0x50>
 80088a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088aa:	b9b8      	cbnz	r0, 80088dc <_Balloc+0x68>
 80088ac:	2101      	movs	r1, #1
 80088ae:	fa01 f605 	lsl.w	r6, r1, r5
 80088b2:	1d72      	adds	r2, r6, #5
 80088b4:	4620      	mov	r0, r4
 80088b6:	0092      	lsls	r2, r2, #2
 80088b8:	f000 fb5e 	bl	8008f78 <_calloc_r>
 80088bc:	b160      	cbz	r0, 80088d8 <_Balloc+0x64>
 80088be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088c2:	e00e      	b.n	80088e2 <_Balloc+0x6e>
 80088c4:	2221      	movs	r2, #33	; 0x21
 80088c6:	2104      	movs	r1, #4
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fb55 	bl	8008f78 <_calloc_r>
 80088ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d0:	60f0      	str	r0, [r6, #12]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <_Balloc+0x2e>
 80088d8:	2000      	movs	r0, #0
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	6802      	ldr	r2, [r0, #0]
 80088de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088e2:	2300      	movs	r3, #0
 80088e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e8:	e7f7      	b.n	80088da <_Balloc+0x66>
 80088ea:	bf00      	nop
 80088ec:	08009aa1 	.word	0x08009aa1
 80088f0:	08009b88 	.word	0x08009b88

080088f4 <_Bfree>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b976      	cbnz	r6, 800891c <_Bfree+0x28>
 80088fe:	2010      	movs	r0, #16
 8008900:	f7fe f81e 	bl	8006940 <malloc>
 8008904:	4602      	mov	r2, r0
 8008906:	6268      	str	r0, [r5, #36]	; 0x24
 8008908:	b920      	cbnz	r0, 8008914 <_Bfree+0x20>
 800890a:	218a      	movs	r1, #138	; 0x8a
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <_Bfree+0x3c>)
 800890e:	4809      	ldr	r0, [pc, #36]	; (8008934 <_Bfree+0x40>)
 8008910:	f000 fe4a 	bl	80095a8 <__assert_func>
 8008914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008918:	6006      	str	r6, [r0, #0]
 800891a:	60c6      	str	r6, [r0, #12]
 800891c:	b13c      	cbz	r4, 800892e <_Bfree+0x3a>
 800891e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008928:	6021      	str	r1, [r4, #0]
 800892a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	08009aa1 	.word	0x08009aa1
 8008934:	08009b88 	.word	0x08009b88

08008938 <__multadd>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	4698      	mov	r8, r3
 800893e:	460c      	mov	r4, r1
 8008940:	2300      	movs	r3, #0
 8008942:	690e      	ldr	r6, [r1, #16]
 8008944:	4607      	mov	r7, r0
 8008946:	f101 0014 	add.w	r0, r1, #20
 800894a:	6805      	ldr	r5, [r0, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	b2a9      	uxth	r1, r5
 8008950:	fb02 8101 	mla	r1, r2, r1, r8
 8008954:	0c2d      	lsrs	r5, r5, #16
 8008956:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800895a:	fb02 c505 	mla	r5, r2, r5, ip
 800895e:	b289      	uxth	r1, r1
 8008960:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008964:	429e      	cmp	r6, r3
 8008966:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800896a:	f840 1b04 	str.w	r1, [r0], #4
 800896e:	dcec      	bgt.n	800894a <__multadd+0x12>
 8008970:	f1b8 0f00 	cmp.w	r8, #0
 8008974:	d022      	beq.n	80089bc <__multadd+0x84>
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	42b3      	cmp	r3, r6
 800897a:	dc19      	bgt.n	80089b0 <__multadd+0x78>
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	4638      	mov	r0, r7
 8008980:	3101      	adds	r1, #1
 8008982:	f7ff ff77 	bl	8008874 <_Balloc>
 8008986:	4605      	mov	r5, r0
 8008988:	b928      	cbnz	r0, 8008996 <__multadd+0x5e>
 800898a:	4602      	mov	r2, r0
 800898c:	21b5      	movs	r1, #181	; 0xb5
 800898e:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <__multadd+0x8c>)
 8008990:	480d      	ldr	r0, [pc, #52]	; (80089c8 <__multadd+0x90>)
 8008992:	f000 fe09 	bl	80095a8 <__assert_func>
 8008996:	6922      	ldr	r2, [r4, #16]
 8008998:	f104 010c 	add.w	r1, r4, #12
 800899c:	3202      	adds	r2, #2
 800899e:	0092      	lsls	r2, r2, #2
 80089a0:	300c      	adds	r0, #12
 80089a2:	f7ff ff4d 	bl	8008840 <memcpy>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ffa3 	bl	80088f4 <_Bfree>
 80089ae:	462c      	mov	r4, r5
 80089b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80089b4:	3601      	adds	r6, #1
 80089b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80089ba:	6126      	str	r6, [r4, #16]
 80089bc:	4620      	mov	r0, r4
 80089be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c2:	bf00      	nop
 80089c4:	08009b17 	.word	0x08009b17
 80089c8:	08009b88 	.word	0x08009b88

080089cc <__hi0bits>:
 80089cc:	0c02      	lsrs	r2, r0, #16
 80089ce:	0412      	lsls	r2, r2, #16
 80089d0:	4603      	mov	r3, r0
 80089d2:	b9ca      	cbnz	r2, 8008a08 <__hi0bits+0x3c>
 80089d4:	0403      	lsls	r3, r0, #16
 80089d6:	2010      	movs	r0, #16
 80089d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80089dc:	bf04      	itt	eq
 80089de:	021b      	lsleq	r3, r3, #8
 80089e0:	3008      	addeq	r0, #8
 80089e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80089e6:	bf04      	itt	eq
 80089e8:	011b      	lsleq	r3, r3, #4
 80089ea:	3004      	addeq	r0, #4
 80089ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80089f0:	bf04      	itt	eq
 80089f2:	009b      	lsleq	r3, r3, #2
 80089f4:	3002      	addeq	r0, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	db05      	blt.n	8008a06 <__hi0bits+0x3a>
 80089fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80089fe:	f100 0001 	add.w	r0, r0, #1
 8008a02:	bf08      	it	eq
 8008a04:	2020      	moveq	r0, #32
 8008a06:	4770      	bx	lr
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e7e5      	b.n	80089d8 <__hi0bits+0xc>

08008a0c <__lo0bits>:
 8008a0c:	6803      	ldr	r3, [r0, #0]
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f013 0007 	ands.w	r0, r3, #7
 8008a14:	d00b      	beq.n	8008a2e <__lo0bits+0x22>
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d422      	bmi.n	8008a60 <__lo0bits+0x54>
 8008a1a:	0798      	lsls	r0, r3, #30
 8008a1c:	bf49      	itett	mi
 8008a1e:	085b      	lsrmi	r3, r3, #1
 8008a20:	089b      	lsrpl	r3, r3, #2
 8008a22:	2001      	movmi	r0, #1
 8008a24:	6013      	strmi	r3, [r2, #0]
 8008a26:	bf5c      	itt	pl
 8008a28:	2002      	movpl	r0, #2
 8008a2a:	6013      	strpl	r3, [r2, #0]
 8008a2c:	4770      	bx	lr
 8008a2e:	b299      	uxth	r1, r3
 8008a30:	b909      	cbnz	r1, 8008a36 <__lo0bits+0x2a>
 8008a32:	2010      	movs	r0, #16
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a3a:	bf04      	itt	eq
 8008a3c:	0a1b      	lsreq	r3, r3, #8
 8008a3e:	3008      	addeq	r0, #8
 8008a40:	0719      	lsls	r1, r3, #28
 8008a42:	bf04      	itt	eq
 8008a44:	091b      	lsreq	r3, r3, #4
 8008a46:	3004      	addeq	r0, #4
 8008a48:	0799      	lsls	r1, r3, #30
 8008a4a:	bf04      	itt	eq
 8008a4c:	089b      	lsreq	r3, r3, #2
 8008a4e:	3002      	addeq	r0, #2
 8008a50:	07d9      	lsls	r1, r3, #31
 8008a52:	d403      	bmi.n	8008a5c <__lo0bits+0x50>
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	f100 0001 	add.w	r0, r0, #1
 8008a5a:	d003      	beq.n	8008a64 <__lo0bits+0x58>
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4770      	bx	lr
 8008a60:	2000      	movs	r0, #0
 8008a62:	4770      	bx	lr
 8008a64:	2020      	movs	r0, #32
 8008a66:	4770      	bx	lr

08008a68 <__i2b>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f7ff ff01 	bl	8008874 <_Balloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__i2b+0x1a>
 8008a76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <__i2b+0x24>)
 8008a7c:	4804      	ldr	r0, [pc, #16]	; (8008a90 <__i2b+0x28>)
 8008a7e:	f000 fd93 	bl	80095a8 <__assert_func>
 8008a82:	2301      	movs	r3, #1
 8008a84:	6144      	str	r4, [r0, #20]
 8008a86:	6103      	str	r3, [r0, #16]
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08009b17 	.word	0x08009b17
 8008a90:	08009b88 	.word	0x08009b88

08008a94 <__multiply>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	4614      	mov	r4, r2
 8008a9a:	690a      	ldr	r2, [r1, #16]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	bfbe      	ittt	lt
 8008aa4:	460b      	movlt	r3, r1
 8008aa6:	4625      	movlt	r5, r4
 8008aa8:	461c      	movlt	r4, r3
 8008aaa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008aae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ab2:	68ab      	ldr	r3, [r5, #8]
 8008ab4:	6869      	ldr	r1, [r5, #4]
 8008ab6:	eb0a 0709 	add.w	r7, sl, r9
 8008aba:	42bb      	cmp	r3, r7
 8008abc:	b085      	sub	sp, #20
 8008abe:	bfb8      	it	lt
 8008ac0:	3101      	addlt	r1, #1
 8008ac2:	f7ff fed7 	bl	8008874 <_Balloc>
 8008ac6:	b930      	cbnz	r0, 8008ad6 <__multiply+0x42>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f240 115d 	movw	r1, #349	; 0x15d
 8008ace:	4b41      	ldr	r3, [pc, #260]	; (8008bd4 <__multiply+0x140>)
 8008ad0:	4841      	ldr	r0, [pc, #260]	; (8008bd8 <__multiply+0x144>)
 8008ad2:	f000 fd69 	bl	80095a8 <__assert_func>
 8008ad6:	f100 0614 	add.w	r6, r0, #20
 8008ada:	4633      	mov	r3, r6
 8008adc:	2200      	movs	r2, #0
 8008ade:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ae2:	4543      	cmp	r3, r8
 8008ae4:	d31e      	bcc.n	8008b24 <__multiply+0x90>
 8008ae6:	f105 0c14 	add.w	ip, r5, #20
 8008aea:	f104 0314 	add.w	r3, r4, #20
 8008aee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008af2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008af6:	9202      	str	r2, [sp, #8]
 8008af8:	ebac 0205 	sub.w	r2, ip, r5
 8008afc:	3a15      	subs	r2, #21
 8008afe:	f022 0203 	bic.w	r2, r2, #3
 8008b02:	3204      	adds	r2, #4
 8008b04:	f105 0115 	add.w	r1, r5, #21
 8008b08:	458c      	cmp	ip, r1
 8008b0a:	bf38      	it	cc
 8008b0c:	2204      	movcc	r2, #4
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9a02      	ldr	r2, [sp, #8]
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d808      	bhi.n	8008b2a <__multiply+0x96>
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	dc55      	bgt.n	8008bc8 <__multiply+0x134>
 8008b1c:	6107      	str	r7, [r0, #16]
 8008b1e:	b005      	add	sp, #20
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	f843 2b04 	str.w	r2, [r3], #4
 8008b28:	e7db      	b.n	8008ae2 <__multiply+0x4e>
 8008b2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b2e:	f1ba 0f00 	cmp.w	sl, #0
 8008b32:	d020      	beq.n	8008b76 <__multiply+0xe2>
 8008b34:	46b1      	mov	r9, r6
 8008b36:	2200      	movs	r2, #0
 8008b38:	f105 0e14 	add.w	lr, r5, #20
 8008b3c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b40:	f8d9 b000 	ldr.w	fp, [r9]
 8008b44:	b2a1      	uxth	r1, r4
 8008b46:	fa1f fb8b 	uxth.w	fp, fp
 8008b4a:	fb0a b101 	mla	r1, sl, r1, fp
 8008b4e:	4411      	add	r1, r2
 8008b50:	f8d9 2000 	ldr.w	r2, [r9]
 8008b54:	0c24      	lsrs	r4, r4, #16
 8008b56:	0c12      	lsrs	r2, r2, #16
 8008b58:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b5c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b60:	b289      	uxth	r1, r1
 8008b62:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b66:	45f4      	cmp	ip, lr
 8008b68:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b6c:	f849 1b04 	str.w	r1, [r9], #4
 8008b70:	d8e4      	bhi.n	8008b3c <__multiply+0xa8>
 8008b72:	9901      	ldr	r1, [sp, #4]
 8008b74:	5072      	str	r2, [r6, r1]
 8008b76:	9a03      	ldr	r2, [sp, #12]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b7e:	f1b9 0f00 	cmp.w	r9, #0
 8008b82:	d01f      	beq.n	8008bc4 <__multiply+0x130>
 8008b84:	46b6      	mov	lr, r6
 8008b86:	f04f 0a00 	mov.w	sl, #0
 8008b8a:	6834      	ldr	r4, [r6, #0]
 8008b8c:	f105 0114 	add.w	r1, r5, #20
 8008b90:	880a      	ldrh	r2, [r1, #0]
 8008b92:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b96:	b2a4      	uxth	r4, r4
 8008b98:	fb09 b202 	mla	r2, r9, r2, fp
 8008b9c:	4492      	add	sl, r2
 8008b9e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ba2:	f84e 4b04 	str.w	r4, [lr], #4
 8008ba6:	f851 4b04 	ldr.w	r4, [r1], #4
 8008baa:	f8be 2000 	ldrh.w	r2, [lr]
 8008bae:	0c24      	lsrs	r4, r4, #16
 8008bb0:	fb09 2404 	mla	r4, r9, r4, r2
 8008bb4:	458c      	cmp	ip, r1
 8008bb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008bba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bbe:	d8e7      	bhi.n	8008b90 <__multiply+0xfc>
 8008bc0:	9a01      	ldr	r2, [sp, #4]
 8008bc2:	50b4      	str	r4, [r6, r2]
 8008bc4:	3604      	adds	r6, #4
 8008bc6:	e7a3      	b.n	8008b10 <__multiply+0x7c>
 8008bc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1a5      	bne.n	8008b1c <__multiply+0x88>
 8008bd0:	3f01      	subs	r7, #1
 8008bd2:	e7a1      	b.n	8008b18 <__multiply+0x84>
 8008bd4:	08009b17 	.word	0x08009b17
 8008bd8:	08009b88 	.word	0x08009b88

08008bdc <__pow5mult>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4615      	mov	r5, r2
 8008be2:	f012 0203 	ands.w	r2, r2, #3
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	d007      	beq.n	8008bfc <__pow5mult+0x20>
 8008bec:	4c25      	ldr	r4, [pc, #148]	; (8008c84 <__pow5mult+0xa8>)
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bf6:	f7ff fe9f 	bl	8008938 <__multadd>
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	10ad      	asrs	r5, r5, #2
 8008bfe:	d03d      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c02:	b97c      	cbnz	r4, 8008c24 <__pow5mult+0x48>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f7fd fe9b 	bl	8006940 <malloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c0e:	b928      	cbnz	r0, 8008c1c <__pow5mult+0x40>
 8008c10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c14:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <__pow5mult+0xac>)
 8008c16:	481d      	ldr	r0, [pc, #116]	; (8008c8c <__pow5mult+0xb0>)
 8008c18:	f000 fcc6 	bl	80095a8 <__assert_func>
 8008c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c20:	6004      	str	r4, [r0, #0]
 8008c22:	60c4      	str	r4, [r0, #12]
 8008c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c2c:	b94c      	cbnz	r4, 8008c42 <__pow5mult+0x66>
 8008c2e:	f240 2171 	movw	r1, #625	; 0x271
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff ff18 	bl	8008a68 <__i2b>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 0900 	mov.w	r9, #0
 8008c46:	07eb      	lsls	r3, r5, #31
 8008c48:	d50a      	bpl.n	8008c60 <__pow5mult+0x84>
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff20 	bl	8008a94 <__multiply>
 8008c54:	4680      	mov	r8, r0
 8008c56:	4639      	mov	r1, r7
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff fe4b 	bl	80088f4 <_Bfree>
 8008c5e:	4647      	mov	r7, r8
 8008c60:	106d      	asrs	r5, r5, #1
 8008c62:	d00b      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	b938      	cbnz	r0, 8008c78 <__pow5mult+0x9c>
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff ff11 	bl	8008a94 <__multiply>
 8008c72:	6020      	str	r0, [r4, #0]
 8008c74:	f8c0 9000 	str.w	r9, [r0]
 8008c78:	4604      	mov	r4, r0
 8008c7a:	e7e4      	b.n	8008c46 <__pow5mult+0x6a>
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c82:	bf00      	nop
 8008c84:	08009cd8 	.word	0x08009cd8
 8008c88:	08009aa1 	.word	0x08009aa1
 8008c8c:	08009b88 	.word	0x08009b88

08008c90 <__lshift>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	4607      	mov	r7, r0
 8008c98:	4691      	mov	r9, r2
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6849      	ldr	r1, [r1, #4]
 8008c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ca2:	68a3      	ldr	r3, [r4, #8]
 8008ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ca8:	f108 0601 	add.w	r6, r8, #1
 8008cac:	42b3      	cmp	r3, r6
 8008cae:	db0b      	blt.n	8008cc8 <__lshift+0x38>
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff fddf 	bl	8008874 <_Balloc>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	b948      	cbnz	r0, 8008cce <__lshift+0x3e>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cc0:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <__lshift+0xd0>)
 8008cc2:	4828      	ldr	r0, [pc, #160]	; (8008d64 <__lshift+0xd4>)
 8008cc4:	f000 fc70 	bl	80095a8 <__assert_func>
 8008cc8:	3101      	adds	r1, #1
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	e7ee      	b.n	8008cac <__lshift+0x1c>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f100 0114 	add.w	r1, r0, #20
 8008cd4:	f100 0210 	add.w	r2, r0, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	4553      	cmp	r3, sl
 8008cdc:	db33      	blt.n	8008d46 <__lshift+0xb6>
 8008cde:	6920      	ldr	r0, [r4, #16]
 8008ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ce4:	f104 0314 	add.w	r3, r4, #20
 8008ce8:	f019 091f 	ands.w	r9, r9, #31
 8008cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cf4:	d02b      	beq.n	8008d4e <__lshift+0xbe>
 8008cf6:	468a      	mov	sl, r1
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	fa00 f009 	lsl.w	r0, r0, r9
 8008d04:	4302      	orrs	r2, r0
 8008d06:	f84a 2b04 	str.w	r2, [sl], #4
 8008d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0e:	459c      	cmp	ip, r3
 8008d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d14:	d8f3      	bhi.n	8008cfe <__lshift+0x6e>
 8008d16:	ebac 0304 	sub.w	r3, ip, r4
 8008d1a:	3b15      	subs	r3, #21
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	3304      	adds	r3, #4
 8008d22:	f104 0015 	add.w	r0, r4, #21
 8008d26:	4584      	cmp	ip, r0
 8008d28:	bf38      	it	cc
 8008d2a:	2304      	movcc	r3, #4
 8008d2c:	50ca      	str	r2, [r1, r3]
 8008d2e:	b10a      	cbz	r2, 8008d34 <__lshift+0xa4>
 8008d30:	f108 0602 	add.w	r6, r8, #2
 8008d34:	3e01      	subs	r6, #1
 8008d36:	4638      	mov	r0, r7
 8008d38:	4621      	mov	r1, r4
 8008d3a:	612e      	str	r6, [r5, #16]
 8008d3c:	f7ff fdda 	bl	80088f4 <_Bfree>
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	e7c5      	b.n	8008cda <__lshift+0x4a>
 8008d4e:	3904      	subs	r1, #4
 8008d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d54:	459c      	cmp	ip, r3
 8008d56:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d5a:	d8f9      	bhi.n	8008d50 <__lshift+0xc0>
 8008d5c:	e7ea      	b.n	8008d34 <__lshift+0xa4>
 8008d5e:	bf00      	nop
 8008d60:	08009b17 	.word	0x08009b17
 8008d64:	08009b88 	.word	0x08009b88

08008d68 <__mcmp>:
 8008d68:	4603      	mov	r3, r0
 8008d6a:	690a      	ldr	r2, [r1, #16]
 8008d6c:	6900      	ldr	r0, [r0, #16]
 8008d6e:	b530      	push	{r4, r5, lr}
 8008d70:	1a80      	subs	r0, r0, r2
 8008d72:	d10d      	bne.n	8008d90 <__mcmp+0x28>
 8008d74:	3314      	adds	r3, #20
 8008d76:	3114      	adds	r1, #20
 8008d78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d88:	4295      	cmp	r5, r2
 8008d8a:	d002      	beq.n	8008d92 <__mcmp+0x2a>
 8008d8c:	d304      	bcc.n	8008d98 <__mcmp+0x30>
 8008d8e:	2001      	movs	r0, #1
 8008d90:	bd30      	pop	{r4, r5, pc}
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	d3f4      	bcc.n	8008d80 <__mcmp+0x18>
 8008d96:	e7fb      	b.n	8008d90 <__mcmp+0x28>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e7f8      	b.n	8008d90 <__mcmp+0x28>
	...

08008da0 <__mdiff>:
 8008da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	4606      	mov	r6, r0
 8008da8:	4611      	mov	r1, r2
 8008daa:	4620      	mov	r0, r4
 8008dac:	4692      	mov	sl, r2
 8008dae:	f7ff ffdb 	bl	8008d68 <__mcmp>
 8008db2:	1e05      	subs	r5, r0, #0
 8008db4:	d111      	bne.n	8008dda <__mdiff+0x3a>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff fd5b 	bl	8008874 <_Balloc>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <__mdiff+0x2e>
 8008dc2:	f240 2132 	movw	r1, #562	; 0x232
 8008dc6:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <__mdiff+0x118>)
 8008dc8:	483c      	ldr	r0, [pc, #240]	; (8008ebc <__mdiff+0x11c>)
 8008dca:	f000 fbed 	bl	80095a8 <__assert_func>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	bfa4      	itt	ge
 8008ddc:	4653      	movge	r3, sl
 8008dde:	46a2      	movge	sl, r4
 8008de0:	4630      	mov	r0, r6
 8008de2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008de6:	bfa6      	itte	ge
 8008de8:	461c      	movge	r4, r3
 8008dea:	2500      	movge	r5, #0
 8008dec:	2501      	movlt	r5, #1
 8008dee:	f7ff fd41 	bl	8008874 <_Balloc>
 8008df2:	4602      	mov	r2, r0
 8008df4:	b918      	cbnz	r0, 8008dfe <__mdiff+0x5e>
 8008df6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <__mdiff+0x118>)
 8008dfc:	e7e4      	b.n	8008dc8 <__mdiff+0x28>
 8008dfe:	f100 0814 	add.w	r8, r0, #20
 8008e02:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008e06:	60c5      	str	r5, [r0, #12]
 8008e08:	f04f 0c00 	mov.w	ip, #0
 8008e0c:	f10a 0514 	add.w	r5, sl, #20
 8008e10:	f10a 0010 	add.w	r0, sl, #16
 8008e14:	46c2      	mov	sl, r8
 8008e16:	6926      	ldr	r6, [r4, #16]
 8008e18:	f104 0914 	add.w	r9, r4, #20
 8008e1c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008e20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e24:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e2c:	fa1f f18b 	uxth.w	r1, fp
 8008e30:	4461      	add	r1, ip
 8008e32:	fa1f fc83 	uxth.w	ip, r3
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	eba1 010c 	sub.w	r1, r1, ip
 8008e3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e40:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e44:	b289      	uxth	r1, r1
 8008e46:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e4a:	454e      	cmp	r6, r9
 8008e4c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e50:	f84a 3b04 	str.w	r3, [sl], #4
 8008e54:	d8e6      	bhi.n	8008e24 <__mdiff+0x84>
 8008e56:	1b33      	subs	r3, r6, r4
 8008e58:	3b15      	subs	r3, #21
 8008e5a:	f023 0303 	bic.w	r3, r3, #3
 8008e5e:	3415      	adds	r4, #21
 8008e60:	3304      	adds	r3, #4
 8008e62:	42a6      	cmp	r6, r4
 8008e64:	bf38      	it	cc
 8008e66:	2304      	movcc	r3, #4
 8008e68:	441d      	add	r5, r3
 8008e6a:	4443      	add	r3, r8
 8008e6c:	461e      	mov	r6, r3
 8008e6e:	462c      	mov	r4, r5
 8008e70:	4574      	cmp	r4, lr
 8008e72:	d30e      	bcc.n	8008e92 <__mdiff+0xf2>
 8008e74:	f10e 0103 	add.w	r1, lr, #3
 8008e78:	1b49      	subs	r1, r1, r5
 8008e7a:	f021 0103 	bic.w	r1, r1, #3
 8008e7e:	3d03      	subs	r5, #3
 8008e80:	45ae      	cmp	lr, r5
 8008e82:	bf38      	it	cc
 8008e84:	2100      	movcc	r1, #0
 8008e86:	4419      	add	r1, r3
 8008e88:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008e8c:	b18b      	cbz	r3, 8008eb2 <__mdiff+0x112>
 8008e8e:	6117      	str	r7, [r2, #16]
 8008e90:	e7a0      	b.n	8008dd4 <__mdiff+0x34>
 8008e92:	f854 8b04 	ldr.w	r8, [r4], #4
 8008e96:	fa1f f188 	uxth.w	r1, r8
 8008e9a:	4461      	add	r1, ip
 8008e9c:	1408      	asrs	r0, r1, #16
 8008e9e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008ea2:	b289      	uxth	r1, r1
 8008ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ea8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eac:	f846 1b04 	str.w	r1, [r6], #4
 8008eb0:	e7de      	b.n	8008e70 <__mdiff+0xd0>
 8008eb2:	3f01      	subs	r7, #1
 8008eb4:	e7e8      	b.n	8008e88 <__mdiff+0xe8>
 8008eb6:	bf00      	nop
 8008eb8:	08009b17 	.word	0x08009b17
 8008ebc:	08009b88 	.word	0x08009b88

08008ec0 <__d2b>:
 8008ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008eca:	4690      	mov	r8, r2
 8008ecc:	461d      	mov	r5, r3
 8008ece:	f7ff fcd1 	bl	8008874 <_Balloc>
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	b930      	cbnz	r0, 8008ee4 <__d2b+0x24>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	f240 310a 	movw	r1, #778	; 0x30a
 8008edc:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <__d2b+0xb0>)
 8008ede:	4825      	ldr	r0, [pc, #148]	; (8008f74 <__d2b+0xb4>)
 8008ee0:	f000 fb62 	bl	80095a8 <__assert_func>
 8008ee4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008ee8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008eec:	bb2d      	cbnz	r5, 8008f3a <__d2b+0x7a>
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ef4:	d026      	beq.n	8008f44 <__d2b+0x84>
 8008ef6:	4668      	mov	r0, sp
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	f7ff fd87 	bl	8008a0c <__lo0bits>
 8008efe:	9900      	ldr	r1, [sp, #0]
 8008f00:	b1f0      	cbz	r0, 8008f40 <__d2b+0x80>
 8008f02:	9a01      	ldr	r2, [sp, #4]
 8008f04:	f1c0 0320 	rsb	r3, r0, #32
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	40c2      	lsrs	r2, r0
 8008f10:	6163      	str	r3, [r4, #20]
 8008f12:	9201      	str	r2, [sp, #4]
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bf14      	ite	ne
 8008f1a:	2102      	movne	r1, #2
 8008f1c:	2101      	moveq	r1, #1
 8008f1e:	61a3      	str	r3, [r4, #24]
 8008f20:	6121      	str	r1, [r4, #16]
 8008f22:	b1c5      	cbz	r5, 8008f56 <__d2b+0x96>
 8008f24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f28:	4405      	add	r5, r0
 8008f2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f2e:	603d      	str	r5, [r7, #0]
 8008f30:	6030      	str	r0, [r6, #0]
 8008f32:	4620      	mov	r0, r4
 8008f34:	b002      	add	sp, #8
 8008f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f3e:	e7d6      	b.n	8008eee <__d2b+0x2e>
 8008f40:	6161      	str	r1, [r4, #20]
 8008f42:	e7e7      	b.n	8008f14 <__d2b+0x54>
 8008f44:	a801      	add	r0, sp, #4
 8008f46:	f7ff fd61 	bl	8008a0c <__lo0bits>
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	9b01      	ldr	r3, [sp, #4]
 8008f4e:	6121      	str	r1, [r4, #16]
 8008f50:	6163      	str	r3, [r4, #20]
 8008f52:	3020      	adds	r0, #32
 8008f54:	e7e5      	b.n	8008f22 <__d2b+0x62>
 8008f56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008f5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f5e:	6038      	str	r0, [r7, #0]
 8008f60:	6918      	ldr	r0, [r3, #16]
 8008f62:	f7ff fd33 	bl	80089cc <__hi0bits>
 8008f66:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008f6a:	6031      	str	r1, [r6, #0]
 8008f6c:	e7e1      	b.n	8008f32 <__d2b+0x72>
 8008f6e:	bf00      	nop
 8008f70:	08009b17 	.word	0x08009b17
 8008f74:	08009b88 	.word	0x08009b88

08008f78 <_calloc_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	fb02 f501 	mul.w	r5, r2, r1
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7fd fd42 	bl	8006a08 <_malloc_r>
 8008f84:	4604      	mov	r4, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_calloc_r+0x18>
 8008f88:	462a      	mov	r2, r5
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	f7fd fce8 	bl	8006960 <memset>
 8008f90:	4620      	mov	r0, r4
 8008f92:	bd38      	pop	{r3, r4, r5, pc}

08008f94 <__ssputs_r>:
 8008f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	688e      	ldr	r6, [r1, #8]
 8008f9a:	4682      	mov	sl, r0
 8008f9c:	429e      	cmp	r6, r3
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	4690      	mov	r8, r2
 8008fa2:	461f      	mov	r7, r3
 8008fa4:	d838      	bhi.n	8009018 <__ssputs_r+0x84>
 8008fa6:	898a      	ldrh	r2, [r1, #12]
 8008fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fac:	d032      	beq.n	8009014 <__ssputs_r+0x80>
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	6909      	ldr	r1, [r1, #16]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	eba5 0901 	sub.w	r9, r5, r1
 8008fb8:	6965      	ldr	r5, [r4, #20]
 8008fba:	444b      	add	r3, r9
 8008fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc4:	106d      	asrs	r5, r5, #1
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	bf38      	it	cc
 8008fca:	461d      	movcc	r5, r3
 8008fcc:	0553      	lsls	r3, r2, #21
 8008fce:	d531      	bpl.n	8009034 <__ssputs_r+0xa0>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	f7fd fd19 	bl	8006a08 <_malloc_r>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	b950      	cbnz	r0, 8008ff0 <__ssputs_r+0x5c>
 8008fda:	230c      	movs	r3, #12
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	f8ca 3000 	str.w	r3, [sl]
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	464a      	mov	r2, r9
 8008ff2:	6921      	ldr	r1, [r4, #16]
 8008ff4:	f7ff fc24 	bl	8008840 <memcpy>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	6126      	str	r6, [r4, #16]
 8009006:	444e      	add	r6, r9
 8009008:	6026      	str	r6, [r4, #0]
 800900a:	463e      	mov	r6, r7
 800900c:	6165      	str	r5, [r4, #20]
 800900e:	eba5 0509 	sub.w	r5, r5, r9
 8009012:	60a5      	str	r5, [r4, #8]
 8009014:	42be      	cmp	r6, r7
 8009016:	d900      	bls.n	800901a <__ssputs_r+0x86>
 8009018:	463e      	mov	r6, r7
 800901a:	4632      	mov	r2, r6
 800901c:	4641      	mov	r1, r8
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	f000 fb48 	bl	80096b4 <memmove>
 8009024:	68a3      	ldr	r3, [r4, #8]
 8009026:	6822      	ldr	r2, [r4, #0]
 8009028:	1b9b      	subs	r3, r3, r6
 800902a:	4432      	add	r2, r6
 800902c:	2000      	movs	r0, #0
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	e7db      	b.n	8008fec <__ssputs_r+0x58>
 8009034:	462a      	mov	r2, r5
 8009036:	f000 fb57 	bl	80096e8 <_realloc_r>
 800903a:	4606      	mov	r6, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	d1e1      	bne.n	8009004 <__ssputs_r+0x70>
 8009040:	4650      	mov	r0, sl
 8009042:	6921      	ldr	r1, [r4, #16]
 8009044:	f7fd fc94 	bl	8006970 <_free_r>
 8009048:	e7c7      	b.n	8008fda <__ssputs_r+0x46>
	...

0800904c <_svfiprintf_r>:
 800904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009050:	4698      	mov	r8, r3
 8009052:	898b      	ldrh	r3, [r1, #12]
 8009054:	4607      	mov	r7, r0
 8009056:	061b      	lsls	r3, r3, #24
 8009058:	460d      	mov	r5, r1
 800905a:	4614      	mov	r4, r2
 800905c:	b09d      	sub	sp, #116	; 0x74
 800905e:	d50e      	bpl.n	800907e <_svfiprintf_r+0x32>
 8009060:	690b      	ldr	r3, [r1, #16]
 8009062:	b963      	cbnz	r3, 800907e <_svfiprintf_r+0x32>
 8009064:	2140      	movs	r1, #64	; 0x40
 8009066:	f7fd fccf 	bl	8006a08 <_malloc_r>
 800906a:	6028      	str	r0, [r5, #0]
 800906c:	6128      	str	r0, [r5, #16]
 800906e:	b920      	cbnz	r0, 800907a <_svfiprintf_r+0x2e>
 8009070:	230c      	movs	r3, #12
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	e0d1      	b.n	800921e <_svfiprintf_r+0x1d2>
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	616b      	str	r3, [r5, #20]
 800907e:	2300      	movs	r3, #0
 8009080:	9309      	str	r3, [sp, #36]	; 0x24
 8009082:	2320      	movs	r3, #32
 8009084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009088:	2330      	movs	r3, #48	; 0x30
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009092:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009238 <_svfiprintf_r+0x1ec>
 8009096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800909a:	4623      	mov	r3, r4
 800909c:	469a      	mov	sl, r3
 800909e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a2:	b10a      	cbz	r2, 80090a8 <_svfiprintf_r+0x5c>
 80090a4:	2a25      	cmp	r2, #37	; 0x25
 80090a6:	d1f9      	bne.n	800909c <_svfiprintf_r+0x50>
 80090a8:	ebba 0b04 	subs.w	fp, sl, r4
 80090ac:	d00b      	beq.n	80090c6 <_svfiprintf_r+0x7a>
 80090ae:	465b      	mov	r3, fp
 80090b0:	4622      	mov	r2, r4
 80090b2:	4629      	mov	r1, r5
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff ff6d 	bl	8008f94 <__ssputs_r>
 80090ba:	3001      	adds	r0, #1
 80090bc:	f000 80aa 	beq.w	8009214 <_svfiprintf_r+0x1c8>
 80090c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c2:	445a      	add	r2, fp
 80090c4:	9209      	str	r2, [sp, #36]	; 0x24
 80090c6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80a2 	beq.w	8009214 <_svfiprintf_r+0x1c8>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
 80090d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090da:	f10a 0a01 	add.w	sl, sl, #1
 80090de:	9304      	str	r3, [sp, #16]
 80090e0:	9307      	str	r3, [sp, #28]
 80090e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e6:	931a      	str	r3, [sp, #104]	; 0x68
 80090e8:	4654      	mov	r4, sl
 80090ea:	2205      	movs	r2, #5
 80090ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f0:	4851      	ldr	r0, [pc, #324]	; (8009238 <_svfiprintf_r+0x1ec>)
 80090f2:	f7ff fb97 	bl	8008824 <memchr>
 80090f6:	9a04      	ldr	r2, [sp, #16]
 80090f8:	b9d8      	cbnz	r0, 8009132 <_svfiprintf_r+0xe6>
 80090fa:	06d0      	lsls	r0, r2, #27
 80090fc:	bf44      	itt	mi
 80090fe:	2320      	movmi	r3, #32
 8009100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009104:	0711      	lsls	r1, r2, #28
 8009106:	bf44      	itt	mi
 8009108:	232b      	movmi	r3, #43	; 0x2b
 800910a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910e:	f89a 3000 	ldrb.w	r3, [sl]
 8009112:	2b2a      	cmp	r3, #42	; 0x2a
 8009114:	d015      	beq.n	8009142 <_svfiprintf_r+0xf6>
 8009116:	4654      	mov	r4, sl
 8009118:	2000      	movs	r0, #0
 800911a:	f04f 0c0a 	mov.w	ip, #10
 800911e:	9a07      	ldr	r2, [sp, #28]
 8009120:	4621      	mov	r1, r4
 8009122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009126:	3b30      	subs	r3, #48	; 0x30
 8009128:	2b09      	cmp	r3, #9
 800912a:	d94e      	bls.n	80091ca <_svfiprintf_r+0x17e>
 800912c:	b1b0      	cbz	r0, 800915c <_svfiprintf_r+0x110>
 800912e:	9207      	str	r2, [sp, #28]
 8009130:	e014      	b.n	800915c <_svfiprintf_r+0x110>
 8009132:	eba0 0308 	sub.w	r3, r0, r8
 8009136:	fa09 f303 	lsl.w	r3, r9, r3
 800913a:	4313      	orrs	r3, r2
 800913c:	46a2      	mov	sl, r4
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	e7d2      	b.n	80090e8 <_svfiprintf_r+0x9c>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	1d19      	adds	r1, r3, #4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	9103      	str	r1, [sp, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfbb      	ittet	lt
 800914e:	425b      	neglt	r3, r3
 8009150:	f042 0202 	orrlt.w	r2, r2, #2
 8009154:	9307      	strge	r3, [sp, #28]
 8009156:	9307      	strlt	r3, [sp, #28]
 8009158:	bfb8      	it	lt
 800915a:	9204      	strlt	r2, [sp, #16]
 800915c:	7823      	ldrb	r3, [r4, #0]
 800915e:	2b2e      	cmp	r3, #46	; 0x2e
 8009160:	d10c      	bne.n	800917c <_svfiprintf_r+0x130>
 8009162:	7863      	ldrb	r3, [r4, #1]
 8009164:	2b2a      	cmp	r3, #42	; 0x2a
 8009166:	d135      	bne.n	80091d4 <_svfiprintf_r+0x188>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	3402      	adds	r4, #2
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9203      	str	r2, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfb8      	it	lt
 8009176:	f04f 33ff 	movlt.w	r3, #4294967295
 800917a:	9305      	str	r3, [sp, #20]
 800917c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009248 <_svfiprintf_r+0x1fc>
 8009180:	2203      	movs	r2, #3
 8009182:	4650      	mov	r0, sl
 8009184:	7821      	ldrb	r1, [r4, #0]
 8009186:	f7ff fb4d 	bl	8008824 <memchr>
 800918a:	b140      	cbz	r0, 800919e <_svfiprintf_r+0x152>
 800918c:	2340      	movs	r3, #64	; 0x40
 800918e:	eba0 000a 	sub.w	r0, r0, sl
 8009192:	fa03 f000 	lsl.w	r0, r3, r0
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	3401      	adds	r4, #1
 800919a:	4303      	orrs	r3, r0
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a2:	2206      	movs	r2, #6
 80091a4:	4825      	ldr	r0, [pc, #148]	; (800923c <_svfiprintf_r+0x1f0>)
 80091a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091aa:	f7ff fb3b 	bl	8008824 <memchr>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d038      	beq.n	8009224 <_svfiprintf_r+0x1d8>
 80091b2:	4b23      	ldr	r3, [pc, #140]	; (8009240 <_svfiprintf_r+0x1f4>)
 80091b4:	bb1b      	cbnz	r3, 80091fe <_svfiprintf_r+0x1b2>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	3307      	adds	r3, #7
 80091ba:	f023 0307 	bic.w	r3, r3, #7
 80091be:	3308      	adds	r3, #8
 80091c0:	9303      	str	r3, [sp, #12]
 80091c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c4:	4433      	add	r3, r6
 80091c6:	9309      	str	r3, [sp, #36]	; 0x24
 80091c8:	e767      	b.n	800909a <_svfiprintf_r+0x4e>
 80091ca:	460c      	mov	r4, r1
 80091cc:	2001      	movs	r0, #1
 80091ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d2:	e7a5      	b.n	8009120 <_svfiprintf_r+0xd4>
 80091d4:	2300      	movs	r3, #0
 80091d6:	f04f 0c0a 	mov.w	ip, #10
 80091da:	4619      	mov	r1, r3
 80091dc:	3401      	adds	r4, #1
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e6:	3a30      	subs	r2, #48	; 0x30
 80091e8:	2a09      	cmp	r2, #9
 80091ea:	d903      	bls.n	80091f4 <_svfiprintf_r+0x1a8>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0c5      	beq.n	800917c <_svfiprintf_r+0x130>
 80091f0:	9105      	str	r1, [sp, #20]
 80091f2:	e7c3      	b.n	800917c <_svfiprintf_r+0x130>
 80091f4:	4604      	mov	r4, r0
 80091f6:	2301      	movs	r3, #1
 80091f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fc:	e7f0      	b.n	80091e0 <_svfiprintf_r+0x194>
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	462a      	mov	r2, r5
 8009204:	4638      	mov	r0, r7
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <_svfiprintf_r+0x1f8>)
 8009208:	a904      	add	r1, sp, #16
 800920a:	f7fd fcf5 	bl	8006bf8 <_printf_float>
 800920e:	1c42      	adds	r2, r0, #1
 8009210:	4606      	mov	r6, r0
 8009212:	d1d6      	bne.n	80091c2 <_svfiprintf_r+0x176>
 8009214:	89ab      	ldrh	r3, [r5, #12]
 8009216:	065b      	lsls	r3, r3, #25
 8009218:	f53f af2c 	bmi.w	8009074 <_svfiprintf_r+0x28>
 800921c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921e:	b01d      	add	sp, #116	; 0x74
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	ab03      	add	r3, sp, #12
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	462a      	mov	r2, r5
 800922a:	4638      	mov	r0, r7
 800922c:	4b05      	ldr	r3, [pc, #20]	; (8009244 <_svfiprintf_r+0x1f8>)
 800922e:	a904      	add	r1, sp, #16
 8009230:	f7fd ff7e 	bl	8007130 <_printf_i>
 8009234:	e7eb      	b.n	800920e <_svfiprintf_r+0x1c2>
 8009236:	bf00      	nop
 8009238:	08009ce4 	.word	0x08009ce4
 800923c:	08009cee 	.word	0x08009cee
 8009240:	08006bf9 	.word	0x08006bf9
 8009244:	08008f95 	.word	0x08008f95
 8009248:	08009cea 	.word	0x08009cea

0800924c <__sfputc_r>:
 800924c:	6893      	ldr	r3, [r2, #8]
 800924e:	b410      	push	{r4}
 8009250:	3b01      	subs	r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	6093      	str	r3, [r2, #8]
 8009256:	da07      	bge.n	8009268 <__sfputc_r+0x1c>
 8009258:	6994      	ldr	r4, [r2, #24]
 800925a:	42a3      	cmp	r3, r4
 800925c:	db01      	blt.n	8009262 <__sfputc_r+0x16>
 800925e:	290a      	cmp	r1, #10
 8009260:	d102      	bne.n	8009268 <__sfputc_r+0x1c>
 8009262:	bc10      	pop	{r4}
 8009264:	f7fe b97c 	b.w	8007560 <__swbuf_r>
 8009268:	6813      	ldr	r3, [r2, #0]
 800926a:	1c58      	adds	r0, r3, #1
 800926c:	6010      	str	r0, [r2, #0]
 800926e:	7019      	strb	r1, [r3, #0]
 8009270:	4608      	mov	r0, r1
 8009272:	bc10      	pop	{r4}
 8009274:	4770      	bx	lr

08009276 <__sfputs_r>:
 8009276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	4614      	mov	r4, r2
 800927e:	18d5      	adds	r5, r2, r3
 8009280:	42ac      	cmp	r4, r5
 8009282:	d101      	bne.n	8009288 <__sfputs_r+0x12>
 8009284:	2000      	movs	r0, #0
 8009286:	e007      	b.n	8009298 <__sfputs_r+0x22>
 8009288:	463a      	mov	r2, r7
 800928a:	4630      	mov	r0, r6
 800928c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009290:	f7ff ffdc 	bl	800924c <__sfputc_r>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d1f3      	bne.n	8009280 <__sfputs_r+0xa>
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800929c <_vfiprintf_r>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	460d      	mov	r5, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	4698      	mov	r8, r3
 80092a6:	4606      	mov	r6, r0
 80092a8:	b09d      	sub	sp, #116	; 0x74
 80092aa:	b118      	cbz	r0, 80092b4 <_vfiprintf_r+0x18>
 80092ac:	6983      	ldr	r3, [r0, #24]
 80092ae:	b90b      	cbnz	r3, 80092b4 <_vfiprintf_r+0x18>
 80092b0:	f7ff f9ae 	bl	8008610 <__sinit>
 80092b4:	4b89      	ldr	r3, [pc, #548]	; (80094dc <_vfiprintf_r+0x240>)
 80092b6:	429d      	cmp	r5, r3
 80092b8:	d11b      	bne.n	80092f2 <_vfiprintf_r+0x56>
 80092ba:	6875      	ldr	r5, [r6, #4]
 80092bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x32>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x32>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7ff fa44 	bl	8008756 <__retarget_lock_acquire_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	071b      	lsls	r3, r3, #28
 80092d2:	d501      	bpl.n	80092d8 <_vfiprintf_r+0x3c>
 80092d4:	692b      	ldr	r3, [r5, #16]
 80092d6:	b9eb      	cbnz	r3, 8009314 <_vfiprintf_r+0x78>
 80092d8:	4629      	mov	r1, r5
 80092da:	4630      	mov	r0, r6
 80092dc:	f7fe f992 	bl	8007604 <__swsetup_r>
 80092e0:	b1c0      	cbz	r0, 8009314 <_vfiprintf_r+0x78>
 80092e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e4:	07dc      	lsls	r4, r3, #31
 80092e6:	d50e      	bpl.n	8009306 <_vfiprintf_r+0x6a>
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	b01d      	add	sp, #116	; 0x74
 80092ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f2:	4b7b      	ldr	r3, [pc, #492]	; (80094e0 <_vfiprintf_r+0x244>)
 80092f4:	429d      	cmp	r5, r3
 80092f6:	d101      	bne.n	80092fc <_vfiprintf_r+0x60>
 80092f8:	68b5      	ldr	r5, [r6, #8]
 80092fa:	e7df      	b.n	80092bc <_vfiprintf_r+0x20>
 80092fc:	4b79      	ldr	r3, [pc, #484]	; (80094e4 <_vfiprintf_r+0x248>)
 80092fe:	429d      	cmp	r5, r3
 8009300:	bf08      	it	eq
 8009302:	68f5      	ldreq	r5, [r6, #12]
 8009304:	e7da      	b.n	80092bc <_vfiprintf_r+0x20>
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d4ed      	bmi.n	80092e8 <_vfiprintf_r+0x4c>
 800930c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800930e:	f7ff fa23 	bl	8008758 <__retarget_lock_release_recursive>
 8009312:	e7e9      	b.n	80092e8 <_vfiprintf_r+0x4c>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	2320      	movs	r3, #32
 800931a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800931e:	2330      	movs	r3, #48	; 0x30
 8009320:	f04f 0901 	mov.w	r9, #1
 8009324:	f8cd 800c 	str.w	r8, [sp, #12]
 8009328:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80094e8 <_vfiprintf_r+0x24c>
 800932c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009330:	4623      	mov	r3, r4
 8009332:	469a      	mov	sl, r3
 8009334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009338:	b10a      	cbz	r2, 800933e <_vfiprintf_r+0xa2>
 800933a:	2a25      	cmp	r2, #37	; 0x25
 800933c:	d1f9      	bne.n	8009332 <_vfiprintf_r+0x96>
 800933e:	ebba 0b04 	subs.w	fp, sl, r4
 8009342:	d00b      	beq.n	800935c <_vfiprintf_r+0xc0>
 8009344:	465b      	mov	r3, fp
 8009346:	4622      	mov	r2, r4
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ff93 	bl	8009276 <__sfputs_r>
 8009350:	3001      	adds	r0, #1
 8009352:	f000 80aa 	beq.w	80094aa <_vfiprintf_r+0x20e>
 8009356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009358:	445a      	add	r2, fp
 800935a:	9209      	str	r2, [sp, #36]	; 0x24
 800935c:	f89a 3000 	ldrb.w	r3, [sl]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a2 	beq.w	80094aa <_vfiprintf_r+0x20e>
 8009366:	2300      	movs	r3, #0
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009370:	f10a 0a01 	add.w	sl, sl, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800937c:	931a      	str	r3, [sp, #104]	; 0x68
 800937e:	4654      	mov	r4, sl
 8009380:	2205      	movs	r2, #5
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4858      	ldr	r0, [pc, #352]	; (80094e8 <_vfiprintf_r+0x24c>)
 8009388:	f7ff fa4c 	bl	8008824 <memchr>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	b9d8      	cbnz	r0, 80093c8 <_vfiprintf_r+0x12c>
 8009390:	06d1      	lsls	r1, r2, #27
 8009392:	bf44      	itt	mi
 8009394:	2320      	movmi	r3, #32
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939a:	0713      	lsls	r3, r2, #28
 800939c:	bf44      	itt	mi
 800939e:	232b      	movmi	r3, #43	; 0x2b
 80093a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a4:	f89a 3000 	ldrb.w	r3, [sl]
 80093a8:	2b2a      	cmp	r3, #42	; 0x2a
 80093aa:	d015      	beq.n	80093d8 <_vfiprintf_r+0x13c>
 80093ac:	4654      	mov	r4, sl
 80093ae:	2000      	movs	r0, #0
 80093b0:	f04f 0c0a 	mov.w	ip, #10
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093bc:	3b30      	subs	r3, #48	; 0x30
 80093be:	2b09      	cmp	r3, #9
 80093c0:	d94e      	bls.n	8009460 <_vfiprintf_r+0x1c4>
 80093c2:	b1b0      	cbz	r0, 80093f2 <_vfiprintf_r+0x156>
 80093c4:	9207      	str	r2, [sp, #28]
 80093c6:	e014      	b.n	80093f2 <_vfiprintf_r+0x156>
 80093c8:	eba0 0308 	sub.w	r3, r0, r8
 80093cc:	fa09 f303 	lsl.w	r3, r9, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	46a2      	mov	sl, r4
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	e7d2      	b.n	800937e <_vfiprintf_r+0xe2>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	1d19      	adds	r1, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	9103      	str	r1, [sp, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbb      	ittet	lt
 80093e4:	425b      	neglt	r3, r3
 80093e6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ea:	9307      	strge	r3, [sp, #28]
 80093ec:	9307      	strlt	r3, [sp, #28]
 80093ee:	bfb8      	it	lt
 80093f0:	9204      	strlt	r2, [sp, #16]
 80093f2:	7823      	ldrb	r3, [r4, #0]
 80093f4:	2b2e      	cmp	r3, #46	; 0x2e
 80093f6:	d10c      	bne.n	8009412 <_vfiprintf_r+0x176>
 80093f8:	7863      	ldrb	r3, [r4, #1]
 80093fa:	2b2a      	cmp	r3, #42	; 0x2a
 80093fc:	d135      	bne.n	800946a <_vfiprintf_r+0x1ce>
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	3402      	adds	r4, #2
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	9203      	str	r2, [sp, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfb8      	it	lt
 800940c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094f8 <_vfiprintf_r+0x25c>
 8009416:	2203      	movs	r2, #3
 8009418:	4650      	mov	r0, sl
 800941a:	7821      	ldrb	r1, [r4, #0]
 800941c:	f7ff fa02 	bl	8008824 <memchr>
 8009420:	b140      	cbz	r0, 8009434 <_vfiprintf_r+0x198>
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	eba0 000a 	sub.w	r0, r0, sl
 8009428:	fa03 f000 	lsl.w	r0, r3, r0
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	3401      	adds	r4, #1
 8009430:	4303      	orrs	r3, r0
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009438:	2206      	movs	r2, #6
 800943a:	482c      	ldr	r0, [pc, #176]	; (80094ec <_vfiprintf_r+0x250>)
 800943c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009440:	f7ff f9f0 	bl	8008824 <memchr>
 8009444:	2800      	cmp	r0, #0
 8009446:	d03f      	beq.n	80094c8 <_vfiprintf_r+0x22c>
 8009448:	4b29      	ldr	r3, [pc, #164]	; (80094f0 <_vfiprintf_r+0x254>)
 800944a:	bb1b      	cbnz	r3, 8009494 <_vfiprintf_r+0x1f8>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	3307      	adds	r3, #7
 8009450:	f023 0307 	bic.w	r3, r3, #7
 8009454:	3308      	adds	r3, #8
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	443b      	add	r3, r7
 800945c:	9309      	str	r3, [sp, #36]	; 0x24
 800945e:	e767      	b.n	8009330 <_vfiprintf_r+0x94>
 8009460:	460c      	mov	r4, r1
 8009462:	2001      	movs	r0, #1
 8009464:	fb0c 3202 	mla	r2, ip, r2, r3
 8009468:	e7a5      	b.n	80093b6 <_vfiprintf_r+0x11a>
 800946a:	2300      	movs	r3, #0
 800946c:	f04f 0c0a 	mov.w	ip, #10
 8009470:	4619      	mov	r1, r3
 8009472:	3401      	adds	r4, #1
 8009474:	9305      	str	r3, [sp, #20]
 8009476:	4620      	mov	r0, r4
 8009478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947c:	3a30      	subs	r2, #48	; 0x30
 800947e:	2a09      	cmp	r2, #9
 8009480:	d903      	bls.n	800948a <_vfiprintf_r+0x1ee>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0c5      	beq.n	8009412 <_vfiprintf_r+0x176>
 8009486:	9105      	str	r1, [sp, #20]
 8009488:	e7c3      	b.n	8009412 <_vfiprintf_r+0x176>
 800948a:	4604      	mov	r4, r0
 800948c:	2301      	movs	r3, #1
 800948e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009492:	e7f0      	b.n	8009476 <_vfiprintf_r+0x1da>
 8009494:	ab03      	add	r3, sp, #12
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	462a      	mov	r2, r5
 800949a:	4630      	mov	r0, r6
 800949c:	4b15      	ldr	r3, [pc, #84]	; (80094f4 <_vfiprintf_r+0x258>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	f7fd fbaa 	bl	8006bf8 <_printf_float>
 80094a4:	4607      	mov	r7, r0
 80094a6:	1c78      	adds	r0, r7, #1
 80094a8:	d1d6      	bne.n	8009458 <_vfiprintf_r+0x1bc>
 80094aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	d405      	bmi.n	80094bc <_vfiprintf_r+0x220>
 80094b0:	89ab      	ldrh	r3, [r5, #12]
 80094b2:	059a      	lsls	r2, r3, #22
 80094b4:	d402      	bmi.n	80094bc <_vfiprintf_r+0x220>
 80094b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b8:	f7ff f94e 	bl	8008758 <__retarget_lock_release_recursive>
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	065b      	lsls	r3, r3, #25
 80094c0:	f53f af12 	bmi.w	80092e8 <_vfiprintf_r+0x4c>
 80094c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c6:	e711      	b.n	80092ec <_vfiprintf_r+0x50>
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4630      	mov	r0, r6
 80094d0:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <_vfiprintf_r+0x258>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	f7fd fe2c 	bl	8007130 <_printf_i>
 80094d8:	e7e4      	b.n	80094a4 <_vfiprintf_r+0x208>
 80094da:	bf00      	nop
 80094dc:	08009b48 	.word	0x08009b48
 80094e0:	08009b68 	.word	0x08009b68
 80094e4:	08009b28 	.word	0x08009b28
 80094e8:	08009ce4 	.word	0x08009ce4
 80094ec:	08009cee 	.word	0x08009cee
 80094f0:	08006bf9 	.word	0x08006bf9
 80094f4:	08009277 	.word	0x08009277
 80094f8:	08009cea 	.word	0x08009cea

080094fc <__sread>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009504:	f000 f916 	bl	8009734 <_read_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	bfab      	itete	ge
 800950c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800950e:	89a3      	ldrhlt	r3, [r4, #12]
 8009510:	181b      	addge	r3, r3, r0
 8009512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009516:	bfac      	ite	ge
 8009518:	6563      	strge	r3, [r4, #84]	; 0x54
 800951a:	81a3      	strhlt	r3, [r4, #12]
 800951c:	bd10      	pop	{r4, pc}

0800951e <__swrite>:
 800951e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	461f      	mov	r7, r3
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	4605      	mov	r5, r0
 8009528:	05db      	lsls	r3, r3, #23
 800952a:	460c      	mov	r4, r1
 800952c:	4616      	mov	r6, r2
 800952e:	d505      	bpl.n	800953c <__swrite+0x1e>
 8009530:	2302      	movs	r3, #2
 8009532:	2200      	movs	r2, #0
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	f000 f898 	bl	800966c <_lseek_r>
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	4632      	mov	r2, r6
 8009540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	4628      	mov	r0, r5
 8009548:	463b      	mov	r3, r7
 800954a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	f000 b817 	b.w	8009584 <_write_r>

08009556 <__sseek>:
 8009556:	b510      	push	{r4, lr}
 8009558:	460c      	mov	r4, r1
 800955a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955e:	f000 f885 	bl	800966c <_lseek_r>
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	bf15      	itete	ne
 8009568:	6560      	strne	r0, [r4, #84]	; 0x54
 800956a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800956e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009572:	81a3      	strheq	r3, [r4, #12]
 8009574:	bf18      	it	ne
 8009576:	81a3      	strhne	r3, [r4, #12]
 8009578:	bd10      	pop	{r4, pc}

0800957a <__sclose>:
 800957a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800957e:	f000 b831 	b.w	80095e4 <_close_r>
	...

08009584 <_write_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	2200      	movs	r2, #0
 800958e:	4d05      	ldr	r5, [pc, #20]	; (80095a4 <_write_r+0x20>)
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f9 fe8a 	bl	80032ac <_write>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_write_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_write_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000434 	.word	0x20000434

080095a8 <__assert_func>:
 80095a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095aa:	4614      	mov	r4, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <__assert_func+0x2c>)
 80095b0:	4605      	mov	r5, r0
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68d8      	ldr	r0, [r3, #12]
 80095b6:	b14c      	cbz	r4, 80095cc <__assert_func+0x24>
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <__assert_func+0x30>)
 80095ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095be:	9100      	str	r1, [sp, #0]
 80095c0:	462b      	mov	r3, r5
 80095c2:	4906      	ldr	r1, [pc, #24]	; (80095dc <__assert_func+0x34>)
 80095c4:	f000 f81e 	bl	8009604 <fiprintf>
 80095c8:	f000 f8d3 	bl	8009772 <abort>
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <__assert_func+0x38>)
 80095ce:	461c      	mov	r4, r3
 80095d0:	e7f3      	b.n	80095ba <__assert_func+0x12>
 80095d2:	bf00      	nop
 80095d4:	20000080 	.word	0x20000080
 80095d8:	08009cf5 	.word	0x08009cf5
 80095dc:	08009d02 	.word	0x08009d02
 80095e0:	08009d30 	.word	0x08009d30

080095e4 <_close_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	2300      	movs	r3, #0
 80095e8:	4d05      	ldr	r5, [pc, #20]	; (8009600 <_close_r+0x1c>)
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f9 fe78 	bl	80032e4 <_close>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_close_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_close_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000434 	.word	0x20000434

08009604 <fiprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b503      	push	{r0, r1, lr}
 8009608:	4601      	mov	r1, r0
 800960a:	ab03      	add	r3, sp, #12
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <fiprintf+0x20>)
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	6800      	ldr	r0, [r0, #0]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f7ff fe41 	bl	800929c <_vfiprintf_r>
 800961a:	b002      	add	sp, #8
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	20000080 	.word	0x20000080

08009628 <_fstat_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	2300      	movs	r3, #0
 800962c:	4d06      	ldr	r5, [pc, #24]	; (8009648 <_fstat_r+0x20>)
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f7f9 fe60 	bl	80032fa <_fstat>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d102      	bne.n	8009644 <_fstat_r+0x1c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b103      	cbz	r3, 8009644 <_fstat_r+0x1c>
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	20000434 	.word	0x20000434

0800964c <_isatty_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	2300      	movs	r3, #0
 8009650:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_isatty_r+0x1c>)
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f9 fe5e 	bl	8003318 <_isatty>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_isatty_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_isatty_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20000434 	.word	0x20000434

0800966c <_lseek_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	2200      	movs	r2, #0
 8009676:	4d05      	ldr	r5, [pc, #20]	; (800968c <_lseek_r+0x20>)
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f9 fe56 	bl	800332c <_lseek>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_lseek_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_lseek_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000434 	.word	0x20000434

08009690 <__ascii_mbtowc>:
 8009690:	b082      	sub	sp, #8
 8009692:	b901      	cbnz	r1, 8009696 <__ascii_mbtowc+0x6>
 8009694:	a901      	add	r1, sp, #4
 8009696:	b142      	cbz	r2, 80096aa <__ascii_mbtowc+0x1a>
 8009698:	b14b      	cbz	r3, 80096ae <__ascii_mbtowc+0x1e>
 800969a:	7813      	ldrb	r3, [r2, #0]
 800969c:	600b      	str	r3, [r1, #0]
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	1e10      	subs	r0, r2, #0
 80096a2:	bf18      	it	ne
 80096a4:	2001      	movne	r0, #1
 80096a6:	b002      	add	sp, #8
 80096a8:	4770      	bx	lr
 80096aa:	4610      	mov	r0, r2
 80096ac:	e7fb      	b.n	80096a6 <__ascii_mbtowc+0x16>
 80096ae:	f06f 0001 	mvn.w	r0, #1
 80096b2:	e7f8      	b.n	80096a6 <__ascii_mbtowc+0x16>

080096b4 <memmove>:
 80096b4:	4288      	cmp	r0, r1
 80096b6:	b510      	push	{r4, lr}
 80096b8:	eb01 0402 	add.w	r4, r1, r2
 80096bc:	d902      	bls.n	80096c4 <memmove+0x10>
 80096be:	4284      	cmp	r4, r0
 80096c0:	4623      	mov	r3, r4
 80096c2:	d807      	bhi.n	80096d4 <memmove+0x20>
 80096c4:	1e43      	subs	r3, r0, #1
 80096c6:	42a1      	cmp	r1, r4
 80096c8:	d008      	beq.n	80096dc <memmove+0x28>
 80096ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096d2:	e7f8      	b.n	80096c6 <memmove+0x12>
 80096d4:	4601      	mov	r1, r0
 80096d6:	4402      	add	r2, r0
 80096d8:	428a      	cmp	r2, r1
 80096da:	d100      	bne.n	80096de <memmove+0x2a>
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096e6:	e7f7      	b.n	80096d8 <memmove+0x24>

080096e8 <_realloc_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	4607      	mov	r7, r0
 80096ec:	4614      	mov	r4, r2
 80096ee:	460e      	mov	r6, r1
 80096f0:	b921      	cbnz	r1, 80096fc <_realloc_r+0x14>
 80096f2:	4611      	mov	r1, r2
 80096f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096f8:	f7fd b986 	b.w	8006a08 <_malloc_r>
 80096fc:	b922      	cbnz	r2, 8009708 <_realloc_r+0x20>
 80096fe:	f7fd f937 	bl	8006970 <_free_r>
 8009702:	4625      	mov	r5, r4
 8009704:	4628      	mov	r0, r5
 8009706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009708:	f000 f83a 	bl	8009780 <_malloc_usable_size_r>
 800970c:	42a0      	cmp	r0, r4
 800970e:	d20f      	bcs.n	8009730 <_realloc_r+0x48>
 8009710:	4621      	mov	r1, r4
 8009712:	4638      	mov	r0, r7
 8009714:	f7fd f978 	bl	8006a08 <_malloc_r>
 8009718:	4605      	mov	r5, r0
 800971a:	2800      	cmp	r0, #0
 800971c:	d0f2      	beq.n	8009704 <_realloc_r+0x1c>
 800971e:	4631      	mov	r1, r6
 8009720:	4622      	mov	r2, r4
 8009722:	f7ff f88d 	bl	8008840 <memcpy>
 8009726:	4631      	mov	r1, r6
 8009728:	4638      	mov	r0, r7
 800972a:	f7fd f921 	bl	8006970 <_free_r>
 800972e:	e7e9      	b.n	8009704 <_realloc_r+0x1c>
 8009730:	4635      	mov	r5, r6
 8009732:	e7e7      	b.n	8009704 <_realloc_r+0x1c>

08009734 <_read_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	2200      	movs	r2, #0
 800973e:	4d05      	ldr	r5, [pc, #20]	; (8009754 <_read_r+0x20>)
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7f9 fd95 	bl	8003272 <_read>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_read_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_read_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000434 	.word	0x20000434

08009758 <__ascii_wctomb>:
 8009758:	4603      	mov	r3, r0
 800975a:	4608      	mov	r0, r1
 800975c:	b141      	cbz	r1, 8009770 <__ascii_wctomb+0x18>
 800975e:	2aff      	cmp	r2, #255	; 0xff
 8009760:	d904      	bls.n	800976c <__ascii_wctomb+0x14>
 8009762:	228a      	movs	r2, #138	; 0x8a
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	4770      	bx	lr
 800976c:	2001      	movs	r0, #1
 800976e:	700a      	strb	r2, [r1, #0]
 8009770:	4770      	bx	lr

08009772 <abort>:
 8009772:	2006      	movs	r0, #6
 8009774:	b508      	push	{r3, lr}
 8009776:	f000 f833 	bl	80097e0 <raise>
 800977a:	2001      	movs	r0, #1
 800977c:	f7f9 fd6f 	bl	800325e <_exit>

08009780 <_malloc_usable_size_r>:
 8009780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009784:	1f18      	subs	r0, r3, #4
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfbc      	itt	lt
 800978a:	580b      	ldrlt	r3, [r1, r0]
 800978c:	18c0      	addlt	r0, r0, r3
 800978e:	4770      	bx	lr

08009790 <_raise_r>:
 8009790:	291f      	cmp	r1, #31
 8009792:	b538      	push	{r3, r4, r5, lr}
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	d904      	bls.n	80097a4 <_raise_r+0x14>
 800979a:	2316      	movs	r3, #22
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	f04f 30ff 	mov.w	r0, #4294967295
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097a6:	b112      	cbz	r2, 80097ae <_raise_r+0x1e>
 80097a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ac:	b94b      	cbnz	r3, 80097c2 <_raise_r+0x32>
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 f830 	bl	8009814 <_getpid_r>
 80097b4:	462a      	mov	r2, r5
 80097b6:	4601      	mov	r1, r0
 80097b8:	4620      	mov	r0, r4
 80097ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097be:	f000 b817 	b.w	80097f0 <_kill_r>
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d00a      	beq.n	80097dc <_raise_r+0x4c>
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	d103      	bne.n	80097d2 <_raise_r+0x42>
 80097ca:	2316      	movs	r3, #22
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	2001      	movs	r0, #1
 80097d0:	e7e7      	b.n	80097a2 <_raise_r+0x12>
 80097d2:	2400      	movs	r4, #0
 80097d4:	4628      	mov	r0, r5
 80097d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097da:	4798      	blx	r3
 80097dc:	2000      	movs	r0, #0
 80097de:	e7e0      	b.n	80097a2 <_raise_r+0x12>

080097e0 <raise>:
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <raise+0xc>)
 80097e2:	4601      	mov	r1, r0
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f7ff bfd3 	b.w	8009790 <_raise_r>
 80097ea:	bf00      	nop
 80097ec:	20000080 	.word	0x20000080

080097f0 <_kill_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	2300      	movs	r3, #0
 80097f4:	4d06      	ldr	r5, [pc, #24]	; (8009810 <_kill_r+0x20>)
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	f7f9 fd1e 	bl	800323e <_kill>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	d102      	bne.n	800980c <_kill_r+0x1c>
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	b103      	cbz	r3, 800980c <_kill_r+0x1c>
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	bf00      	nop
 8009810:	20000434 	.word	0x20000434

08009814 <_getpid_r>:
 8009814:	f7f9 bd0c 	b.w	8003230 <_getpid>

08009818 <_init>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr

08009824 <_fini>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr
